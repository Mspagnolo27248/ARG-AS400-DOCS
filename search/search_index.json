{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Documentation Index","text":""},{"location":"#accounts-payable","title":"Accounts Payable","text":""},{"location":"#01-voucher-entry","title":"01 Voucher Entry","text":""},{"location":"#ap100-ocl-voucher-entry","title":"Ap100 Ocl Voucher Entry","text":"<ul> <li>Ap100 Ocl</li> <li>Ap100 Rpg</li> <li>Ap100 Summary </li> </ul>"},{"location":"#ap106-flexi-capture","title":"Ap106 Flexi Capture","text":"<ul> <li>Ap106 Ocl</li> <li>Ap106 Summary</li> <li>Ap106</li> <li>Ap107</li> <li>Ap110 Rpg</li> <li>Ap115 Rpg</li> </ul>"},{"location":"#ap125-arglms","title":"Ap125 Arglms","text":"<ul> <li>Ap1012</li> </ul>"},{"location":"#ap105pcl-clp-sogas","title":"Ap105Pcl Clp Sogas","text":"<ul> <li>Ap105 Call Stack Summary</li> <li>Ap105 Ocl</li> <li>Ap105 Rpg</li> <li>Ap105P Rpg</li> <li>Ap105Pcl Clp</li> </ul>"},{"location":"#ap200-ocl-convert-voucher-to-payable","title":"Ap200 Ocl Convert Voucher To Payable","text":"<ul> <li>Ap200 Summary Merge 1&amp;2</li> <li>Ap200 Summary Purchase Journal</li> <li>Ap200 Summary2 Purchase Journal</li> <li>Ap200Ocl</li> <li>Ap200P Rpg</li> <li>Ap200Rpg</li> <li>Ap205Rpg</li> <li>Ap210Rpg</li> </ul>"},{"location":"#code","title":"Code","text":""},{"location":"#pdf","title":"Pdf","text":""},{"location":"#ap200","title":"Ap200","text":""},{"location":"#ap210","title":"# Ap210","text":""},{"location":"#ap200p","title":"Ap200P","text":""},{"location":"#ap205","title":"Ap205","text":"<ul> <li>Test</li> </ul>"},{"location":"#02-payables","title":"02 Payables","text":""},{"location":"#ap196-ocl-status-code-update","title":"Ap196 Ocl Status Code Update","text":"<ul> <li>196Ocl</li> <li>197Rpg</li> </ul>"},{"location":"#03-payment-cycle","title":"03 Payment Cycle","text":""},{"location":"#ap150-ocl-payment-selection-rpt","title":"Ap150 Ocl Payment Selection &amp; Rpt","text":"<ul> <li>Ap150 Summary</li> <li>Ap150Ocl</li> <li>Ap150Rpg</li> <li>Ap151 Rpg</li> <li>Ap155 Rpg</li> <li>Ap156 Rpg</li> </ul>"},{"location":"#pdfs","title":"Pdfs","text":""},{"location":"#ap160-ocl-print-checks","title":"Ap160 Ocl Print Checks","text":"<ul> <li>Ap160 Print Checks Summary</li> <li>Ap160Ocl</li> <li>Ap160Rpg</li> </ul>"},{"location":"#pdf_1","title":"Pdf","text":""},{"location":"#ap250-ocl-check-register","title":"Ap250 Ocl Check Register","text":"<ul> <li>Ap250 Summary Check Register</li> <li>Ap250Ocl Grok</li> <li>Ap250Rpg Grok</li> <li>Ap251 Rpg</li> <li>Ap255 Rpg</li> <li>Ap256 Rpg</li> <li>Ap256A</li> </ul>"},{"location":"#pdf_2","title":"Pdf","text":""},{"location":"#04-vendor-master","title":"04 Vendor Master","text":""},{"location":"#05-clear-checks-reconciliation","title":"05 Clear Checks &amp; Reconciliation","text":"<ul> <li>Ap190 Ocl Summary</li> <li>Ap190 Ocl</li> <li>Ap190 Rpg</li> </ul>"},{"location":"#ap192-upload-checks-to-clear","title":"Ap192 Upload Checks To Clear","text":"<ul> <li>Ap192 Ocl</li> <li>Ap192 Rpg</li> <li>Ap192 Summary Upload Checks To Clear</li> <li>Ap193 Rpg</li> <li>Ap195 Rpg</li> </ul>"},{"location":"#06-adp-expenses","title":"06 Adp Expenses","text":"<ul> <li>Ap140 Ocl</li> <li>Ap140 Rpg</li> <li>Ap140 Summary Emp Expense</li> <li>Ap141 Rpg</li> <li>Ap145 Rpg</li> </ul>"},{"location":"#accounts-receivable","title":"Accounts Receivable","text":""},{"location":"accounts-payable/01%20Voucher%20Entry/AP100%20OCL%20Voucher%20Entry/AP100%20OCL/","title":"AP100 OCL","text":"<p>The provided document is an Operations Control Language (OCL) program, <code>AP100.ocl36.txt</code>, used in IBM midrange systems (e.g., AS/400 or iSeries) for Accounts Payable (A/P) voucher entry and editing. Below is an explanation of the process steps, followed by a list of external programs called and tables (files) used.</p>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP100%20OCL%20Voucher%20Entry/AP100%20OCL/#process-steps-of-the-rpg-ocl-program","title":"Process Steps of the RPG .OCL Program","text":"<p>The OCL program orchestrates the A/P voucher entry and edit process, handling validation, file management, and user interaction for regular A/P transactions, freight invoices from the LMS system, or other entry methods. Here\u2019s a breakdown of the steps:</p> <ol> <li>Initial Validation and Inventory Check:</li> <li>The program checks if an inventory process (<code>INTSZZ</code>) is in progress by evaluating <code>DATAF1-?9?INTSZZ</code>.</li> <li>If true, it displays messages indicating that the inventory process is ongoing, instructs the user to try again later, pauses for user input (press 0 to cancel), and branches to the <code>END</code> tag, halting execution.</li> <li> <p>This prevents A/P voucher posting during specific inventory processes to avoid data conflicts.</p> </li> <li> <p>Wire Transfer (WT) Handling:</p> </li> <li>The program checks if the transaction involves a wire transfer (<code>?3?/WT</code>).</li> <li>If true, it sets <code>P20</code> to <code>'APWT?WS?'</code> and adds a local data field at offset 198 with <code>'WT*** WIRE TRANSFER ***'</code>.</li> <li>If false, it sets <code>P20</code> to <code>'APTR?WS?'</code> and clears the data field at offset 198.</li> <li> <p>This distinguishes wire transfer transactions from regular A/P transactions.</p> </li> <li> <p>LMS Freight Invoice vs. Regular A/P Check:</p> </li> <li>The program determines whether the process is for freight invoices imported from the LMS system or regular A/P transactions.</li> <li>Rule: If an A/P transaction file (<code>?9??20?</code>) exists, LMS processing is not allowed.</li> <li>If the A/P transaction file does not exist, the program displays a selection screen (<code>AP100S</code>) for the user to choose between LMS automatic processing or regular A/P entry.</li> <li> <p>If the LMS file (<code>DATAF1-?9?LMS?WS?</code>) exists, the program deletes the A/P transaction file (<code>APTX?WS?</code>) using <code>GSDELETE</code>.</p> </li> <li> <p>User Selection for Entry Method:</p> </li> <li>The program loads the <code>AP100S</code> screen to allow the user to select the entry method:<ul> <li>ARGLMS: Triggers the <code>AP125</code> program for LMS processing (with parameter <code>N</code>) and branches to <code>END</code>.</li> <li>PAPER: Triggers the <code>AP125</code> program for paper-based A/P entry (with parameter <code>P</code>) and branches to <code>END</code>.</li> <li>FLEXI: Triggers the <code>AP106</code> program for flexible entry and branches to <code>END</code>.</li> <li>CANCEL: If the user cancels (<code>?L'129,6'?/CANCEL</code>), the program branches to <code>END</code>.</li> </ul> </li> <li> <p>If the A/P transaction file exists (<code>?F'A,?9?APTR?WS?'?/00000000</code>) or <code>DATAF1-?9??20?</code> is true, the program skips to the <code>AROUND</code> tag, bypassing the selection screen.</p> </li> <li> <p>File and Index Creation:</p> </li> <li>If the A/P transaction file (<code>?9??20?</code>) does not exist, the program creates it using <code>BLDFILE</code> with 500 records, 404 bytes each, and specific key fields.</li> <li>It also builds an index for the A/P transaction file (<code>?9?APTX?WS?</code>) with keys at positions 12, 5, 385, and 20.</li> <li>For the inventory transaction holding file (<code>INTZH1</code>), it builds an index if it exists (<code>DATAF1-?9?INTZH1</code>).</li> <li> <p>If the job cost file (<code>JCCOST</code>) exists, it creates a file with 999,000 records, 256 bytes each.</p> </li> <li> <p>File Definitions for AP100:</p> </li> <li>The program defines multiple files for the <code>AP100</code> program, including <code>APTRAN</code>, <code>APTRANX</code>, <code>APTRNX</code>, <code>APOPEN</code>, <code>APOPENH</code>, <code>APOPNHC</code>, <code>APCONT</code>, <code>APDATE</code>, <code>APVEND</code>, <code>APVENDX</code>, <code>GLMAST</code>, <code>JCCOST</code>, <code>GSTABL</code>, <code>POFILE</code>, <code>POADDR</code>, <code>APINVH</code>, <code>APHSTHC</code>, <code>INFIL1</code>, <code>INTZH1</code>, <code>POPROJ</code>, <code>SA5FIUD</code>, <code>SA5FIUM</code>, <code>SA5MOUD</code>, <code>SA5MOUM</code>, <code>BICONT</code>, <code>GSCTUM</code>, <code>FRCINH</code>, and <code>FRCFBH</code>.</li> <li>These files are opened with shared access (<code>DISP-SHR</code>) and extended as needed (e.g., <code>EXTEND-100</code> for <code>APTRAN</code>).</li> <li> <p>The program then runs <code>AP100</code> for voucher entry.</p> </li> <li> <p>Post-Entry Processing:</p> </li> <li>If the A/P transaction file is empty (<code>?F'A,?9??20?'?/00000000</code>), the program branches to <code>END</code>.</li> <li>It sets local variables at offsets 135 (<code>?WS?</code>) and 221 (<code>?9??20?</code>).</li> <li> <p>It deletes and rebuilds the A/P check transaction file (<code>APCT?WS?</code>) with 500 records, 80 bytes each.</p> </li> <li> <p>Voucher Transaction Edit (AP110):</p> </li> <li>The program loads <code>AP110</code> for editing A/P voucher transactions.</li> <li>It defines files like <code>APTRAN</code>, <code>APCONT</code>, <code>APCHKR</code>, <code>APCHKT</code>, <code>APTRNX</code>, <code>GLMAST</code>, <code>APOPNHC</code>, <code>APINVH</code>, <code>GSTABL</code>, <code>APSTAT</code>, <code>APVEND</code>, <code>INFIL1</code>, and <code>INTZH1</code>.</li> <li>It overrides the printer file (<code>APLIST</code>) to output to <code>QUSRSYS/APEDIT</code> or <code>QUSRSYS/TESTOUTQ</code> based on the <code>?9?/G</code> condition.</li> <li> <p>The program runs <code>AP110</code> to edit transactions.</p> </li> <li> <p>Prepaid Check Edit (AP115):</p> </li> <li>If the LMS file (<code>DATAF1-?9?LMS?WS?</code>) exists or the A/P check transaction file (<code>APCT?WS?</code>) is empty, the program skips to <code>NOPPD</code>.</li> <li>Otherwise, it loads <code>AP115</code> for prepaid check editing, defining files like <code>APCHKT</code>, <code>APCHKTX</code>, <code>APCHKR</code>, and <code>APCONT</code>.</li> <li> <p>It overrides the printer file (<code>APLIST</code>) similarly and runs <code>AP115</code>.</p> </li> <li> <p>Purchase Order Edit (Skipped):</p> <ul> <li>The program explicitly skips the purchase order edit section by branching to <code>END</code>.</li> <li>If executed, it would:</li> <li>Sort the A/P transaction file (<code>?9??20?</code>) into <code>?9?APPO?WS?</code> using <code>#GSORT</code> with specific sort criteria (company, P/O number, entry sequence).</li> <li>Load <code>AP120</code> for A/P and purchase order voucher editing, using files like <code>APTRAN</code>, <code>APTRANH</code>, <code>APCONT</code>, and <code>POFILE</code>.</li> </ul> </li> <li> <p>Program Termination:</p> <ul> <li>The program clears all local variables (<code>LOCAL BLANK-*ALL</code>) and ends execution at the <code>END</code> tag.</li> </ul> </li> </ol>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP100%20OCL%20Voucher%20Entry/AP100%20OCL/#external-programs-called","title":"External Programs Called","text":"<p>The OCL program invokes the following external programs: 1. AP100S: Displays the selection screen for choosing the entry method (LMS, paper, or flexible). 2. AP100: Handles A/P voucher entry. 3. AP106: Processes flexible A/P entry (triggered by <code>FLEXI</code> selection). 4. AP110: Edits A/P voucher transactions. 5. AP115: Edits prepaid checks. 6. AP120: Handles A/P and purchase order voucher editing (skipped in this execution). 7. AP125: Processes LMS or paper-based A/P entry (triggered by <code>ARGLMS</code> or <code>PAPER</code> selection). 8. #GSORT: Sorts the A/P transaction file for purchase order editing (skipped).</p>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP100%20OCL%20Voucher%20Entry/AP100%20OCL/#tables-files-used","title":"Tables (Files) Used","text":"<p>The program references the following files (tables), primarily opened with shared access (<code>DISP-SHR</code>): 1. APTRAN: A/P transaction file (<code>?9??20?</code>). 2. APTRANX: Alternate A/P transaction file (<code>?9??20?</code>). 3. APTRNX: A/P transaction index file (<code>?9?APTX?WS?</code>). 4. APOPEN: A/P open items file (<code>?9?APOPEN</code>). 5. APOPENH: A/P open items history file (<code>?9?APOPNH</code>). 6. APOPNHC: A/P open items history control file (<code>?9?APOPNHC</code>). 7. APCONT: A/P control file (<code>?9?APCONT</code>). 8. APDATE: A/P date file (<code>?9?APDATE</code>). 9. APVEND: A/P vendor file (<code>?9?APVEND</code>). 10. APVENDX: A/P vendor index file (<code>?9?APVENX</code>). 11. GLMAST: General ledger master file (<code>?9?GLMAST</code>). 12. JCCOST: Job cost file (<code>?9?JCCOST</code>). 13. GSTABL: General system table (<code>?9?GSTABL</code>). 14. POFILE: Purchase order file (<code>?9?POFILE</code>). 15. POADDR: Purchase order address file (<code>?9?POADDR</code>). 16. APINVH: A/P invoice history file (<code>?9?APINVH</code>). 17. APHSTHC: A/P history control file (<code>?9?APHSTHC</code>). 18. INFIL1: Inventory file 1 (<code>?9?INFIL1</code>). 19. INTZH1: Inventory transaction holding file (<code>?9?INTZH1</code>). 20. POPROJ: Purchase order project file (<code>?9?POPROJ</code>). 21. SA5FIUD: Sales file (unknown purpose, possibly related to financial updates) (<code>?9?SA5FIUD</code>). 22. SA5FIUM: Sales file (unknown purpose, possibly related to financial updates) (<code>?9?SA5FIUM</code>). 23. SA5MOUD: Sales file (unknown purpose, possibly related to monthly updates) (<code>?9?SA5MOUD</code>). 24. SA5MOUM: Sales file (unknown purpose, possibly related to monthly updates) (<code>?9?SA5MOUM</code>). 25. BICONT: Business intelligence control file (<code>?9?BICONT</code>). 26. GSCTUM: General system control table (unknown purpose) (<code>?9?GSCTUM</code>). 27. FRCINH: Freight invoice history file (<code>?9?FRCINH</code>). 28. FRCFBH: Freight feedback history file (<code>?9?FRCFBH</code>). 29. APCHKR: A/P check register file (<code>?9?APCHKR</code>). 30. APCHKT: A/P check transaction file (<code>?9?APCT?WS?</code>). 31. APCHKTX: Alternate A/P check transaction file (<code>?9?APCT?WS?</code>). 32. APSTAT: A/P status file (<code>?9?APSTAT</code>). 33. APPO?WS?: Sorted A/P purchase order file (used by <code>#GSORT</code>, temporary).</p>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP100%20OCL%20Voucher%20Entry/AP100%20OCL/#summary","title":"Summary","text":"<p>The <code>AP100.ocl36.txt</code> OCL program manages the A/P voucher entry and edit process, ensuring no conflicts with inventory processes, handling wire transfers, and allowing user selection between LMS freight invoices, paper-based, or flexible A/P entry. It creates and indexes necessary files, runs appropriate programs (<code>AP100</code>, <code>AP106</code>, <code>AP110</code>, <code>AP115</code>, <code>AP125</code>, <code>#GSORT</code>), and skips purchase order editing. The program uses a comprehensive set of files to store transaction, vendor, inventory, and financial data, ensuring proper integration with the broader A/P system.</p>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP100%20OCL%20Voucher%20Entry/AP100%20RPG/","title":"AP100 RPG","text":"<p>The provided <code>AP100.rpg36.txt</code> is an RPG III program for IBM midrange systems (e.g., AS/400 or iSeries), called by the OCL program <code>AP100.ocl36.txt</code>. It handles the entry and validation of Accounts Payable (A/P) voucher transactions, including header and detail records, with support for various payment types (e.g., wire transfers, ACH, employee expenses) and validations for inventory, purchase orders, and vendor data. Below is an explanation of the process steps, business rules, tables used, and external programs called.</p>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP100%20OCL%20Voucher%20Entry/AP100%20RPG/#process-steps-of-the-rpg-program-ap100","title":"Process Steps of the RPG Program (AP100)","text":"<p>The RPG program <code>AP100</code> manages the interactive entry and editing of A/P voucher transactions through multiple screen formats (<code>AP100S1</code>, <code>AP100S2</code>, <code>AP100S3</code>, <code>AP100S5</code>). It validates input, retrieves data from files, and updates transaction records. Here are the key process steps:</p> <ol> <li>Initialization:</li> <li>Clears variables and sets indicators to their initial state (e.g., <code>Z-ADD *ZERO</code>, <code>MOVE *BLANKS</code>, <code>SETOF</code>).</li> <li>Sets the process type (<code>PTYP</code>) to <code>'NORMAL'</code> if blank (modification <code>JK01</code>).</li> <li>Retrieves the current system date and time (<code>TIME</code>), formats it into various date fields (<code>SYTIME</code>, <code>SYDATE</code>, <code>SYDYMD</code>, <code>MONTH</code>, <code>YEAR</code>), and calculates century for date handling (<code>Y2KCEN</code>).</li> <li>Checks for wire transfer (<code>LDAWT = 'WT'</code>) or employee expense (<code>LDAWT = 'EE'</code>) flags, setting indicators <code>22</code> or <code>23</code> accordingly.</li> <li> <p>Initializes keys for file access (e.g., <code>TERMKY</code> for terms, <code>GSCKEY</code> for carrier ID).</p> </li> <li> <p>Screen Processing:</p> </li> <li>The program uses multiple screen formats:<ul> <li>AP100S1: Collects company number (<code>CONO</code>), vendor number (<code>VEND</code>), entry number (<code>ENT#</code>), canceled voucher number (<code>CNVO</code>), and purchase order number (<code>PONO</code>).</li> <li>AP100S2: Displays and collects header information (e.g., vendor details, invoice amount, invoice number, dates, hold codes).</li> <li>AP100S3: Handles detail line entry (e.g., expense G/L, amount, discount, purchase order, gallons, receipt number).</li> <li>AP100S5: Allows entry of a vendor number (<code>VEND#</code>) for lookup or navigation.</li> </ul> </li> <li> <p>The main loop (<code>DO</code> at line 0446) processes user input based on the screen format triggered (indicators <code>01</code>, <code>02</code>, <code>03</code>, <code>05</code> for <code>S1</code>, <code>S2</code>, <code>S3</code>, <code>S5</code> subroutines).</p> </li> <li> <p>S1 Subroutine (AP100S1 Screen):</p> </li> <li>Validates the company number (<code>CONO</code>) against <code>APCONT</code>. If invalid or deleted (<code>ACDEL = 'D'</code>), displays error message (<code>COM,1</code>) and exits.</li> <li>Checks if vendor (<code>VEND</code>), entry number (<code>ENT#</code>), canceled voucher (<code>CNVO</code>), or purchase order (<code>PONO</code>) are blank or zero. If so, displays error (<code>COM,31</code>) and exits.</li> <li>Searches for vendor information (<code>VNSRCH</code> subroutine) if vendor is valid. If not found, displays error (<code>COM,32</code>).</li> <li>Retrieves the next entry number (<code>ACNXTE</code>) from <code>APCONT</code> for new entries (<code>ADDNEW</code> mode) or validates existing entry numbers (<code>ENT#</code>) against <code>APTRAN</code>.</li> <li>Checks if job cost (<code>ACJCYN = 'Y'</code>) or purchase order (<code>ACPOYN = 'Y'</code>) processing is active, setting indicators <code>65</code> and <code>67</code>.</li> <li> <p>Updates <code>APCONT</code> with the next entry number and writes the record.</p> </li> <li> <p>S2 Subroutine (AP100S2 Screen):</p> </li> <li>Retrieves or clears header information (vendor name, address, invoice amount, dates, hold codes, etc.).</li> <li>Validates vendor number (<code>VEND</code>) against <code>APVEND</code>. If invalid, deleted (<code>VNDEL = 'D'</code>), or inactive (<code>VNDEL = 'I'</code>), displays errors (<code>COM,2</code> or <code>COM,67</code>).</li> <li>Applies vendor defaults (e.g., hold code <code>VNHOLD</code>, single check <code>VNSNGL</code>, expense G/L <code>VNEXGL</code>, terms <code>VNTERM</code>).</li> <li>For employee vendors (<code>VNPRID \u2260 0</code>), sets hold code to <code>'E'</code> and uses employee expense G/L (<code>ACEEGL</code>).</li> <li>Validates hold codes (<code>H</code>, <code>A</code>, <code>W</code>, <code>E</code>, <code>U</code>) and prepay codes (<code>P</code>, <code>A</code>, <code>W</code>, <code>E</code>), setting appropriate hold descriptions (<code>HLDD</code>).</li> <li>Checks invoice number (<code>INV#</code>) for duplicates in <code>APTRANX</code>, <code>APOPEN</code>, <code>APOPNHC</code>, or <code>APHSTHC</code>. If found, requires override codes (<code>COM2,2</code>, <code>COM2,3</code>).</li> <li>Calculates due date (<code>DUDT</code>) and discount due date (<code>DSDT</code>) using terms from <code>GSTABL</code> (subroutines <code>@DTE1</code>, <code>@DTE2</code>, <code>TMDATP</code>).</li> <li>Ensures invoice amount (<code>IAMT</code>) is non-zero and matches detail totals (<code>CLCTOT</code> subroutine).</li> <li> <p>For freight invoices (<code>FRTL \u2260 0</code>), calls <code>AP1011</code> to populate detail lines with calculated freight amounts.</p> </li> <li> <p>S3 Subroutine (AP100S3 Screen):</p> </li> <li>Validates detail line fields (e.g., expense G/L <code>EXGL</code>, amount <code>AMT</code>, discount <code>DISC</code>, purchase order <code>PONO</code>, gallons <code>GALN</code>, receipt <code>RCPT</code>).</li> <li>Ensures expense G/L (<code>EXGL</code>) matches company (<code>LNCO</code>) and is valid in <code>GLMAST</code>. If deleted (<code>GLDEL = 'D'</code>) or inactive (<code>GLDEL = 'I'</code>), displays error (<code>COM,7</code>).</li> <li>Applies vendor default expense G/L (<code>VNEXGL</code>) if blank.</li> <li>Validates discounts: Ensures <code>DISC</code> and <code>DSPC</code> (discount percentage) are not both non-zero (<code>COM,35</code>) and that a discount G/L (<code>ACDSGL</code>) exists (<code>COM,36</code>).</li> <li>For sales orders (<code>SORN \u2260 0</code>), prohibits receipt numbers or gallons (<code>COM,57</code>).</li> <li>Validates gallons/receipt requirements based on <code>VNGRRQ</code> and <code>GLAPCD</code>:<ul> <li>If <code>VNGRRQ = 'Y'</code>, requires gallons (<code>GALN</code>) and receipt (<code>RCPT</code>) (<code>COM,71</code>, <code>COM,72</code>).</li> <li>If <code>VNGRRQ = 'N'</code>, prohibits gallons and receipt (<code>COM,73</code>, <code>COM,74</code>).</li> <li>Ensures G/L requires gallons (<code>GLAPCD = 'Y'</code>) if vendor requires them, and vice versa (<code>COM,75</code>, <code>COM,76</code>).</li> </ul> </li> <li>If <code>GLPOCD = 'Y'</code> (PO required for G/L), ensures <code>PONO</code> is entered (<code>COM,78</code>).</li> <li>Validates receipt numbers (<code>RCPT</code>) against <code>INFIL1</code> or <code>INTZH1</code>, checking quantities and prior postings (<code>COM,40</code>, <code>COM,42</code>, <code>COM,43</code>).</li> <li>Ensures receipt code (<code>CLCD</code>) is <code>'O'</code> or <code>'C'</code> (<code>COM,44</code>).</li> <li>Calculates freight amounts (<code>FRAM</code>) for detail lines if total freight (<code>FRTL</code>) is non-zero, ensuring detail amounts sum to invoice total (<code>IAMT</code>).</li> <li> <p>Updates or adds detail records to <code>APTRAN</code>.</p> </li> <li> <p>S5 Subroutine (AP100S5 Screen):</p> </li> <li>Handles vendor lookup by number (<code>VEND#</code>) or name search (<code>ABBR</code>).</li> <li>If <code>VEND#</code> is entered, sets <code>VEND</code> and clears <code>ABBR</code>, then returns to <code>S1</code>.</li> <li> <p>If blank, performs a name search (<code>NRLFWD</code> subroutine) to display vendor options.</p> </li> <li> <p>Roll Forward/Backward Handling:</p> </li> <li>ROLFWD: Navigates to the next detail line in <code>APTRANX</code>, populating fields (<code>DETGET</code>) and validating (<code>S3EDIT</code>).</li> <li> <p>ROLLBK: Navigates to the previous detail line or header, populating fields (<code>DETGET</code> or <code>HDRGET</code>) and validating (<code>S3EDIT</code> or <code>S2EDIT</code>).</p> </li> <li> <p>Date Handling:</p> </li> <li>Subroutines <code>@DTE1</code> and <code>@DTE2</code> convert between Gregorian and Julian dates for due date and discount date calculations.</li> <li> <p>Ensures due dates (<code>DUDT</code>) and discount due dates (<code>DSDT</code>) are valid and not on holidays/weekends (<code>APDATE</code> file, modification <code>MG17</code>).</p> </li> <li> <p>Freight Invoice Validation:</p> </li> <li> <p>Checks <code>FRCFBH</code> and <code>FRCINH</code> for freight invoices:</p> <ul> <li>For <code>NORMAL</code> mode, ensures <code>FRAPST</code> (A/P status) is blank (<code>COM,60</code>).</li> <li>For <code>PAPER</code> mode, ensures <code>FRINTY = 'P'</code> (<code>COM,62</code>).</li> <li>For <code>ARGLMS</code> mode, ensures <code>FRINTY = 'O'</code> or <code>'S'</code> (<code>COM,61</code>).</li> </ul> </li> <li> <p>File Updates:</p> <ul> <li>Adds or updates header records in <code>APTRAN</code> (e.g., <code>EADD 70</code>, <code>E 70N95</code>).</li> <li>Adds or updates detail records in <code>APTRAN</code> (e.g., <code>EADD 71</code>, <code>E 71N96</code>).</li> <li>Updates <code>APCONT</code> with the next entry number (<code>ACNXTE</code>).</li> <li>Updates one-time vendor information in <code>APTRAN</code> if needed.</li> <li>Writes to <code>APOPENH</code> for open invoices.</li> </ul> </li> <li> <p>Error Handling:</p> <ul> <li>Displays error messages from the <code>COM</code> and <code>COM2</code> arrays for various validation failures (e.g., invalid vendor, duplicate invoice, missing fields).</li> <li>Sets indicator <code>90</code> to highlight errors and prevent progression until corrected.</li> </ul> </li> <li> <p>Termination:</p> <ul> <li>Ends the program when the user presses the end-of-job key (<code>KG</code>), setting the last record indicator (<code>LR</code>) and exiting.</li> </ul> </li> </ol>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP100%20OCL%20Voucher%20Entry/AP100%20RPG/#business-rules","title":"Business Rules","text":"<ol> <li>Company and Vendor Validation:</li> <li>Company number (<code>CONO</code>) must exist in <code>APCONT</code> and not be deleted (<code>ACDEL \u2260 'D'</code>).</li> <li> <p>Vendor number (<code>VEND</code>) must exist in <code>APVEND</code>, not be deleted (<code>VNDEL \u2260 'D'</code>) or inactive (<code>VNDEL \u2260 'I'</code>).</p> </li> <li> <p>Invoice Number Uniqueness:</p> </li> <li> <p>Invoice numbers (<code>INV#</code>) must be unique within the batch (<code>APTRANX</code>) and not exist in open (<code>APOPEN</code>, <code>APOPNHC</code>) or paid (<code>APHSTHC</code>) invoices unless overridden (<code>MG10</code>).</p> </li> <li> <p>Hold and Prepay Codes:</p> </li> <li>Hold codes (<code>HOLD</code>) must be <code>'H'</code> (hold), <code>'A'</code> (ACH), <code>'W'</code> (wire transfer), <code>'E'</code> (employee expense), or <code>'U'</code> (utility auto-payment).</li> <li> <p>Prepay codes (<code>PAID</code>) must be <code>'P'</code>, <code>'A'</code>, <code>'W'</code>, or <code>'E'</code>, with a corresponding check number (<code>PPCK</code>) if applicable.</p> </li> <li> <p>Gallons and Receipt Validation:</p> </li> <li>If the vendor requires gallons/receipts (<code>VNGRRQ = 'Y'</code>), both <code>GALN</code> and <code>RCPT</code> must be entered.</li> <li>If <code>VNGRRQ = 'N'</code>, gallons and receipts are prohibited.</li> <li>If the G/L account requires gallons (<code>GLAPCD = 'Y'</code>), <code>GALN</code> must be entered and match the sign of the amount (<code>AMT</code>).</li> <li> <p>Receipt numbers (<code>RCPT</code>) must exist in <code>INFIL1</code> or <code>INTZH1</code>, with valid quantities and no prior A/P postings.</p> </li> <li> <p>Purchase Order Requirements:</p> </li> <li> <p>If the G/L account requires a purchase order (<code>GLPOCD = 'Y'</code>), a valid <code>PONO</code> must be entered.</p> </li> <li> <p>Discount Validation:</p> </li> <li>Discount amount (<code>DISC</code>) and percentage (<code>DSPC</code>) cannot both be non-zero.</li> <li>A discount G/L (<code>ACDSGL</code>) must exist if discounts are used.</li> <li> <p>Discount due date (<code>DSDT</code>) must be entered if discounts are applied, or an error is raised (<code>MG20</code>).</p> </li> <li> <p>Freight Invoices:</p> </li> <li>Freight invoices must be processed in the correct mode (<code>NORMAL</code>, <code>PAPER</code>, <code>ARGLMS</code>) based on invoice type (<code>FRINTY</code>) in <code>FRCFBH</code> or <code>FRCINH</code>.</li> <li> <p>Freight amounts (<code>FRTL</code>) are allocated to detail lines, with calculations ensuring detail totals match the invoice total.</p> </li> <li> <p>Sales Order Restrictions:</p> </li> <li> <p>If a sales order number (<code>SORN</code>) is entered, receipt numbers and gallons are not allowed.</p> </li> <li> <p>Date Handling:</p> </li> <li>Due dates and discount due dates are calculated based on vendor terms (<code>VNTERM</code>) from <code>GSTABL</code>.</li> <li> <p>Dates are adjusted to avoid holidays and weekends (<code>APDATE</code>).</p> </li> <li> <p>Amount Validation:</p> <ul> <li>Invoice amount (<code>IAMT</code>) must be non-zero and match the sum of detail line amounts (<code>AMT</code> + <code>FRAM</code>).</li> </ul> </li> </ol>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP100%20OCL%20Voucher%20Entry/AP100%20RPG/#tables-files-used","title":"Tables (Files) Used","text":"<p>The program uses the following files, defined with specific attributes (e.g., <code>UC</code> for update/create, <code>IF</code> for input, <code>ID</code> for indexed):</p> <ol> <li>SCREEN: Workstation file for interactive display (1200 bytes, <code>WORKSTN</code>).</li> <li>APTRAN: A/P transaction file (404 bytes, update/create, key length 10).</li> <li>APTRANX: A/P transaction index file (404 bytes, input, key length 10).</li> <li>APTRNX: A/P transaction index file (404 bytes, input, external key, 27 bytes).</li> <li>APOPEN: A/P open items file (384 bytes, input, key length 16).</li> <li>APOPENH: A/P open items history file (384 bytes, update/create, key length 16).</li> <li>APOPNHC: A/P open items history control file (384 bytes, input, key length 32).</li> <li>APCONT: A/P control file (256 bytes, update/create, key length 2).</li> <li>APVEND: A/P vendor file (579 bytes, input, key length 7).</li> <li>APVENDX: A/P vendor index file (579 bytes, input, external key, 17 bytes).</li> <li>GLMAST: General ledger master file (256 bytes, input, key length 11).</li> <li>GSTABL: General system table (256 bytes, input, key length 12).</li> <li>APINVH: A/P invoice history file (64 bytes, input, key length 32).</li> <li>APHSTHC: A/P history control file (384 bytes, input, key length 32).</li> <li>INFIL1: Inventory file (448 bytes, input, external key, 9 bytes).</li> <li>INTZH1: Inventory transaction holding file (592 bytes, input, external key, 9 bytes).</li> <li>SA5FIUD: Sales file (detail, 1024 bytes, input, external key, 14 bytes).</li> <li>SA5FIUM: Sales file (misc, 1024 bytes, input, key length 14).</li> <li>SA5MOUD: Sales file (detail, 1024 bytes, input, external key, 14 bytes).</li> <li>SA5MOUM: Sales file (misc, 1024 bytes, input, key length 14).</li> <li>FRCINH: Freight invoice history file (206 bytes, input, key length 33).</li> <li>FRCFBH: Freight feedback history file (206 bytes, input, key length 39).</li> <li>APDATE: A/P date file (19 bytes, input, key length 10).</li> </ol>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP100%20OCL%20Voucher%20Entry/AP100%20RPG/#external-programs-called","title":"External Programs Called","text":"<ol> <li>AP1011: Called to populate freight detail lines with calculated percentage amounts when a sales order (<code>SORN</code>) and freight total (<code>FRTL</code>) are present. It uses the <code>SALES</code> data structure as a parameter.</li> </ol>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP100%20OCL%20Voucher%20Entry/AP100%20RPG/#summary","title":"Summary","text":"<p>The <code>AP100</code> RPG program is a critical component of the A/P voucher entry system, handling interactive input through multiple screens (<code>AP100S1</code>, <code>AP100S2</code>, <code>AP100S3</code>, <code>AP100S5</code>). It validates company, vendor, invoice, and detail line data, ensuring compliance with business rules such as unique invoice numbers, valid hold/prepay codes, gallons/receipt requirements, and freight invoice processing. The program integrates with numerous files for transaction, vendor, inventory, and financial data, and calls <code>AP1011</code> for freight detail calculations. It enforces strict validations to maintain data integrity and supports various payment types and processing modes (e.g., <code>NORMAL</code>, <code>PAPER</code>, <code>ARGLMS</code>).</p>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP100%20OCL%20Voucher%20Entry/AP100%20Summary/","title":"AP100 Summary","text":""},{"location":"accounts-payable/01%20Voucher%20Entry/AP100%20OCL%20Voucher%20Entry/AP100%20Summary/#list-of-use-cases-implemented-by-the-ap100-ap110-and-ap115-programs","title":"List of Use Cases Implemented by the AP100, AP110, and AP115 Programs","text":"<p>The RPG programs <code>AP100</code>, <code>AP110</code>, and <code>AP115</code> form a call stack for processing Accounts Payable (A/P) voucher transactions on IBM midrange systems (e.g., AS/400 or iSeries). Together, they implement a single cohesive use case:</p> <ol> <li>Use Case: Process and Validate A/P Voucher Transactions</li> <li>Description: This use case involves the entry, validation, editing, and reporting of A/P voucher transactions, including header and detail records, for various payment types (e.g., prepaid checks, ACH, wire transfers, employee expenses, utility auto-payments). The process ensures data integrity, validates against vendor, company, G/L, and inventory data, and generates reports for errors and totals.</li> <li>Components:<ul> <li>AP100: Handles interactive entry and validation of voucher transactions via screen formats (<code>AP100S1</code>, <code>AP100S2</code>, <code>AP100S3</code>, <code>AP100S5</code>), updating transaction files (<code>APTRAN</code>, <code>APCONT</code>) and calling <code>AP1011</code> for freight calculations.</li> <li>AP110: Validates voucher transactions from <code>APTRAN</code>, checks for errors (e.g., duplicate invoices, invalid G/Ls), updates prepaid check records (<code>APCHKT</code>), and produces an edit report (<code>APLIST</code>).</li> <li>AP115: Validates prepaid checks, ensuring non-void checks are not already open and void checks match the full amount, generating an error report (<code>APLIST</code>).</li> </ul> </li> </ol> <p>This single use case encompasses the entire workflow of entering, validating, and reporting A/P voucher transactions, with each program handling a specific aspect of the process.</p>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP100%20OCL%20Voucher%20Entry/AP100%20Summary/#function-requirement-document-process-and-validate-ap-voucher-transactions","title":"Function Requirement Document: Process and Validate A/P Voucher Transactions","text":""},{"location":"accounts-payable/01%20Voucher%20Entry/AP100%20OCL%20Voucher%20Entry/AP100%20Summary/#function-requirement-document-process-and-validate-ap-voucher-transactions_1","title":"Function Requirement Document: Process and Validate A/P Voucher Transactions","text":""},{"location":"accounts-payable/01%20Voucher%20Entry/AP100%20OCL%20Voucher%20Entry/AP100%20Summary/#overview","title":"Overview","text":"<p>This function processes and validates Accounts Payable (A/P) voucher transactions, including header and detail records, for various payment types (prepaid checks, ACH, wire transfers, employee expenses, utility auto-payments). It ensures data integrity by validating inputs against company, vendor, G/L, and inventory data, calculates due dates and discounts, updates transaction and check files, and generates reports for errors and totals.</p>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP100%20OCL%20Voucher%20Entry/AP100%20Summary/#inputs","title":"Inputs","text":"<ul> <li>Company Number (<code>CONO</code>): 2-digit identifier for the company.</li> <li>Vendor Number (<code>VEND</code>): 5-digit identifier for the vendor.</li> <li>Entry Number (<code>ENT#</code>): 5-digit transaction identifier (auto-generated or user-provided).</li> <li>Invoice Number (<code>INV#</code>): 20-character vendor invoice number.</li> <li>Invoice Amount (<code>IAMT</code>): 11.2-digit total invoice amount.</li> <li>Invoice Date (<code>INDT</code>): 6-digit vendor invoice date (MMDDYY).</li> <li>Due Date (<code>DUDT</code>): 6-digit due date (MMDDYY, calculated or user-provided).</li> <li>Discount Due Date (<code>DSDT</code>): 6-digit discount due date (MMDDYY, calculated or user-provided).</li> <li>Hold Code (<code>HOLD</code>): 1-character code (<code>H</code>=hold, <code>A</code>=ACH, <code>W</code>=wire transfer, <code>E</code>=employee expense, <code>U</code>=utility auto-payment).</li> <li>Prepay Code (<code>PAID</code>): 1-character code (<code>P</code>=prepaid, <code>A</code>=ACH, <code>E</code>=employee expense, <code>U</code>=utility auto-payment).</li> <li>Prepaid Check Number (<code>PPCK</code>): 6-digit check number for prepaid transactions.</li> <li>Single Check Flag (<code>SNGL</code>): 1-character flag (<code>S</code>=single check).</li> <li>Canceled Voucher (<code>CNVO</code>): 5-digit canceled voucher number.</li> <li>Purchase Order Number (<code>PONO</code>): 30-character purchase order number.</li> <li>Sales Order Number (<code>SORN</code>): 6-digit sales order number.</li> <li>Carrier ID (<code>CAID</code>): 6-character carrier identifier.</li> <li>Process Type (<code>PTYP</code>): 6-character process type (<code>NORMAL</code>, <code>PAPER</code>, <code>ARGLMS</code>).</li> <li>Freight Total (<code>FRTL</code>): 7.2-digit total freight amount to allocate.</li> <li>Detail Lines:</li> <li>Sequence Number (<code>ENSQ</code>): 3-digit line sequence.</li> <li>Expense G/L (<code>EXGL</code>): 8-digit expense general ledger account.</li> <li>Amount (<code>AMT</code>): 8.2-digit line amount.</li> <li>Discount Amount (<code>DISC</code>): 8.2-digit discount amount.</li> <li>Discount Percentage (<code>DSPC</code>): 3.2-digit discount percentage.</li> <li>Gallons (<code>GALN</code>): 4.2-digit gallons quantity.</li> <li>Receipt Number (<code>RCPT</code>): 7-digit receipt number.</li> <li>Receipt Code (<code>CLCD</code>): 1-character code (<code>O</code>=open, <code>C</code>=closed).</li> <li>Freight Amount (<code>FRAM</code>): 4.2-digit freight amount per line.</li> <li>Product Amount (<code>PRAM</code>): 6.2-digit product amount per line.</li> </ul>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP100%20OCL%20Voucher%20Entry/AP100%20Summary/#outputs","title":"Outputs","text":"<ul> <li>Updated Files:</li> <li><code>APTRAN</code>: Transaction header and detail records.</li> <li><code>APCHKT</code>: Prepaid check records.</li> <li><code>APCONT</code>: Updated with next entry number.</li> <li><code>APSTAT</code>: Error status (<code>Y</code> for errors, <code>N</code> otherwise).</li> <li>Report (<code>APLIST</code>): Printed report listing transaction details, errors, warnings, and totals (invoices, prepaid amounts, vendor hash).</li> </ul>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP100%20OCL%20Voucher%20Entry/AP100%20Summary/#process-steps","title":"Process Steps","text":"<ol> <li>Initialize:</li> <li>Retrieve system date and time.</li> <li>Validate company number (<code>CONO</code>) against <code>APCONT</code>. If invalid or deleted, return error.</li> <li>Initialize accumulators for invoice counts, amounts, discounts, and prepaid totals.</li> <li> <p>Set process type (<code>PTYP</code>) to <code>NORMAL</code> if blank.</p> </li> <li> <p>Validate Header:</p> </li> <li>Ensure <code>CONO</code> exists in <code>APCONT</code>, not deleted (<code>ACDEL \u2260 'D'</code>).</li> <li>Validate <code>VEND</code> against <code>APVEND</code>, ensuring not deleted (<code>VNDEL \u2260 'D'</code>), not inactive (<code>VNDEL \u2260 'I'</code>), and name not blank.</li> <li>Verify <code>INV#</code> is non-blank and unique (check <code>APTRNX</code>, <code>APINVH</code>, <code>APOPNHC</code> for non-prepaid, non-canceled, non-wire-transfer transactions).</li> <li>Ensure <code>INDT</code> is non-zero and not older than one year (warning only).</li> <li>Ensure <code>IAMT</code> is non-zero and matches sum of detail amounts (<code>AMT</code> + <code>FRAM</code>).</li> <li>Validate <code>HOLD</code> (<code>H</code>, <code>A</code>, <code>W</code>, <code>E</code>, <code>U</code>) and <code>PAID</code> (<code>P</code>, <code>A</code>, <code>E</code>, <code>U</code>).</li> <li>If <code>PAID</code> is set, ensure <code>PPCK</code> is provided.</li> <li>Calculate <code>DUDT</code> and <code>DSDT</code> using terms (<code>VNTERM</code>) from <code>GSTABL</code> (net days, discount days).</li> <li>Validate <code>ATAPGL</code> and <code>ATBKGL</code> against <code>GLMAST</code>, ensuring not deleted or inactive.</li> <li>If <code>SORN \u2260 0</code>, prohibit <code>RCPT</code> and <code>GALN</code>.</li> <li> <p>For freight invoices (<code>FRTL \u2260 0</code>), allocate amounts to detail lines (call <code>AP1011</code>).</p> </li> <li> <p>Validate Detail Lines:</p> </li> <li>Validate <code>EXGL</code> against <code>GLMAST</code>, ensuring not deleted or inactive.</li> <li>If <code>GLPOCD = 'Y'</code>, ensure <code>PONO</code> is non-blank.</li> <li>Validate gallons/receipts:<ul> <li>If <code>VNGRRQ = 'Y'</code>, require <code>GALN</code> and <code>RCPT</code>.</li> <li>If <code>VNGRRQ = 'N'</code>, prohibit <code>GALN</code> and <code>RCPT</code>.</li> <li>If <code>GLAPCD = 'Y'</code> and <code>AMT &gt; 0</code>, require <code>GALN</code>.</li> <li>If <code>GALN &gt; 0</code>, ensure <code>GLAPCD = 'Y'</code>.</li> <li>If <code>RCPT \u2260 0</code>, validate against <code>INFIL1</code> or <code>INTZH1</code> for sufficient quantity (<code>GALN \u2264 IHNQTY + IHNQTF - IHAPTQ - IHAPTF</code>) and no prior A/P postings.</li> <li>Ensure <code>CLCD</code> is <code>'O'</code> or <code>'C'</code>.</li> </ul> </li> <li>Validate discounts:<ul> <li>Ensure <code>DISC</code> and <code>DSPC</code> are not both non-zero.</li> <li>If <code>DISC</code> or <code>DSPC</code> is non-zero, require <code>ACDSGL \u2260 0</code>.</li> <li>If <code>TBDISC = 0</code>, prohibit <code>DISC</code> and <code>DSPC</code>.</li> <li>If <code>TBDISC \u2260 0</code>, ensure <code>DSPC = TBDISC</code> or both <code>DISC</code> and <code>DSPC</code> are non-zero.</li> <li>If <code>DSDT \u2260 0</code> and <code>DSDT \u2264 system date</code>, issue warning.</li> <li>Calculate <code>DISC = AMT * (DSPC / 100)</code> if <code>DSPC \u2260 0</code>.</li> </ul> </li> <li> <p>Calculate net amount: <code>NETAMT = AMT - DISC</code>.</p> </li> <li> <p>Validate Prepaid Checks:</p> </li> <li>For <code>PAID</code> transactions, update <code>APCHKT</code> with check amount (<code>ACCKAM = AMT - DISC</code>).</li> <li>Ensure non-void checks are not already open (<code>AMCODE \u2260 'O'</code>).</li> <li> <p>Ensure void checks are open (<code>AMCODE = 'O'</code>) and match full amount (<code>L1CKAM = AMCKAM</code>).</p> </li> <li> <p>Update Files:</p> </li> <li>Write/update <code>APTRAN</code> with header and detail records.</li> <li>Update <code>APCONT</code> with next entry number (<code>ACNXTE</code>).</li> <li>Write/update <code>APCHKT</code> with prepaid check records.</li> <li> <p>Write <code>APSTAT</code> with error status (<code>Y</code> or <code>N</code>).</p> </li> <li> <p>Generate Report:</p> </li> <li>Produce <code>APLIST</code> report with:<ul> <li>Headers: Company, date, time, workstation, process type.</li> <li>Details: Entry, vendor, invoice number, description, amounts, G/L, status.</li> <li>Errors/Warnings: List entry numbers with issues (e.g., invalid vendor, duplicate invoice).</li> <li>Totals: Invoice count, amounts, discounts, prepaid totals, vendor hash.</li> </ul> </li> </ol>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP100%20OCL%20Voucher%20Entry/AP100%20Summary/#business-rules","title":"Business Rules","text":"<ol> <li>Company and Vendor:</li> <li><code>CONO</code> must exist in <code>APCONT</code>, not deleted.</li> <li> <p><code>VEND</code> must exist in <code>APVEND</code>, not deleted or inactive, with non-blank name.</p> </li> <li> <p>Invoice:</p> </li> <li><code>INV#</code> must be non-blank and unique (unless prepaid, canceled, or wire transfer).</li> <li><code>IAMT</code> must be non-zero and match detail totals.</li> <li> <p><code>INDT</code> must be non-zero; warn if older than one year.</p> </li> <li> <p>Payment Types:</p> </li> <li><code>HOLD</code>: <code>'H'</code>, <code>'A'</code>, <code>'W'</code>, <code>'E'</code>, <code>'U'</code>.</li> <li><code>PAID</code>: <code>'P'</code>, <code>'A'</code>, <code>'E'</code>, <code>'U'</code>, with <code>PPCK</code> required if set.</li> <li> <p><code>SNGL = 'S'</code> for single check processing.</p> </li> <li> <p>Gallons and Receipts:</p> </li> <li>If <code>VNGRRQ = 'Y'</code>, require <code>GALN</code> and <code>RCPT</code>.</li> <li>If <code>VNGRRQ = 'N'</code>, prohibit <code>GALN</code> and <code>RCPT</code>.</li> <li>If <code>GLAPCD = 'Y'</code> and <code>AMT &gt; 0</code>, require <code>GALN</code>.</li> <li>If <code>GALN &gt; 0</code>, require <code>GLAPCD = 'Y'</code>.</li> <li><code>RCPT</code> must exist in <code>INFIL1</code> or <code>INTZH1</code> with sufficient quantity.</li> <li> <p><code>CLCD</code> must be <code>'O'</code> or <code>'C'</code>.</p> </li> <li> <p>Purchase Orders:</p> </li> <li> <p>If <code>GLPOCD = 'Y'</code>, require <code>PONO</code>.</p> </li> <li> <p>Discounts:</p> </li> <li><code>DISC</code> and <code>DSPC</code> cannot both be non-zero.</li> <li>Require <code>ACDSGL</code> if <code>DISC</code> or <code>DSPC</code> is non-zero.</li> <li>If <code>TBDISC = 0</code>, prohibit <code>DISC</code> and <code>DSPC</code>.</li> <li>If <code>TBDISC \u2260 0</code>, ensure <code>DSPC = TBDISC</code> or both <code>DISC</code> and <code>DSPC</code> are non-zero.</li> <li> <p>Warn if <code>DSDT \u2264 system date</code>.</p> </li> <li> <p>Prepaid Checks:</p> </li> <li>Non-void checks must not be open.</li> <li>Void checks must be open and match full amount.</li> <li> <p>Update <code>ACCKAM = AMT - DISC</code>.</p> </li> <li> <p>Freight:</p> </li> <li>If <code>FRTL \u2260 0</code>, allocate amounts to detail lines via <code>AP1011</code>.</li> </ol>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP100%20OCL%20Voucher%20Entry/AP100%20Summary/#calculations","title":"Calculations","text":"<ul> <li>Due Date (<code>DUDT</code>): Calculated from <code>INDT</code> + <code>TBNETD</code> (net days from <code>GSTABL</code>), adjusted for holidays/weekends.</li> <li>Discount Due Date (<code>DSDT</code>): Calculated from <code>INDT</code> + <code>TBDISD</code> (discount days from <code>GSTABL</code>).</li> <li>Discount Amount (<code>DISC</code>): If <code>DSPC \u2260 0</code>, <code>DISC = AMT * (DSPC / 100)</code>.</li> <li>Net Amount (<code>NETAMT</code>): <code>NETAMT = AMT - DISC</code>.</li> <li>Check Amount (<code>ACCKAM</code>): <code>ACCKAM = AMT - DISC</code> for prepaid checks.</li> <li>Receipt Quantity: <code>RNQTY = IHNQTY + IHNQTF - IHAPTQ - IHAPTF</code> (from <code>INFIL1</code> or <code>INTZH1</code>).</li> <li>Totals:</li> <li><code>L1AMT = \u03a3(AMT)</code>, <code>L1PAMT = \u03a3(PRAM)</code>, <code>L1FAMT = \u03a3(FRAM)</code>, <code>L1DISC = \u03a3(DISC)</code>, <code>L1NET = L1AMT - L1DISC</code> (per entry).</li> <li><code>L2AMT</code>, <code>L2PAMT</code>, <code>L2FAMT</code>, <code>L2DISC</code>, <code>L2NET</code>, <code>L2PPD</code>, <code>L2PPA</code>, <code>L2PPW</code>, <code>L2PPE</code> accumulate <code>L1</code> totals.</li> </ul>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP100%20OCL%20Voucher%20Entry/AP100%20Summary/#external-dependencies","title":"External Dependencies","text":"<ul> <li>Program Called: <code>AP1011</code> (for freight amount allocation to detail lines when <code>FRTL \u2260 0</code>).</li> <li>Files:</li> <li>Input: <code>APCONT</code>, <code>APVEND</code>, <code>GLMAST</code>, <code>GSTABL</code>, <code>INFIL1</code>, <code>INTZH1</code>, <code>APTRNX</code>, <code>APOPNHC</code>, <code>APINVH</code>.</li> <li>Update: <code>APTRAN</code>, <code>APCHKT</code>, <code>APSTAT</code>.</li> <li>Output: <code>APLIST</code> (report).</li> </ul>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP100%20OCL%20Voucher%20Entry/AP110%20RPG/","title":"AP110 RPG","text":"<p>The <code>AP110.rpg36.txt</code> is an RPG III program for IBM midrange systems (e.g., AS/400 or iSeries), called by an OCL program (e.g., <code>AP110.ocl36.txt</code>). It performs validation and editing of Accounts Payable (A/P) voucher transactions, ensuring data integrity for headers and detail lines. The program generates a printed report (<code>APLIST</code>) listing transaction details, errors, and totals for invoice amounts, discounts, and prepaid checks. It includes modifications for ACH payments, employee expenses, utility auto-payments, FlexiCapture invoice uploads, and validations for gallons, receipts, and purchase orders. Below is a detailed explanation of the process steps, business rules, tables used, and external programs called.</p>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP100%20OCL%20Voucher%20Entry/AP110%20RPG/#process-steps-of-the-rpg-program-ap110","title":"Process Steps of the RPG Program (AP110)","text":"<p>The <code>AP110</code> program processes A/P voucher transactions from the <code>APTRAN</code> file, validates them against various files (e.g., <code>APVEND</code>, <code>GLMAST</code>, <code>APCONT</code>), and produces a detailed error report via <code>APLIST</code>. The key steps are as follows:</p> <ol> <li>Initialization (Lines 0092\u20130107):</li> <li>Executes at the total level (<code>L2</code>) to initialize variables:<ul> <li>Retrieves system date and time (<code>TIME</code>) and stores them in <code>TIMDAT</code>, <code>SYSTIM</code>, <code>SYSDAT</code>, and <code>SYSYMD</code> (year-month-day format).</li> <li>Converts system date to 8-digit format (<code>SYSDT8</code>) for comparisons.</li> <li>Sets separator (<code>SEP</code>) to <code>'* '</code> for report formatting.</li> <li>Initializes page number (<code>PAGE</code>) and accumulators (<code>L2CNT</code>, <code>L2VHSH</code>, <code>L2AMT</code>, <code>L2PAMT</code>, <code>L2FAMT</code>, <code>L2DISC</code>, <code>L2NET</code>, <code>L2PPD</code>, <code>L2PPA</code>, <code>L2PPW</code>, <code>L2PPE</code>) to zero.</li> </ul> </li> <li>Validates company number (<code>ATCONO</code>) against <code>APCONT</code>. If not found (<code>92</code>), sets error indicator.</li> <li> <p>At the detail level (<code>L1</code>):</p> <ul> <li>Initializes detail accumulators (<code>L1AMT</code>, <code>L1PAMT</code>, <code>L1FAMT</code>, <code>L1DISC</code>, <code>L1NET</code>) to zero.</li> <li>For wire transfer transactions (<code>WIREDS \u2260 *BLANKS</code>), prints a header (<code>PRTHDR</code>) for each entry.</li> </ul> </li> <li> <p>Main Processing Loop (Lines 0109\u20130125):</p> </li> <li>Processes header records (<code>01</code>, <code>L1</code>) and detail records (<code>02</code>, <code>L1</code>) from <code>APTRAN</code>:<ul> <li>For header records (<code>01</code>), executes the <code>HDR</code> subroutine.</li> <li>For detail records (<code>02</code>, non-deleted <code>N51</code>), executes the <code>DET</code> subroutine.</li> </ul> </li> <li>Accumulates totals at <code>L1</code> (if no delete, <code>N51</code>):<ul> <li>Adds detail amounts (<code>L1AMT</code>, <code>L1PAMT</code>, <code>L1FAMT</code>, <code>L1DISC</code>, <code>L1NET</code>) to <code>L2</code> totals (<code>L2AMT</code>, <code>L2PAMT</code>, <code>L2FAMT</code>, <code>L2DISC</code>, <code>L2NET</code>).</li> <li>For prepaid (<code>28</code>), ACH (<code>24</code>), wire transfer (<code>25</code>), or employee expense (<code>32</code>) payments, accumulates amounts into <code>L2PPD</code>, <code>L2PPA</code>, <code>L2PPW</code>, or <code>L2PPE</code>.</li> </ul> </li> <li> <p>Updates <code>APSTAT</code> with error status (<code>'Y'</code> if errors exist, <code>'N'</code> otherwise) using <code>STATKY</code> (company and workstation).</p> </li> <li> <p>HDR Subroutine (Lines 0127\u20130144):</p> </li> <li> <p>Validates header records:</p> <ul> <li>If the header is deleted (<code>ATHDEL = 'D'</code>), sets indicator <code>51</code> and skips to <code>ENDHDR</code>.</li> <li>Increments invoice count (<code>L2CNT</code>) and vendor hash total (<code>L2VHSH</code>).</li> <li>Validates retention percentage (<code>ATRTPC \u2260 0</code>, sets <code>26</code>), hold code (<code>ATHOLD = 'H'</code>, sets <code>77</code>), canceled voucher (<code>ATCNVO \u2260 0</code>, sets <code>27</code>), prepaid code (<code>ATPAID = 'P'</code>, sets <code>28</code>; <code>= 'A'</code>, sets <code>24</code>; <code>= 'E'</code>, sets <code>32</code>; <code>= 'U'</code>, sets <code>33</code>), single check (<code>ATSNGL = 'S'</code>, sets <code>29</code>), and sales order (<code>ATSORN \u2260 0</code>, sets <code>19</code>).</li> <li>Checks hold description (<code>ATHLDD</code>) for blanks (sets <code>77</code> if blank).</li> <li>Calls <code>HEADCK</code> subroutine for additional header validations.</li> </ul> </li> <li> <p>HEADCK Subroutine (Lines MG02):</p> </li> <li> <p>Validates company, vendor, and invoice details:</p> <ul> <li>Chains <code>ATCONO</code> to <code>APCONT</code>. If not found (<code>99</code>), sets error <code>95</code>.</li> <li>Chains vendor key (<code>ATCONO</code>, <code>ATVEND</code>) to <code>APVEND</code>. If not found (<code>99</code>), deleted (<code>VNDEL = 'D'</code>), inactive (<code>VNDEL = 'I'</code>), or vendor name blank (<code>VNVNAM = *BLANKS</code>), sets error <code>95</code>.</li> <li>Retrieves terms code (<code>VNTERM</code>) from <code>GSTABL</code>. If not found (<code>99</code>), clears term description (<code>TRMDSC</code>).</li> <li>Ensures invoice date (<code>ATINDT</code>) is non-zero. If zero, sets error <code>95</code>.</li> <li>Compares invoice date (<code>ATIND8</code>) to system date minus one year (<code>SYSDT8 - 10000</code>). If older, sets warning <code>96</code> (MG09).</li> <li>Ensures invoice amount (<code>ATIAMT</code>) is non-zero. If zero, sets error <code>95</code>.</li> <li>Ensures invoice number (<code>ATINV#</code>) is not blank. If blank, sets error <code>95</code>.</li> <li>For non-prepaid (<code>N28</code>), non-canceled (<code>N27</code>), non-wire-transfer (<code>N25</code>) transactions with non-zero vendor (<code>ATVEND \u2260 0</code>):</li> <li>Checks for duplicate invoices in <code>APTRNX</code> (<code>INVKEY = XXKEY</code>, <code>XXENT \u2260 ATENT#</code>, sets <code>95</code> if found).</li> <li>Checks <code>APINVH</code> for duplicate invoice keys (<code>INVKEY = AIKEY</code>, sets <code>95</code> if found, MGXX).</li> <li>Checks <code>APOPNHC</code> for duplicate invoice (<code>OCCONO = ATCONO</code>, <code>OCVEND = ATVEND</code>, <code>OCINVN = ATINV#</code>, sets <code>95</code> if found).</li> <li>Validates A/P G/L (<code>ATAPGL</code>) and bank G/L (<code>ATBKGL</code>) against <code>GLMAST</code>. If not found (<code>99</code>), deleted (<code>GLDEL = 'D'</code>), or inactive (<code>GLDEL = 'I'</code>), sets error <code>95</code>.</li> </ul> </li> <li> <p>DET Subroutine (Lines 0146\u20130169):</p> </li> <li> <p>Validates detail records:</p> <ul> <li>If the detail is deleted (<code>ATDDEL = 'D'</code>), sets <code>52</code> and skips to <code>ENDDTL</code>.</li> <li>Checks if gallons (<code>ATGALN \u2260 0</code>, sets <code>60</code>) or job number (<code>ATJOB# \u2260 *BLANKS</code>, sets <code>30</code>) are present.</li> <li>Validates discount:</li> <li>If discount percentage (<code>ATDSPC \u2260 0</code>), ensures discount amount (<code>ATDISC</code>) is zero (sets <code>10</code> if both non-zero).</li> <li>If <code>ATDSPC \u2260 0</code>, calculates <code>ATDISC = ATAMT * (ATDSPC / 100)</code>.</li> <li>Calculates net amount (<code>NETAMT = ATAMT - ATDISC</code>).</li> <li>Accumulates detail amounts (<code>L1AMT</code>, <code>L1PAMT</code>, <code>L1FAMT</code>, <code>L1DISC</code>, <code>L1NET</code>).</li> <li>For prepaid transactions (<code>28</code>), calls <code>PPDCHK</code> subroutine.</li> <li>Calls <code>DETLCK</code> subroutine for additional detail validations.</li> </ul> </li> <li> <p>PPDCHK Subroutine (Lines 0171\u20130183):</p> </li> <li> <p>Validates prepaid checks:</p> <ul> <li>Chains check key (<code>CKKY21</code>) to <code>APCHKT</code>. If not found (<code>N90</code>), adds <code>ATAMT</code> to <code>ACCKAM</code>. If found (<code>90</code>), sets <code>ACCKAM = ATAMT</code>.</li> <li>Subtracts discount (<code>ATDISC</code>) from <code>ACCKAM</code>.</li> <li>Writes or updates <code>APCHKT</code> with the prepaid check record (<code>PPDREC</code>).</li> <li>Writes the prepaid check detail to <code>APLIST</code>.</li> </ul> </li> <li> <p>DETLCK Subroutine (Lines MG02\u2013MGXX):</p> </li> <li> <p>Validates detail line fields:</p> <ul> <li>Validates gallons/receipt requirements based on vendor (<code>VNGRRQ</code>) and G/L (<code>GLAPCD</code>):</li> <li>If <code>VNGRRQ = 'Y'</code>, requires <code>ATGALN</code> and <code>ATRCPT</code> (sets <code>95</code> if either is zero).</li> <li>If <code>VNGRRQ = 'N'</code>, prohibits <code>ATGALN</code> and <code>ATRCPT</code> (sets <code>95</code> if either is non-zero).</li> <li>If <code>GLAPCD = 'Y'</code> and <code>ATAMT &gt; 0</code>, requires <code>ATGALN</code> (sets <code>95</code> if zero).</li> <li>If <code>ATGALN &gt; 0</code>, requires <code>GLAPCD = 'Y'</code> (sets <code>95</code> if not).</li> <li>If G/L requires a purchase order (<code>GLPOCD = 'Y'</code>, MG08), ensures <code>ATPONO</code> is not blank (sets <code>95</code> if blank).</li> <li>Validates receipt number (<code>ATRCPT \u2260 0</code>):</li> <li>Chains <code>RCTKEY</code> to <code>INFIL1</code> or <code>INTZH1</code>. If not found (<code>47</code> and <code>77</code>), sets error <code>95</code>.</li> <li>Accumulates net quantity (<code>RNQTY = IHNQTY + IHNQTF - IHAPTQ - IHAPTF</code>) and A/P quantity (<code>APQTY = IHAPTQ + IHAPTF</code>).</li> <li>If <code>ATGALN &gt; RNQTY</code>, sets error <code>95</code> and <code>46</code>.</li> <li>Ensures receipt code (<code>ATCLCD</code>) is <code>'O'</code> or <code>'C'</code> (sets <code>95</code> if not).</li> <li>Validates discount:</li> <li>If <code>ATDISC \u2260 0</code> or <code>ATDSPC \u2260 0</code>, requires a discount G/L (<code>ACDSGL \u2260 0</code>, sets <code>95</code> if not).</li> <li>If <code>ATDSD8 \u2260 0</code> and <code>ATDSD8 \u2264 SYSDT8</code>, sets warning <code>96</code> (MGXX).</li> <li>If terms have no discount (<code>TBDISC = 0</code>), prohibits <code>ATDSPC</code> or <code>ATDISC</code> (sets <code>95</code> if non-zero).</li> <li>If terms have a discount (<code>TBDISC \u2260 0</code>), ensures <code>ATDSPC = TBDISC</code> (sets <code>95</code> if not) or requires <code>ATDISC</code> and <code>ATDSPC</code> to be non-zero (sets <code>95</code> if both zero).</li> <li>Validates expense G/L (<code>ATEXGL</code>) against <code>GLMAST</code>. If not found (<code>99</code>), deleted (<code>GLDEL = 'D'</code>), or inactive (<code>GLDEL = 'I'</code>), sets error <code>95</code>.</li> </ul> </li> <li> <p>Output to APLIST (Lines 0195\u20130340):</p> </li> <li> <p>Generates a formatted report:</p> <ul> <li>Header (L2): Prints company name (<code>ACNAME</code>), page number, date (<code>SYSDAT</code>), time (<code>SYSTIM</code>), and static text (\"ACCOUNTS PAYABLE VOUCHER EDIT\").</li> <li>Detail (01, N51): Prints header details (<code>ATENT#</code>, <code>ATVEND</code>, <code>ATVNAM</code>, <code>ATINV#</code>, <code>ATINDT</code>, <code>TRMDSC</code>, <code>ATAPGL</code>, <code>ATDUDT</code>, <code>ATDSDT</code>, <code>ATBKGL</code>, <code>ATSNGL</code>, <code>ATRTGL</code>, <code>ATRTPC</code>, <code>ATCNVO</code>, <code>ATHOLD</code>, <code>ATHLDD</code>, <code>ATSORN</code>, <code>ATSSRN</code>, <code>ATCAID</code>, <code>ATPTYP</code>).</li> <li>Detail (02, N51, N52): Prints detail line details (<code>ATPONO</code>, <code>ATDDES</code>, <code>ATPRAM</code>, <code>ATFRAM</code>, <code>ATAMT</code>, <code>ATDISC</code>, <code>NETAMT</code>, <code>ATEXGL</code>, <code>ATEXCO</code>, <code>ATGALN</code>, <code>ATRCPT</code>, <code>ATCLCD</code>, <code>ATJOB#</code>, <code>ATCCOD</code>, <code>ATCTYP</code>, <code>ATJQTY</code>).</li> <li>Errors/Warnings: Prints error (<code>95</code>) or warning (<code>96</code>) messages with entry number (<code>ATENT#</code>).</li> <li>Totals (L1, N51): Prints entry totals (<code>L1PAMT</code>, <code>L1FAMT</code>, <code>L1AMT</code>, <code>L1DISC</code>, <code>L1NET</code>) and prepaid details (<code>ATPPCK</code>, <code>ATPCKD</code>).</li> <li>Totals (L2): Prints invoice totals (<code>L2PAMT</code>, <code>L2FAMT</code>, <code>L2AMT</code>, <code>L2DISC</code>, <code>L2NET</code>), prepaid totals (<code>L2PPD</code>, <code>L2PPA</code>, <code>L2PPW</code>, <code>L2PPE</code>), invoice count (<code>L2CNT</code>), and vendor hash total (<code>L2VHSH</code>).</li> </ul> </li> <li> <p>File Updates:</p> </li> <li>Writes or updates <code>APCHKT</code> with prepaid check records (<code>PPDREC</code>).</li> <li> <p>Writes or updates <code>APSTAT</code> with error status (<code>STATAD</code>, <code>STATUP</code>).</p> </li> <li> <p>Termination:</p> <ul> <li>Processes all records in <code>APTRAN</code>, generates the report, and terminates when no more records are found.</li> </ul> </li> </ol>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP100%20OCL%20Voucher%20Entry/AP110%20RPG/#business-rules","title":"Business Rules","text":"<ol> <li>Header Validation:</li> <li>Company number (<code>ATCONO</code>) must exist in <code>APCONT</code> and not be deleted (<code>ACDEL \u2260 'D'</code>).</li> <li>Vendor number (<code>ATVEND</code>) must exist in <code>APVEND</code>, not be deleted (<code>VNDEL \u2260 'D'</code>), not inactive (<code>VNDEL \u2260 'I'</code>), and have a non-blank name (<code>VNVNAM \u2260 *BLANKS</code>).</li> <li>Invoice date (<code>ATINDT</code>) must be non-zero and not older than one year prior to the system date (warning only, MG09).</li> <li>Invoice amount (<code>ATIAMT</code>) must be non-zero.</li> <li>Invoice number (<code>ATINV#</code>) must be non-blank and unique (checked against <code>APTRNX</code>, <code>APINVH</code>, <code>APOPNHC</code> for non-prepaid, non-canceled, non-wire-transfer transactions).</li> <li>A/P G/L (<code>ATAPGL</code>) and bank G/L (<code>ATBKGL</code>) must exist in <code>GLMAST</code>, not be deleted (<code>GLDEL \u2260 'D'</code>), and not inactive (<code>GLDEL \u2260 'I'</code>).</li> <li>Hold codes (<code>ATHOLD</code>) must be <code>'H'</code> (hold), <code>'A'</code> (ACH), <code>'W'</code> (wire transfer), <code>'E'</code> (employee expense), or <code>'U'</code> (utility auto-payment).</li> <li>Prepaid codes (<code>ATPAID</code>) must be <code>'P'</code> (prepaid), <code>'A'</code> (ACH), <code>'E'</code> (employee expense), or <code>'U'</code> (utility auto-payment).</li> <li>Single check (<code>ATSNGL = 'S'</code>) and retention percentage (<code>ATRTPC \u2260 0</code>) are flagged if present.</li> <li> <p>Canceled voucher (<code>ATCNVO \u2260 0</code>) is flagged if present.</p> </li> <li> <p>Detail Validation:</p> </li> <li>Expense G/L (<code>ATEXGL</code>) must exist in <code>GLMAST</code>, not be deleted (<code>GLDEL \u2260 'D'</code>), and not inactive (<code>GLDEL \u2260 'I'</code>).</li> <li>If G/L requires a purchase order (<code>GLPOCD = 'Y'</code>), <code>ATPONO</code> must be non-blank.</li> <li>Gallons and receipt validation:<ul> <li>If vendor requires gallons/receipts (<code>VNGRRQ = 'Y'</code>), <code>ATGALN</code> and <code>ATRCPT</code> must be non-zero.</li> <li>If vendor does not require gallons/receipts (<code>VNGRRQ = 'N'</code>), <code>ATGALN</code> and <code>ATRCPT</code> must be zero.</li> <li>If G/L requires gallons (<code>GLAPCD = 'Y'</code>), <code>ATGALN</code> must be non-zero for positive amounts (<code>ATAMT &gt; 0</code>).</li> <li>If <code>ATGALN &gt; 0</code>, G/L must require gallons (<code>GLAPCD = 'Y'</code>).</li> <li>Receipt number (<code>ATRCPT</code>) must exist in <code>INFIL1</code> or <code>INTZH1</code>, with sufficient quantity (<code>ATGALN \u2264 RNQTY</code>) and no prior A/P postings (removed in MG04).</li> <li>Receipt code (<code>ATCLCD</code>) must be <code>'O'</code> (open) or <code>'C'</code> (closed).</li> </ul> </li> <li> <p>Discount validation:</p> <ul> <li>Discount amount (<code>ATDISC</code>) and percentage (<code>ATDSPC</code>) cannot both be non-zero.</li> <li>If <code>ATDISC</code> or <code>ATDSPC</code> is non-zero, a discount G/L (<code>ACDSGL</code>) must exist.</li> <li>If terms have no discount (<code>TBDISC = 0</code>), <code>ATDISC</code> and <code>ATDSPC</code> must be zero.</li> <li>If terms have a discount (<code>TBDISC \u2260 0</code>), <code>ATDSPC</code> must match <code>TBDISC</code>, or both <code>ATDISC</code> and <code>ATDSPC</code> must be non-zero.</li> <li>If discount due date (<code>ATDSD8</code>) is non-zero and not later than the system date (<code>SYSDT8</code>), a warning (<code>96</code>) is issued.</li> </ul> </li> <li> <p>Prepaid Check Validation:</p> </li> <li>Prepaid check amounts (<code>ACCKAM</code>) are updated in <code>APCHKT</code> by adding or setting <code>ATAMT - ATDISC</code>.</li> <li> <p>Prepaid check details are written to the report.</p> </li> <li> <p>Error and Warning Handling:</p> </li> <li>Errors (<code>95</code>) are flagged for critical validation failures (e.g., invalid company, vendor, G/L, duplicate invoice).</li> <li>Warnings (<code>96</code>) are flagged for non-critical issues (e.g., invoice date older than one year, discount date expired).</li> <li> <p>Errors are written to <code>APSTAT</code> (<code>AXERR = 'Y'</code>) and reported in <code>APLIST</code>.</p> </li> <li> <p>Reporting:</p> </li> <li>The report includes headers, detail lines, entry totals, and grand totals for invoices, prepaid amounts, and vendor hash.</li> <li>Errors and warnings are listed with entry numbers for correction.</li> </ol>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP100%20OCL%20Voucher%20Entry/AP110%20RPG/#tables-files-used","title":"Tables (Files) Used","text":"<p>The program uses the following files, defined with specific attributes:</p> <ol> <li>APTRAN:</li> <li>Primary input file (<code>IP</code>), 404 bytes, key length 10, contains voucher header and detail records.</li> <li> <p>Fields: <code>ATHDEL</code>, <code>ATCONO</code>, <code>ATENT#</code>, <code>ATVEND</code>, <code>ATCNVO</code>, <code>ATAPGL</code>, <code>ATIDES</code>, <code>ATINDT</code>, <code>ATDUDT</code>, <code>ATSNGL</code>, <code>ATHOLD</code>, <code>ATHLDD</code>, <code>ATPAID</code>, <code>ATPPCK</code>, <code>ATVNAM</code>, <code>ATVAD1\u20134</code>, <code>ATBKGL</code>, <code>ATIAMT</code>, <code>ATRTGL</code>, <code>ATRTPC</code>, <code>ATPCKD</code>, <code>ATIND8</code>, <code>ATDUD8</code>, <code>ATPCK8</code>, <code>ATFRTL</code>, <code>ATPIVN</code>, <code>ATPIIN</code>, <code>ATSORN</code>, <code>ATSSRN</code>, <code>ATCAID</code>, <code>ATPTYP</code>, <code>ATDSDT</code>, <code>ATDSD8</code>, <code>ATINV#</code>, <code>ATDDEL</code>, <code>ATENSQ</code>, <code>ATCORD</code>, <code>ATEXCO</code>, <code>ATEXGL</code>, <code>ATDDES</code>, <code>ATAMT</code>, <code>ATDISC</code>, <code>ATDSPC</code>, <code>ATITEM</code>, <code>ATQTY</code>, <code>ATUNMS</code>, <code>ATJOB#</code>, <code>ATCCOD</code>, <code>ATCTYP</code>, <code>ATJQTY</code>, <code>ATGALN</code>, <code>ATRCPT</code>, <code>ATCLCD</code>, <code>ATPRAM</code>, <code>ATFRAM</code>, <code>ATPONO</code>.</p> </li> <li> <p>APTRNX:</p> </li> <li>Input file (<code>IF</code>), 404 bytes, key length 27, external key, used for duplicate invoice checking.</li> <li> <p>Fields: <code>XXCO</code>, <code>XXENT</code>, <code>XXVEND</code>, <code>XXINV</code>.</p> </li> <li> <p>APOPNHC:</p> </li> <li>Input file (<code>IF</code>), 384 bytes, key length 32, used for duplicate invoice checking.</li> <li> <p>Fields: <code>OCDEL</code>, <code>OCCONO</code>, <code>OCVEND</code>, <code>OCVONO</code>, <code>OCINDS</code>, <code>OCINVN</code>.</p> </li> <li> <p>APVEND:</p> </li> <li>Input file (<code>IF</code>), 579 bytes, key length 7, used for vendor validation.</li> <li> <p>Fields: <code>VNDEL</code>, <code>VNVNAM</code>, <code>VNAD1\u20134</code>, <code>VNGRRQ</code>, <code>VNHOLD</code>, <code>VNSNGL</code>, <code>VNEXGL</code>, <code>VNTERM</code>, <code>VNCAID</code>, <code>VNPRID</code>, <code>VNACLS</code>, <code>VNACOS</code>, <code>VNARTE</code>, <code>VNABK#</code>.</p> </li> <li> <p>APCONT:</p> </li> <li>Input file (<code>IF</code>), 256 bytes, key length 2, used for company validation.</li> <li> <p>Fields: <code>ACDEL</code>, <code>ACNAME</code>, <code>ACAPGL</code>, <code>ACCAGL</code>, <code>ACDSGL</code>, <code>ACNXTE</code>, <code>ACJCYN</code>, <code>ACRTGL</code>, <code>ACPOYN</code>, <code>ACEEGL</code>.</p> </li> <li> <p>APCHKT:</p> </li> <li>Update file (<code>UF</code>), 80 bytes, key length 21, used for prepaid check validation.</li> <li> <p>Fields: <code>ACCKAM</code>, <code>ATPCKD</code>, <code>ATPCK8</code>, <code>ATHOLD</code>.</p> </li> <li> <p>GLMAST:</p> </li> <li>Input file (<code>IF</code>), 256 bytes, key length 11, used for G/L validation.</li> <li> <p>Fields: <code>GLDEL</code>, <code>GLDESC</code>, <code>GLAPCD</code>, <code>GLPOCD</code>.</p> </li> <li> <p>APINVH:</p> </li> <li>Input file (<code>IF</code>), 64 bytes, key length 32, used for duplicate invoice checking.</li> <li> <p>Fields: <code>AIKEY</code>, <code>AIVONO</code>.</p> </li> <li> <p>APSTAT:</p> </li> <li>Update file (<code>UF</code>), 14 bytes, key length 12, used to store error status.</li> <li> <p>Fields: <code>AXCODE</code>, <code>AXCONO</code>, <code>AXWSTN</code>, <code>AXERR</code>.</p> </li> <li> <p>GSTABL:</p> <ul> <li>Input file (<code>IF</code>), 256 bytes, key length 12, used for terms validation.</li> <li>Fields: <code>TBDEL</code>, <code>TBDESC</code>, <code>TBNETD</code>, <code>TBPRXD</code>, <code>TBDISC</code>, <code>TBADON</code>, <code>TBDISD</code>.</li> </ul> </li> <li> <p>INFIL1:</p> <ul> <li>Input file (<code>IF</code>), 448 bytes, key length 9, external key, used for receipt validation.</li> <li>Fields: <code>IHNQTY</code>, <code>IHNQTF</code>, <code>IHUNMS</code>, <code>IHAPLP</code>, <code>IHAPTQ</code>, <code>IHAPTF</code>, <code>IHAPTD</code>.</li> </ul> </li> <li> <p>INTZH1:</p> <ul> <li>Input file (<code>IF</code>), 592 bytes, key length 9, external key, used for receipt validation.</li> <li>Fields: <code>IHNQTY</code>, <code>IHNQTF</code>, <code>IHUNMS</code>, <code>IHAPLP</code>, <code>IHAPTQ</code>, <code>IHAPTF</code>, <code>IHAPTD</code>.</li> </ul> </li> <li> <p>APLIST:</p> <ul> <li>Output printer file (<code>O</code>), 164 bytes, used to generate the voucher edit report.</li> <li>Contains headers, detail lines, error/warning messages, and totals.</li> </ul> </li> </ol>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP100%20OCL%20Voucher%20Entry/AP110%20RPG/#external-programs-called","title":"External Programs Called","text":"<ul> <li>None: The <code>AP110</code> program does not call any external programs. It operates independently, processing input files, performing validations, and generating the report.</li> </ul>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP100%20OCL%20Voucher%20Entry/AP110%20RPG/#summary","title":"Summary","text":"<p>The <code>AP110</code> RPG program validates A/P voucher transactions by processing header and detail records from <code>APTRAN</code>. It enforces strict business rules, including company, vendor, G/L, invoice, gallons/receipt, purchase order, and discount validations. Errors (<code>95</code>) and warnings (<code>96</code>) are flagged and reported in <code>APLIST</code>, with error status updated in <code>APSTAT</code>. The program supports ACH, wire transfer, employee expense, and utility auto-payment transactions, and includes enhancements for FlexiCapture invoice uploads. It accumulates totals for invoices, prepaid amounts, and vendor hash, producing a comprehensive report for correction. No external programs are called, making it a self-contained validation routine.</p>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP100%20OCL%20Voucher%20Entry/AP115%20RPG/","title":"AP115 RPG","text":"<p>The <code>AP115.rpg36.txt</code> is an RPG III program designed for the IBM midrange systems (e.g., AS/400 or iSeries), called by an OCL program (e.g., <code>AP115.ocl36.txt</code>). It performs validation and editing of prepaid checks, ensuring that checks are valid, not already open (unless being voided), and that voided checks match the full check amount. The program generates a printed report (<code>APLIST</code>) listing any errors or discrepancies found during the validation process. Below is a detailed explanation of the process steps, business rules, tables used, and external programs called.</p>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP100%20OCL%20Voucher%20Entry/AP115%20RPG/#process-steps-of-the-rpg-program-ap115","title":"Process Steps of the RPG Program (AP115)","text":"<p>The <code>AP115</code> program processes prepaid check transactions by reading records from the <code>APCHKT</code> and <code>APCHKTX</code> files, validating them against <code>APCHKR</code>, and reporting errors via the <code>APLIST</code> printer file. The key steps are as follows:</p> <ol> <li>Initialization (Lines 0042\u20130054):</li> <li>Executes at the detail level (<code>L2</code>) to initialize variables:<ul> <li>Retrieves the current system date and time (<code>TIME</code> instruction) and stores them in <code>TIMDAT</code>, <code>TIME</code>, and <code>DATE</code>.</li> <li>Sets a separator (<code>SEP</code>) to <code>'* '</code> for formatting the printed report.</li> <li>Initializes the page number (<code>PAGE</code>) to 0.</li> </ul> </li> <li>Validates the company number (<code>ATCONO</code>) against the <code>APCONT</code> file:<ul> <li>If found (<code>N98</code>), moves the company name (<code>ACNAME</code>) to <code>CONAME</code>.</li> <li>If not found (<code>98</code>), sets <code>CONAME</code> to blanks.</li> </ul> </li> <li> <p>At the detail level (<code>L1</code>):</p> <ul> <li>Initializes check amount accumulator (<code>L1CKAM</code>) and void amount (<code>L1VOID</code>) to 0.</li> <li>Clears indicators <code>10</code>, <code>11</code>, <code>12</code> (used for check status), and <code>81</code>, <code>91</code> (used for printing and error handling).</li> </ul> </li> <li> <p>Main Processing (Lines 0055\u20130058):</p> </li> <li>Accumulates the check amount (<code>ATCKAM</code>) into <code>L1CKAM</code> at the detail level (<code>L1</code>), setting indicators <code>10</code> (non-void check) or <code>11</code> (void check) based on the transaction type.</li> <li> <p>Calls the <code>L1TOT</code> subroutine to validate each check record.</p> </li> <li> <p>L1TOT Subroutine (Lines 0061\u20130081):</p> </li> <li>Validates the check record by chaining the check key (<code>ATCKEY</code>) to the <code>APCHKR</code> file:<ul> <li>For non-void checks (<code>10</code> indicator on):</li> <li>If the check exists in <code>APCHKR</code> and is open (<code>AMCODE = 'O'</code>), sets indicator <code>91</code> and calls <code>L1PRT</code> to report an error (\"CHECK IS ALREADY OPEN\").</li> <li>If the check does not exist (<code>91</code> on), proceeds without error.</li> <li>For void checks (<code>11</code> indicator on):</li> <li>If the check does not exist in <code>APCHKR</code> or is not open (<code>AMCODE \u2260 'O'</code>), sets indicator <code>91</code> and calls <code>L1PRT</code> to report an error (\"CHECK MUST BE OPEN TO BE VOIDED\").</li> <li>Calculates the void amount (<code>L1VOID = -L1CKAM</code>) and compares it to the actual check amount (<code>AMCKAM</code>). If they do not match, sets indicator <code>12</code> and calls <code>L1PRT</code> to report an error (\"WHOLE CHECK AMOUNT MUST BE VOIDED\").</li> </ul> </li> <li> <p>Ends the subroutine (<code>ENDL1T</code>).</p> </li> <li> <p>L1PRT Subroutine (Lines 0083\u20130099):</p> </li> <li> <p>Prints error records to the <code>APLIST</code> printer file:</p> <ul> <li>Sets the lower limit (<code>SETLL</code>) for <code>APCHKTX</code> using the check key (<code>ATKY21</code>).</li> <li>Reads <code>APCHKTX</code> records in a loop (<code>AGNL1P</code> tag) until end-of-file (<code>09</code> indicator) or a key mismatch (<code>AXCKEY \u2260 ATCKEY</code>).</li> <li>For each matching record:</li> <li>Sets indicators <code>80</code> (print detail) and <code>81</code> (control printing).</li> <li>Writes the record to <code>APLIST</code> using the <code>EXCPT</code> operation.</li> <li>Resets indicator <code>80</code> after printing.</li> <li>Continues reading until all matching records are processed (<code>ENDL1P</code>).</li> </ul> </li> <li> <p>Output to APLIST (Lines 0102\u20130148):</p> </li> <li> <p>Generates a formatted report with headers and detail lines:</p> <ul> <li>Header (L2):</li> <li>Prints company name (<code>CONAME</code>), page number (<code>PAGE</code>), date (<code>DATE</code>), workstation ID (<code>WSID</code>), wire transfer description (<code>WIREDS</code>), and time (<code>TIME</code>).</li> <li>Includes static text like \"PREPAID CHECK EDIT\" and column headers (\"CO #\", \"PPD CHECK\", \"BANK G/L\", \"ENT#\", \"CHK AMOUNT\", \"ACTUAL CHECK AMOUNT\").</li> <li>Detail Lines (80):</li> <li>Prints company number (<code>AXCONO</code>), prepaid check number (<code>AXPPCK</code>), bank G/L account (<code>AXBKGL</code>), entry number (<code>AXENT#</code>), check amount (<code>AXCKAM</code>), and check date (<code>AXCKDT</code>).</li> <li>Total Lines (81):</li> <li>Prints total check amount (<code>L1CKAM</code>) and actual check amount (<code>AMCKAM</code>).</li> <li>Includes error messages based on indicators:<ul> <li><code>10N91</code>: \"CHECK IS ALREADY OPEN\".</li> <li><code>11 91</code>: \"CHECK MUST BE OPEN TO BE VOIDED\".</li> <li><code>12 11N91</code>: \"WHOLE CHECK AMOUNT MUST BE VOIDED\".</li> </ul> </li> <li>Uses separator (<code>SEP</code>) for formatting between sections.</li> </ul> </li> <li> <p>Termination:</p> </li> <li>The program processes all records in <code>APCHKT</code> and <code>APCHKTX</code>, generating the report and terminating when no more records are found.</li> </ol>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP100%20OCL%20Voucher%20Entry/AP115%20RPG/#business-rules","title":"Business Rules","text":"<ol> <li>Check Validation:</li> <li>Non-void checks (<code>AMCODE \u2260 'V'</code>) must not already exist in <code>APCHKR</code> as open (<code>AMCODE = 'O'</code>). If they are open, an error is reported.</li> <li>Void checks (<code>AMCODE = 'V'</code>) must exist in <code>APCHKR</code> and be open (<code>AMCODE = 'O'</code>). If not, an error is reported.</li> <li> <p>For void checks, the entire check amount (<code>L1CKAM</code>) must match the actual check amount (<code>AMCKAM</code>) in <code>APCHKR</code>. If not, an error is reported.</p> </li> <li> <p>Error Reporting:</p> </li> <li>Errors are printed to the <code>APLIST</code> report for each invalid check, including company number, check number, bank G/L, entry number, check amount, and error message.</li> <li> <p>The report includes totals for check amounts and highlights discrepancies.</p> </li> <li> <p>Company Validation:</p> </li> <li> <p>The company number (<code>ATCONO</code>) must exist in <code>APCONT</code>. If not, the company name is blanked out.</p> </li> <li> <p>Formatting and Output:</p> </li> <li>The report includes headers with company, date, time, and workstation details, followed by detail lines for each check and totals for check amounts.</li> <li>Errors are clearly marked with descriptive messages to guide correction.</li> </ol>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP100%20OCL%20Voucher%20Entry/AP115%20RPG/#tables-files-used","title":"Tables (Files) Used","text":"<p>The program uses the following files, defined with specific attributes:</p> <ol> <li>APCHKT:</li> <li>Primary input file (<code>IP</code>), 80 bytes, key length 21, used to read prepaid check transactions.</li> <li> <p>Fields: <code>ATCONO</code> (company), <code>ATBKGL</code> (bank G/L), <code>ATPPCK</code> (prepaid check number), <code>ATCKAM</code> (check amount), <code>ATCKDT</code> (check date).</p> </li> <li> <p>APCHKTX:</p> </li> <li>Indexed input file (<code>ID</code>), 80 bytes, key length 21, used to retrieve additional check details.</li> <li> <p>Fields: <code>AXCONO</code> (company), <code>AXBKGL</code> (bank G/L), <code>AXPPCK</code> (prepaid check number), <code>AXENT#</code> (entry number), <code>AXCKAM</code> (check amount), <code>AXCKDT</code> (check date).</p> </li> <li> <p>APCHKR:</p> </li> <li>Input file (<code>IC</code>), 128 bytes, key length 16, used to validate check status.</li> <li> <p>Fields: <code>AMCODE</code> (check status: 'D', 'O', 'R', 'V'), <code>AMCKAM</code> (check amount).</p> </li> <li> <p>APCONT:</p> </li> <li>Input file (<code>IC</code>), 256 bytes, key length 2, used to validate company number and retrieve company name.</li> <li> <p>Fields: <code>ACNAME</code> (company name).</p> </li> <li> <p>APLIST:</p> </li> <li>Output printer file (<code>O</code>), 132 bytes, used to generate the prepaid check edit report.</li> <li>Contains headers, detail lines, totals, and error messages.</li> </ol>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP100%20OCL%20Voucher%20Entry/AP115%20RPG/#external-programs-called","title":"External Programs Called","text":"<ul> <li>None: The <code>AP115</code> program does not call any external programs. It operates independently, processing input files and generating the report.</li> </ul>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP100%20OCL%20Voucher%20Entry/AP115%20RPG/#summary","title":"Summary","text":"<p>The <code>AP115</code> RPG program validates prepaid checks by checking their status in <code>APCHKR</code> and ensuring compliance with business rules (e.g., non-void checks must not be open, void checks must be open and fully voided). It processes records from <code>APCHKT</code> and <code>APCHKTX</code>, validates against <code>APCONT</code> and <code>APCHKR</code>, and produces a detailed error report via <code>APLIST</code>. The program enforces data integrity for check processing, ensuring that only valid checks are processed and errors are clearly reported for correction. No external programs are called, making it a self-contained validation routine.</p>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP100%20OCL%20Voucher%20Entry/AP106%20Flexi%20Capture/AP106%20OCL/","title":"AP106 OCL","text":""},{"location":"accounts-payable/01%20Voucher%20Entry/AP100%20OCL%20Voucher%20Entry/AP106%20Flexi%20Capture/AP106%20OCL/#ap106-ocl-program","title":"AP106 OCL Program","text":"<p>This is an Operation Control Language (OCL) file (AP106.ocl36.txt) used on the IBM i (AS/400) system to handle Accounts Payable (A/P) voucher entry uploads for FlexiCapture import files. Below is a detailed explanation of the process steps, external programs called, and tables/files used in this program, based on the provided OCL code.</p>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP100%20OCL%20Voucher%20Entry/AP106%20Flexi%20Capture/AP106%20OCL/#overview","title":"Overview","text":"<p>The OCL file automates the process of uploading A/P voucher entries from a FlexiCapture import file into the IBM i system. It ensures that the upload process is synchronized with other system operations (e.g., Profound Genie) by introducing pauses and checks. The program processes the uploaded data, saves it to a history table, and prepares it for further processing by other programs (e.g., AP107, AP110). It also interacts with PC-based batch files for file uploads and manages various database files on the IBM i system.</p>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP100%20OCL%20Voucher%20Entry/AP106%20Flexi%20Capture/AP106%20OCL/#process-steps","title":"Process Steps","text":"<ol> <li>Initial Checks for A/P Voucher Entry File (APTR?WS?)</li> <li>The program checks if there are records in the A/P voucher entry file (<code>?9?APTR?WS?</code>) using conditional statements (<code>IFF</code>).</li> <li>If records exist, it displays messages indicating:<ul> <li>\"There are records in the A/P voucher entry file.\"</li> <li>\"You must post the batch before you can run the import from FlexiCapture on this workstation.\"</li> </ul> </li> <li> <p>A <code>PAUSE</code> is introduced to ensure the FlexiCapture upload process completes before further processing (to address synchronization issues with Profound Genie).</p> </li> <li> <p>Clear and Rebuild A/P Voucher Entry Files</p> </li> <li>If the A/P voucher entry file exists (<code>DATAF1-?9?APTR?WS?</code>), the program:<ul> <li>Clears the file using <code>CLRPFM ?9?APTR?WS?</code>.</li> <li>Rebuilds the file with <code>BLDFILE ?9?APTR?WS?,I,RECORDS,500,404,,,2,10</code>, specifying 500 records, a record length of 404 bytes, and other parameters.</li> </ul> </li> <li> <p>If the index file exists (<code>DATAF1-?9?APTX?WS?</code>), it builds an index using <code>BLDINDEX ?9?APTX?WS?,2,2,?9?APTR?WS?,+,,,12,5,385,20</code>.</p> </li> <li> <p>Set Program Variable</p> </li> <li> <p>The variable <code>P20</code> is set to <code>'APTR?WS?'</code> to reference the A/P voucher entry file.</p> </li> <li> <p>Start PC Organizer and Run FlexiCapture Upload</p> </li> <li>The program calls <code>STRPCOCLP</code> to start the PC Organizer, which prepares the system for PC-based commands.</li> <li>It executes a PC batch file (<code>STRPCCMD</code>) located at <code>C:\\Program Files (x86)\\FLEXICAPTURE_UPLOAD\\APINVUPD.BAT</code> to upload the journal entry file. This batch file is executed regardless of the <code>?9?/G</code> condition (same command in both <code>IF</code> and <code>ELSE</code> branches).</li> <li> <p>A <code>PAUSE</code> is displayed with the message \"TYPE 0, ENTER TO CONTINUE AFTER UPLOAD PROCESS IS COMPLETE,\" ensuring the user waits for the upload to finish.</p> </li> <li> <p>Run AP107 Program</p> </li> <li>The program loads <code>AP107</code> and opens two files:<ul> <li><code>APINVUP</code> (the uploaded journal entry file).</li> <li><code>APFLEXH</code> (the history table for FlexiCapture uploads).</li> </ul> </li> <li> <p>The <code>AP107</code> program processes the uploaded data and saves it to the history table (<code>APFLEXH</code>).</p> </li> <li> <p>Run AP106 Program</p> </li> <li>The program loads itself (<code>AP106</code>) and opens several files:<ul> <li><code>APINVUP</code> (the uploaded journal entry file).</li> <li><code>APTRAN</code> (A/P transaction file, labeled <code>?9?APTR?WS?</code>).</li> <li><code>APCONT</code> (A/P control file).</li> <li><code>APVEND</code> (A/P vendor file).</li> <li><code>GSTABL</code> (general system table).</li> <li><code>APDATE</code> (A/P date file).</li> </ul> </li> <li> <p>The <code>AP106</code> program processes the uploaded data into the A/P transaction file and validates it against control, vendor, and other reference files.</p> </li> <li> <p>Clear and Rebuild A/P Check Temporary File</p> </li> <li>The program deletes the A/P check temporary file (<code>APCT?WS?</code>) using <code>GSDELETE APCT?WS?,,,,,,,,?9?</code>.</li> <li> <p>It rebuilds the file with <code>BLDFILE ?9?APCT?WS?,I,RECORDS,500,80,,,2,21</code>, specifying 500 records and a record length of 80 bytes.</p> </li> <li> <p>Run AP110 Program</p> </li> <li>The program loads <code>AP110</code> and opens multiple files:<ul> <li><code>APTRAN</code> (A/P transaction file).</li> <li><code>APCONT</code> (A/P control file).</li> <li><code>APCHKR</code> (A/P check register file).</li> <li><code>APCHKT</code> (A/P check temporary file, labeled <code>?9?APCT?WS?</code>).</li> <li><code>APTRNX</code> (A/P transaction index file, labeled <code>?9?APTX?WS?</code>).</li> <li><code>GLMAST</code> (general ledger master file).</li> <li><code>APOPNHC</code> (A/P open history control file).</li> <li><code>GSTABL</code> (general system table).</li> <li><code>APINVH</code> (A/P invoice history file).</li> <li><code>APSTAT</code> (A/P status file).</li> <li><code>APVEND</code> (A/P vendor file).</li> <li><code>INFIL1</code> (information file 1).</li> <li><code>INTZH1</code> (internal history file 1).</li> </ul> </li> <li>It overrides the printer file <code>APLIST</code> to output to either <code>QUSRSYS/APEDIT</code> or <code>QUSRSYS/TESTOUTQ</code> based on the <code>?9?/G</code> condition.</li> <li> <p>The <code>AP110</code> program processes the A/P transactions, generates checks, and updates related files (e.g., general ledger, invoice history).</p> </li> <li> <p>Clear Uploaded File</p> </li> <li> <p>The program clears the <code>APINVUP</code> file using <code>CLRPFM ?9?APINVUP</code> to prepare for the next upload.</p> </li> <li> <p>End of Program</p> <ul> <li>The program jumps to the <code>END</code> tag, clears local variables (<code>LOCAL BLANK-*ALL</code>), and terminates.</li> </ul> </li> </ol>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP100%20OCL%20Voucher%20Entry/AP106%20Flexi%20Capture/AP106%20OCL/#external-programs-called","title":"External Programs Called","text":"<ol> <li>STRPCOCLP</li> <li> <p>This program starts the PC Organizer, enabling the execution of PC-based commands (e.g., batch files) from the IBM i system.</p> </li> <li> <p>AP107</p> </li> <li> <p>Processes the uploaded journal entry file (<code>APINVUP</code>) and saves it to the FlexiCapture history table (<code>APFLEXH</code>).</p> </li> <li> <p>AP106</p> </li> <li> <p>The OCL file itself is loaded as a program to process the uploaded data into the A/P transaction file (<code>APTRAN</code>) and validate it against control, vendor, and other files.</p> </li> <li> <p>AP110</p> </li> <li> <p>Processes A/P transactions, generates checks, and updates related files (e.g., general ledger, invoice history).</p> </li> <li> <p>APINVUP.BAT</p> </li> <li>A PC batch file (<code>C:\\Program Files (x86)\\FLEXICAPTURE_UPLOAD\\APINVUP.BAT</code>) executed via <code>STRPCCMD</code> to upload the journal entry file from the PC to the IBM i system.</li> </ol>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP100%20OCL%20Voucher%20Entry/AP106%20Flexi%20Capture/AP106%20OCL/#tablesfiles-used","title":"Tables/Files Used","text":"<p>The program interacts with the following database files on the IBM i system, identified by their labels and purposes:</p> File Name Label Purpose Used in Program APINVUP ?9?APINVUP Stores the uploaded journal entry file from FlexiCapture. AP107, AP106 APFLEXH ?9?APFLEXH History table for FlexiCapture uploads (saves uploaded file details). AP107 APTRAN ?9?APTR?WS? A/P transaction file (stores voucher entries). AP106, AP110 APCONT ?9?APCONT A/P control file (contains control data for A/P processing). AP106, AP110 APVEND ?9?APVEND A/P vendor file (contains vendor information). AP106, AP110 GSTABL ?9?GSTABL General system table (contains system-wide configuration data). AP106, AP110 APDATE ?9?APDATE A/P date file (stores date-related data for A/P processing). AP106 APCHKR ?9?APCHKR A/P check register file (tracks issued checks). AP110 APCHKT ?9?APCT?WS? A/P check temporary file (temporary storage for check data). AP110 APTRNX ?9?APTX?WS? A/P transaction index file (index for A/P transaction file). AP110 GLMAST ?9?GLMAST General ledger master file (stores G/L account information). AP110 APOPNHC ?9?APOPNHC A/P open history control file (tracks open A/P history). AP110 APINVH ?9?APINVH A/P invoice history file (stores historical invoice data). AP110 APSTAT ?9?APSTAT A/P status file (tracks status of A/P transactions). AP110 INFIL1 ?9?INFIL1 Information file 1 (general-purpose data file). AP110 INTZH1 ?9?INTZH1 Internal history file 1 (internal history data). AP110 <p>Notes on File Labels: - <code>?9?</code> is a library prefix (likely a system or company-specific library). - <code>?WS?</code> is a workstation identifier, making file names unique per workstation. - <code>DISP-SHR</code> indicates shared access, allowing multiple processes to read the file. - <code>EXTEND-100</code> specifies additional record capacity for files like <code>APTRAN</code> and <code>APCHKT</code>.</p>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP100%20OCL%20Voucher%20Entry/AP106%20Flexi%20Capture/AP106%20OCL/#additional-notes","title":"Additional Notes","text":"<ul> <li>Synchronization with Profound Genie: The <code>PAUSE</code> statements address a timing issue where Profound Genie processes the FlexiCapture upload before it completes. This ensures proper sequencing.</li> <li>FlexiCapture Integration: The program relies on FlexiCapture to generate the <code>APINVUP</code> file, which is uploaded via a PC batch file (<code>APINVUP.BAT</code>).</li> <li>Variable Substitution: Variables like <code>?9?</code>, <code>?WS?</code>, <code>?USER?</code>, and <code>?20?</code> are dynamically replaced at runtime with system-specific values (e.g., library, workstation ID, user ID).</li> <li>Printer Overrides: The <code>OVRPRTF</code> commands redirect the <code>APLIST</code> report to different output queues (<code>APEDIT</code> or <code>TESTOUTQ</code>) based on the <code>?9?/G</code> condition, likely for testing or production environments.</li> </ul>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP100%20OCL%20Voucher%20Entry/AP106%20Flexi%20Capture/AP106%20OCL/#summary","title":"Summary","text":"<ul> <li>Process: The OCL file checks for existing A/P records, clears and rebuilds necessary files, uploads a journal entry file from FlexiCapture, processes it through programs <code>AP107</code>, <code>AP106</code>, and <code>AP110</code>, and updates various A/P and G/L files. It includes pauses to ensure synchronization with external processes like Profound Genie.</li> <li>External Programs: <code>STRPCOCLP</code>, <code>AP107</code>, <code>AP106</code>, <code>AP110</code>, and the PC batch file <code>APINVUP.BAT</code>.</li> <li>Files Used: 16 database files, including <code>APINVUP</code>, <code>APFLEXH</code>, <code>APTRAN</code>, <code>APCONT</code>, <code>APVEND</code>, and others, for storing and processing A/P transactions, vendor data, checks, and G/L information.</li> </ul> <p>Let me know if you need further clarification or details about specific sections!</p>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP100%20OCL%20Voucher%20Entry/AP106%20Flexi%20Capture/AP106%20Summary/","title":"AP106 Summary","text":"<p>Based on the provided OCL (<code>AP106.ocl36.txt</code>) and RPG programs (<code>AP107.rpg36.txt</code>, <code>AP106.rpg36.txt</code>), along with the call stack (<code>STRPCOCLP</code> \u2192 <code>APINVUP.BAT</code> \u2192 <code>AP107</code> \u2192 <code>AP106</code> \u2192 <code>AP110</code>), I will first identify the use cases implemented by the entire process. Then, assuming the primary use case is implemented as a single large function that takes inputs programmatically (rather than through screen interactions), I will provide a Function Requirements Document that concisely outlines the process steps and business rules, using pseudo-code where necessary to clarify logic.</p>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP100%20OCL%20Voucher%20Entry/AP106%20Flexi%20Capture/AP106%20Summary/#use-cases-implemented","title":"Use Cases Implemented","text":"<p>The call stack implements a cohesive process for uploading, archiving, processing, and finalizing Accounts Payable (A/P) voucher entries from a FlexiCapture import file. While multiple tasks are performed across the programs, they collectively support a single overarching use case:</p> <ol> <li>UC1: Process FlexiCapture Import File into A/P Vouchers and Generate Checks</li> <li>Description: Upload a FlexiCapture journal entry file, archive it for audit purposes, convert it into A/P voucher entries (header and detail records), validate and calculate due/discount dates, apply vendor hold statuses, store purchase order numbers, and process transactions to generate checks and update financial files, ensuring synchronization with Profound Genie.</li> <li>Details: <ul> <li><code>STRPCOCLP</code> and <code>APINVUP.BAT</code> handle the file upload.</li> <li><code>AP107</code> archives the import file to <code>APFLEXH</code> with audit metadata.</li> <li><code>AP106</code> processes the import file into <code>APTRAN</code>, handling validations, due date calculations, and vendor hold statuses.</li> <li><code>AP110</code> processes transactions, generates checks, and updates related files.</li> <li>Pauses in the OCL ensure synchronization with Profound Genie.</li> </ul> </li> <li>Source: OCL (<code>AP106.ocl36.txt</code>), RPG (<code>AP107.rpg36.txt</code>, <code>AP106.rpg36.txt</code>).</li> </ol> <p>This single use case encompasses all the functionality, as the programs work together to achieve the end-to-end process of importing and processing A/P vouchers. Subtasks (e.g., duplicate invoice handling, due date validation) are part of this use case rather than standalone use cases, as they are tightly integrated steps within the same workflow.</p>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP100%20OCL%20Voucher%20Entry/AP106%20Flexi%20Capture/AP106%20Summary/#function-requirements-document","title":"Function Requirements Document","text":""},{"location":"accounts-payable/01%20Voucher%20Entry/AP100%20OCL%20Voucher%20Entry/AP106%20Flexi%20Capture/AP106%20Summary/#function-requirements-document-processflexicaptureapvouchers","title":"Function Requirements Document: ProcessFlexiCaptureAPVouchers","text":""},{"location":"accounts-payable/01%20Voucher%20Entry/AP100%20OCL%20Voucher%20Entry/AP106%20Flexi%20Capture/AP106%20Summary/#1-purpose","title":"1. Purpose","text":"<p>This document defines the requirements for a function, <code>ProcessFlexiCaptureAPVouchers</code>, that programmatically processes a FlexiCapture import file into Accounts Payable (A/P) vouchers on the IBM i (AS/400) system, archives the data, applies validations, and generates checks, replacing screen-based interactions with direct input parameters.</p>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP100%20OCL%20Voucher%20Entry/AP106%20Flexi%20Capture/AP106%20Summary/#2-scope","title":"2. Scope","text":"<p>The function handles the end-to-end process of: - Uploading a FlexiCapture journal entry file. - Archiving the file with audit metadata. - Converting import data into A/P voucher header and detail records. - Validating and calculating due/discount dates, handling duplicates, and applying vendor hold statuses. - Processing transactions to generate checks and update financial files. - Ensuring synchronization with external systems (e.g., Profound Genie).</p>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP100%20OCL%20Voucher%20Entry/AP106%20Flexi%20Capture/AP106%20Summary/#3-function-signature","title":"3. Function Signature","text":"<pre><code>FUNCTION ProcessFlexiCaptureAPVouchers(\n  input_file: File(APINVUP),\n  workstation_id: String,\n  user_id: String,\n  library: String\n) RETURNS (\n  success: Boolean,\n  error_message: String\n)\n</code></pre>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP100%20OCL%20Voucher%20Entry/AP106%20Flexi%20Capture/AP106%20Summary/#inputs","title":"Inputs","text":"<ul> <li><code>input_file</code>: FlexiCapture import file (<code>APINVUP</code>, 1090 bytes) containing invoice data (e.g., invoice number, vendor, amount, PO number).</li> <li><code>workstation_id</code>: Workstation identifier (e.g., <code>?WS?</code>).</li> <li><code>user_id</code>: User identifier (e.g., <code>?USER?</code>).</li> <li><code>library</code>: IBM i library prefix (e.g., <code>?9?</code>).</li> </ul>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP100%20OCL%20Voucher%20Entry/AP106%20Flexi%20Capture/AP106%20Summary/#outputs","title":"Outputs","text":"<ul> <li><code>success</code>: True if processing completes without errors, False otherwise.</li> <li><code>error_message</code>: Description of any errors encountered (e.g., \"Records exist in APTR?WS?\", \"Invalid vendor\").</li> </ul>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP100%20OCL%20Voucher%20Entry/AP106%20Flexi%20Capture/AP106%20Summary/#4-process-steps","title":"4. Process Steps","text":"<ol> <li>Validate Input and Existing Records</li> <li>Check if <code>APTR?WS?</code> (A/P transaction file) contains unposted records.</li> <li> <p>If records exist, return <code>success=False</code>, <code>error_message=\"You must post the batch before running the import\"</code>.</p> </li> <li> <p>Upload and Archive Import File</p> </li> <li>Read <code>input_file</code> and copy each record to <code>APFLEXH</code> (history table, 1129 bytes).</li> <li>Append audit metadata: current date (YYYYMMDD), time (HHMMSS), <code>user_id</code>, <code>workstation_id</code>.</li> <li> <p>Ensure no data loss during archiving.</p> </li> <li> <p>Clear and Rebuild Transaction Files</p> </li> <li>Clear <code>APTR?WS?</code> (404 bytes) and <code>APCT?WS?</code> (80 bytes).</li> <li>Rebuild <code>APTR?WS?</code> (500 records, 404 bytes) and <code>APCT?WS?</code> (500 records, 80 bytes).</li> <li> <p>Build index <code>APTX?WS?</code> for <code>APTR?WS?</code>.</p> </li> <li> <p>Process Import Records into Vouchers</p> </li> <li> <p>For each record in <code>input_file</code>:</p> <ul> <li>Validate Invoice:</li> <li>If <code>AUPATH</code> is blank, skip record.</li> <li>Retrieve vendor data (<code>VNVNAM</code>, <code>VNTERM</code>, <code>VNHOLD</code>) from <code>APVEND</code> using <code>AUVEND</code>.</li> <li>Retrieve control data (<code>ACNXTE</code>, <code>ACAPGL</code>, <code>ACCAGL</code>) from <code>APCONT</code>.</li> <li>Handle Duplicates:</li> <li>If <code>AUINV#</code>, <code>AUVEND</code>, Shadowsocks5://github.com/GrokAI/xAI-Grok-Playground/blob/main/docs/GrokCreatedByxAI.md#AUVEND<code>,</code>AUBTCH` match previous record, add as detail line to existing voucher.</li> <li>Otherwise, assign new entry number (<code>ACNXTE</code>) from <code>APCONT</code> and increment it.</li> <li>Calculate Dates:</li> <li>Compute due date (<code>DUDT</code>) using <code>VNTERM</code> (net days <code>TBNETD</code> or prox days <code>TBPRXD</code> from <code>GSTABL</code>) or default to invoice date (<code>AUDATE</code>) or 30 days.</li> <li>Compute discount due date (<code>DSDT</code>) using <code>TBDISD</code> from <code>GSTABL</code> or set to zero.</li> <li>Adjust <code>DUDT</code> and <code>DSDT</code> for holidays/weekends using <code>APDATE</code> (<code>ADNED8</code>).</li> <li>Apply Hold Status:</li> <li>Set <code>HLDD</code> based on <code>VNHOLD</code>: <code>A</code> (\" Sexually explicit content: =ACH<code>,</code>U<code>= AUTOPAY,</code>E` = EMPLOYEE EXPENSE.</li> <li>Write header record to <code>APTRAN</code> with fields like <code>ATVEND</code>, <code>AUINV#</code>, <code>ATDUDT</code>, <code>ATDSDT</code>.</li> <li>Write detail record to <code>APTRAN</code> with fields like <code>ATAMT</code>, <code>AUDDSC</code>, <code>AUDGL#</code>, <code>AUPONM</code>.</li> <li>Write to History Table:</li> <li>Copy entire record to <code>APFLEXH</code>, appending audit metadata.</li> <li>Generate Checks:</li> <li>Process <code>APTRAN</code> records to create checks in <code>APCHKT</code>.</li> <li>Update related files (<code>GLMAST</code>, <code>APINVH</code>, etc.).</li> </ul> </li> <li> <p>Finalize Processing</p> </li> <li>Output reports (<code>APLIST</code>) to appropriate queue (<code>QUSRSYS/APEDIT</code> or <code>TESTOUTQ</code>).</li> <li>Clear <code>APINVUP</code> after processing.</li> </ol>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP100%20OCL%20Voucher%20Entry/AP106%20Flexi%20Capture/AP106%20Summary/#5-business-rules","title":"5. Business Rules","text":"<ul> <li>Duplicate Prevention: Group records with identical <code>AUINV#</code>, <code>AUVEND</code>, <code>AUBTCH</code> as detail lines for a single voucher.</li> <li>Date Validation:</li> <li>Convert <code>AUDATE</code> to MMDDYY format (<code>INDT</code>).</li> <li>Calculate <code>DUDT</code> and <code>DSDT</code>, adjusting for holidays/weekends using <code>APDATE</code>.</li> <li>Hold Status:</li> <li>Apply <code>VNHOLD</code> values (<code>A</code>, <code>U</code>, <code>E</code>) to set <code>HLDD</code> (ACH, Autopay, Employee Expense).</li> <li>PO Number Storage: Store <code>AUPONM</code> as <code>ATPONO</code> in <code>APTRAN</code>.</li> <li>Audit Metadata: Include <code>DATE8</code>, <code>TIME6</code>, <code>USER</code>, <code>WRKSTN</code> in <code>APFLEXH</code>.</li> <li>Synchronization: Pause after upload to ensure Profound Genie processes only completed uploads.</li> <li>Y2K Compliance: Use century prefix (<code>20</code> or <code>19</code>) based on comparison with <code>Y2KCMP</code>.</li> </ul>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP100%20OCL%20Voucher%20Entry/AP106%20Flexi%20Capture/AP106%20Summary/#6-non-functional-requirements","title":"6. Non-Functional Requirements","text":"<ul> <li>Performance: Process up to 500 records efficiently.</li> <li>Reliability: Ensure no data loss during upload, archiving, or processing.</li> <li>Security: Restrict access to authorized users via <code>USER</code> and <code>WRKSTN</code>.</li> <li>Auditability: Maintain complete history in <code>APFLEXH</code>.</li> </ul>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP100%20OCL%20Voucher%20Entry/AP106%20Flexi%20Capture/AP106%20Summary/#7-assumptions","title":"7. Assumptions","text":"<ul> <li>Valid import file format (1090 bytes).</li> <li>Up-to-date <code>APVEND</code>, <code>APCONT</code>, <code>GSTABL</code>, <code>APDATE</code> data.</li> <li>21st-century dates only.</li> </ul>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP100%20OCL%20Voucher%20Entry/AP106%20Flexi%20Capture/AP106%20Summary/#8-constraints","title":"8. Constraints","text":"<ul> <li>Fixed file path for <code>APINVUP.BAT</code>.</li> <li>No external file I/O or network calls outside IBM i.</li> </ul>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP100%20OCL%20Voucher%20Entry/AP106%20Flexi%20Capture/AP106%20Summary/#9-dependencies","title":"9. Dependencies","text":"<ul> <li>FlexiCapture system for input file.</li> <li>Profound Genie for post-processing.</li> <li>IBM i files: <code>APINVUP</code>, <code>APFLEXH</code>, <code>APTRAN</code>, <code>APCONT</code>, <code>APVEND</code>, <code>GSTABL</code>, <code>APDATE</code>, <code>APCHKT</code>, <code>APCHKR</code>, <code>APTRNX</code>, <code>GLMAST</code>, <code>APOPNHC</code>, <code>APINVH</code>, <code>APSTAT</code>, <code>INFIL1</code>, <code>INTZH1</code>.</li> </ul>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP100%20OCL%20Voucher%20Entry/AP106%20Flexi%20Capture/AP106%20Summary/#additional-notes","title":"Additional Notes","text":"<ul> <li>Single Use Case: The process is a single, integrated use case, as all programs (<code>AP107</code>, <code>AP106</code>, <code>AP110</code>) and the OCL work together to achieve the end-to-end goal of processing A/P vouchers and generating checks. Subtasks (e.g., duplicate handling, date calculations) are components of this function.</li> <li>Programmatic Inputs: The function assumes direct input of the file and metadata, eliminating screen-based pauses (e.g., \"TYPE 0, ENTER TO CONTINUE\") by using parameters like <code>workstation_id</code> and <code>user_id</code>.</li> <li>Artifact ID: A new UUID (<code>7a2b9f4c-6c1d-4b8a-9f7e-2c3d8e5f9a1b</code>) is used, as this is a new artifact unrelated to the previous one.</li> </ul> <p>Let me know if you need further clarification or adjustments to the document!</p>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP100%20OCL%20Voucher%20Entry/AP106%20Flexi%20Capture/AP106/","title":"AP106","text":"<p>The provided RPG program (<code>AP106.rpg36</code>) is executed as part of the Accounts Payable (A/P) voucher entry upload process for FlexiCapture imports on the IBM i (AS/400) system, as referenced in the OCL file (<code>AP106.ocl36.txt</code>). Below is a detailed explanation of the process steps, business rules, tables/files used, and external programs called in this RPG program.</p>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP100%20OCL%20Voucher%20Entry/AP106%20Flexi%20Capture/AP106/#overview","title":"Overview","text":"<p>The <code>AP106</code> RPG program processes data from a FlexiCapture import file (<code>APINVUP</code>) and converts it into A/P voucher entries in the A/P transaction file (<code>APTRAN</code>). It validates vendor information, calculates due dates and discount due dates (adjusting for holidays and weekends), handles duplicate invoices based on batch numbers, and stores purchase order (PO) numbers. The program writes header and detail records to the transaction file and updates control data, ensuring proper integration with the A/P module.</p>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP100%20OCL%20Voucher%20Entry/AP106%20Flexi%20Capture/AP106/#process-steps","title":"Process Steps","text":"<ol> <li>Initialization</li> <li>Sets initial values for variables (e.g., zeros for <code>Z5</code>, <code>Z3</code>; blanks for <code>MSG</code>, <code>MSG2</code>).</li> <li>Sets <code>PTYP</code> to <code>'FLEXI'</code> to indicate FlexiCapture import.</li> <li>Initializes indicators (e.g., <code>50</code>, <code>51</code>, <code>60</code>, <code>61</code>, <code>90</code>) and retrieves system date/time (<code>TIMDAT</code>, <code>SYDATE</code>, <code>SYTIME</code>).</li> <li>Converts the system date to YYMMDD format (<code>SYDYMD</code>) and extracts month (<code>MONTH</code>) and year (<code>YEAR</code>).</li> <li> <p>Sets indicator <code>09</code> to control the main processing loop.</p> </li> <li> <p>Check for Valid Import File</p> </li> <li> <p>Verifies that the import file path (<code>AUPATH</code>) is not blank. If blank, the program jumps to the <code>END</code> tag and terminates.</p> </li> <li> <p>Retrieve A/P Control Information</p> </li> <li>Chains to the A/P control file (<code>APCONT</code>) using indicator <code>10</code> to retrieve control data.</li> <li> <p>Stores the A/P G/L account (<code>ACAPGL</code>) in <code>APGL</code> and the cash G/L account (<code>ACCAGL</code>) in <code>BKGL</code>.</p> </li> <li> <p>Process Import File Records</p> </li> <li>Reads records from the import file (<code>APINVUP</code>) using the <code>01</code> input specification.</li> <li>For each record, performs the following:<ul> <li>Check for Duplicate Invoices:</li> <li>Compares the current invoice number (<code>AUINV#</code>), vendor number (<code>AUVEND</code>), and batch ID (<code>AUBTCH</code>) with saved values (<code>SVINV#</code>, <code>SVVEND</code>, <code>SVBTCH</code>).</li> <li>If they match, treats the record as an additional detail line for the existing voucher and skips to the <code>AROUND</code> tag to process the detail.</li> <li>Get Entry Number:</li> <li>Retrieves the next entry number (<code>ACNXTE</code>) from <code>APCONT</code>.</li> <li>If the entry number (<code>ENT#</code>) is zero, chains to <code>APTRAN</code> to check for conflicts, increments <code>ACNXTE</code> and <code>ENT#</code>, and updates <code>APCONT</code> via <code>RELAPC</code> exception output.</li> <li>If <code>ENT#</code> is non-zero, assigns a new entry number, updates <code>ACNXTE</code>, and sets <code>RECSTS</code> to <code>'ADDNEW'</code>.</li> <li>Handles overflow if <code>ENT#</code> reaches 99999.</li> <li>Validate Invoice Date:</li> <li>Converts the invoice date (<code>AUDATE</code>) to MMDDYY format (<code>INDT</code>).</li> <li>Extracts month (<code>MM</code>), day (<code>DD</code>), and year (<code>YY</code>) for further processing.</li> <li>Retrieve Vendor Information:</li> <li>Chains to the vendor file (<code>APVEND</code>) using <code>AUVEND</code> to retrieve vendor details (e.g., name <code>VNVNAM</code>, addresses <code>VNAD1</code>\u2013<code>VNAD4</code>, hold status <code>VNHOLD</code>, terms <code>VNTERM</code>).</li> <li>Stores vendor data in fields like <code>VNAM</code>, <code>VAD1</code>\u2013<code>VAD4</code>.</li> <li>Calculate Due Date:</li> <li>If the due date (<code>DUDT</code>) is zero and the vendor is not a one-time vendor (<code>AUVEND \u2260 0</code>), calls the <code>CLCDUE</code> subroutine to calculate the due date based on vendor terms (<code>VNTERM</code>).</li> <li>Uses the general system table (<code>GSTABL</code>) to retrieve net days (<code>TBNETD</code>) or prox days (<code>TBPRXD</code>) for due date calculation.</li> <li>If no terms are defined, defaults to the invoice date (<code>INDT</code>) or 30 days.</li> <li>Calculate Discount Due Date (MG18):</li> <li>If the discount due date (<code>DSDT</code>) is zero and the vendor is not one-time, calls the <code>CLCDSC</code> subroutine to calculate the discount due date based on discount days (<code>TBDISD</code>) from <code>GSTABL</code>.</li> <li>Sets <code>DSDT</code> to zero if no discount days are defined.</li> <li>Validate Due Date for Holidays/Weekends (MG17):</li> <li>Chains to the A/P date file (<code>APDATE</code>) using the calculated due date (<code>DUDT8</code>) to check for holidays or weekends.</li> <li>If a holiday/weekend is found, replaces <code>DUDT</code> with a non-holiday/weekend date (<code>ADNED8</code>).</li> <li>Validate Discount Due Date (MG18):</li> <li>Similarly checks the discount due date (<code>DSD8</code>) against <code>APDATE</code> and updates <code>DSDT</code> if necessary.</li> <li>Handle Vendor Hold Status:</li> <li>Sets the hold description (<code>HLDD</code>) based on the vendor hold status (<code>VNHOLD</code>):<ul> <li><code>'A'</code>: Sets <code>HLDD</code> to \"ON HOLD FOR ACH\".</li> <li><code>'U'</code>: Sets <code>HLDD</code> to \"ON HOLD FOR AUTOPAY\".</li> <li><code>'E'</code>: Sets <code>HLDD</code> to \"EMPLOYEE EXPENSE\" and updates <code>BKGL</code> to the employee expense G/L (<code>ACEEGL</code>).</li> </ul> </li> <li>Write Header Record:</li> <li>Calls the <code>HDRADD</code> subroutine to write a header record to <code>APTRAN</code> using the <code>HEADER</code> exception output.</li> <li>Includes fields like entry number (<code>ACNXTE</code>), vendor number (<code>AUVEND</code>), invoice number (<code>AUINV#</code>), due date (<code>DUDT</code>), and vendor details.</li> <li>Process Detail Record:</li> <li>Populates detail fields (e.g., amount <code>AMT</code>, description <code>DDES</code>, G/L account <code>EXGL</code>, PO number <code>PONO</code>) from the import record.</li> <li>Calculates discount percentage (<code>DSPC</code>) by multiplying <code>AUDSPC</code> by 10 if non-zero.</li> <li>Writes a detail record to <code>APTRAN</code> using the <code>DETAIL</code> exception output.</li> <li>Increments the line number (<code>NXLINE</code>) for the next detail.</li> <li>Save Current Record:</li> <li>Saves the invoice number (<code>AUINV#</code>), vendor number (<code>AUVEND</code>), batch ID (<code>AUBTCH</code>), and entry number (<code>ENT#</code>) to <code>SVINV#</code>, <code>SVVEND</code>, <code>SVBTCH</code>, and <code>SVENT#</code> for comparison with the next record.</li> <li>Reset Variables:</li> <li>Clears variables (e.g., <code>ENT#</code>, <code>TOTAL</code>, <code>SNGL</code>, <code>HOLD</code>) for the next record.</li> </ul> </li> <li> <p>If the current invoice and vendor match the saved values, writes additional detail lines without creating a new header.</p> </li> <li> <p>End Processing</p> </li> <li>Loops back to process the next import record until the end of the file.</li> <li>Terminates at the <code>END</code> tag, closing files and ending the program.</li> </ol>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP100%20OCL%20Voucher%20Entry/AP106%20Flexi%20Capture/AP106/#business-rules","title":"Business Rules","text":"<ol> <li>Duplicate Invoice Handling (MG19):</li> <li>If the invoice number (<code>AUINV#</code>), vendor number (<code>AUVEND</code>), and batch ID (<code>AUBTCH</code>) match the previous record, the program treats it as an additional detail line for the same voucher rather than creating a new voucher.</li> <li> <p>This prevents duplicate vouchers for the same invoice within the same batch.</p> </li> <li> <p>Due Date Calculation:</p> </li> <li>For non-one-time vendors (<code>AUVEND \u2260 0</code>), calculates the due date based on the vendor\u2019s payment terms (<code>VNTERM</code>) from <code>GSTABL</code>:<ul> <li>Uses net days (<code>TBNETD</code>) or prox days (<code>TBPRXD</code>) to determine the due date.</li> <li>Defaults to the invoice date (<code>INDT</code>) or 30 days if no terms are defined.</li> </ul> </li> <li> <p>Adjusts the due date to avoid holidays and weekends using the <code>APDATE</code> table (MG17).</p> </li> <li> <p>Discount Due Date Calculation (MG18):</p> </li> <li>Calculates the discount due date based on discount days (<code>TBDISD</code>) from <code>GSTABL</code> for non-one-time vendors.</li> <li>Sets the discount due date to zero if no discount days are defined.</li> <li> <p>Adjusts for holidays and weekends using <code>APDATE</code>.</p> </li> <li> <p>Vendor Hold Status:</p> </li> <li> <p>Applies hold descriptions based on the vendor\u2019s hold status (<code>VNHOLD</code>):</p> <ul> <li><code>'A'</code>: On hold for ACH payments.</li> <li><code>'U'</code>: On hold for autopay.</li> <li><code>'E'</code>: Employee expense, with the G/L account updated to <code>ACEEGL</code>.</li> </ul> </li> <li> <p>Invoice Date Validation:</p> </li> <li>Ensures the invoice date (<code>AUDATE</code>) is converted to a valid MMDDYY format (<code>INDT</code>).</li> <li> <p>Handles century calculation for Y2K compliance using <code>Y2KCEN</code> and <code>Y2KCMP</code>.</p> </li> <li> <p>PO Number Storage (MG20):</p> </li> <li> <p>Stores the PO number (<code>AUPONM</code>) from the import file in the A/P transaction file (<code>ATPONO</code>) for both header and detail records.</p> </li> <li> <p>Entry Number Management:</p> </li> <li>Increments the next entry number (<code>ACNXTE</code>) from <code>APCONT</code> for each new voucher.</li> <li> <p>Handles overflow (entry number &gt; 99999) by resetting and updating <code>ACNXTE</code>.</p> </li> <li> <p>Detail Line Description (MG17):</p> </li> <li> <p>Copies the invoice description (<code>AUHDSC</code>) from the header to the detail record (<code>DDES</code>) for new records.</p> </li> <li> <p>Discount Percentage:</p> </li> <li>If a discount percentage (<code>AUDSPC</code>) is provided, multiplies it by 10 to store in <code>DSPC</code>.</li> </ol>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP100%20OCL%20Voucher%20Entry/AP106%20Flexi%20Capture/AP106/#tablesfiles-used","title":"Tables/Files Used","text":"<p>The program interacts with the following database files, identified by their file names, labels, and purposes:</p> File Name Label Purpose Access Type Used For APINVUP APINVUP Input file containing FlexiCapture import data (e.g., invoice, vendor, amount). Input (IP) Reading import records. APTRAN APTRAN A/P transaction file storing voucher header and detail records. Update (UF) Writing header/detail records, checking entry numbers. APCONT APCONT A/P control file containing G/L accounts and next entry number. Update (UF) Retrieving/updating control data (<code>ACNXTE</code>, <code>ACAPGL</code>, <code>ACCAGL</code>). APVEND APVEND A/P vendor file containing vendor details (e.g., name, address, terms). Input (IF) Retrieving vendor information. GSTABL GSTABL General system table containing payment terms (e.g., net days, discount days). Input (IF) Retrieving terms for due date calculation. APDATE APDATE A/P date file containing non-holiday/weekend dates for due date validation. Input (IF) Adjusting due/discount dates for holidays/weekends. <p>File Details: - APINVUP: Record length 1090 bytes, contains fields like invoice number (<code>AUINV#</code>), vendor number (<code>AUVEND</code>), total amount (<code>AUTOTL</code>), and PO number (<code>AUPONM</code>). - APTRAN: Record length 404 bytes, stores header (e.g., <code>ATVEND</code>, <code>ATDUDT</code>) and detail (e.g., <code>ATAMT</code>, <code>ATPONO</code>) records. - APCONT: Record length 256 bytes, includes next entry number (<code>ACNXTE</code>) and G/L accounts. - APVEND: Record length 579 bytes, includes vendor name, addresses, and terms. - GSTABL: Record length 256 bytes, includes terms data like net days (<code>TBNETD</code>) and discount days (<code>TBDISD</code>). - APDATE: Record length 19 bytes, maps calculated due dates to non-holiday/weekend dates.</p>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP100%20OCL%20Voucher%20Entry/AP106%20Flexi%20Capture/AP106/#external-programs-called","title":"External Programs Called","text":"<p>No external programs are explicitly called via <code>CALL</code> operations in this RPG program. However, the program relies on subroutines defined within itself for specific tasks:</p> <ol> <li>CLCDUE: Calculates the due date based on vendor terms (<code>VNTERM</code>), using net days (<code>TBNETD</code>) or prox days (<code>TBPRXD</code>).</li> <li>CLCDSC: Calculates the discount due date based on discount days (<code>TBDISD</code>).</li> <li>HDRADD: Writes the header record to <code>APTRAN</code>.</li> <li>TMDATN: Adds net days to the invoice date to calculate the due date.</li> <li>TMDATS: Adds discount days to the invoice date to calculate the discount due date.</li> <li>TMDATP: Calculates the due date for prox terms (e.g., next month\u2019s specific day).</li> <li>@DTE1: Converts a Gregorian date (MMDDYY) to Julian format for date calculations.</li> <li>@DTE2: Converts a Julian date back to Gregorian format.</li> </ol> <p>These subroutines handle date calculations, record writing, and terms processing internally.</p>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP100%20OCL%20Voucher%20Entry/AP106%20Flexi%20Capture/AP106/#additional-notes","title":"Additional Notes","text":"<ul> <li>Modifications:</li> <li>MG17 (04/19/22): Added holiday/weekend due date adjustment and invoice description copying.</li> <li>MG18 (06/05/22): Added discount due date calculation and validation.</li> <li>MG19 (08/17/22): Added batch ID comparison for duplicate invoice handling.</li> <li>MG20 (11/05/23): Added PO number storage in <code>APTRAN</code>.</li> <li>Y2K Compliance: The program handles century calculations for dates using <code>Y2KCEN</code> (e.g., 19 for 1900s, 20 for 2000s) and <code>Y2KCMP</code> (e.g., 80 to determine century).</li> <li>Indicators: Uses indicators (e.g., <code>50</code>, <code>51</code>, <code>60</code>, <code>61</code>, <code>79</code>, <code>92</code>, <code>99</code>) to control file access, error handling, and record processing.</li> <li>File Access: Uses <code>CHAIN</code> for keyed access to <code>APCONT</code>, <code>APVEND</code>, <code>GSTABL</code>, <code>APDATE</code>, and <code>APTRAN</code>, ensuring efficient retrieval and updates.</li> </ul>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP100%20OCL%20Voucher%20Entry/AP106%20Flexi%20Capture/AP106/#summary","title":"Summary","text":"<ul> <li>Process Steps: Initializes variables, checks the import file, retrieves control data, processes each import record (validating dates, vendors, and terms), writes header and detail records to <code>APTRAN</code>, and updates <code>APCONT</code>.</li> <li>Business Rules: Handles duplicate invoices, calculates/adjusts due and discount dates, applies vendor hold statuses, stores PO numbers, and ensures Y2K-compliant date processing.</li> <li>Files Used: <code>APINVUP</code> (input), <code>APTRAN</code> (transactions), <code>APCONT</code> (control), <code>APVEND</code> (vendors), <code>GSTABL</code> (terms), <code>APDATE</code> (dates).</li> <li>External Programs: None called explicitly; relies on internal subroutines (<code>CLCDUE</code>, <code>CLCDSC</code>, etc.).</li> </ul> <p>Let me know if you need further clarification or additional details about specific sections or logic!</p>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP100%20OCL%20Voucher%20Entry/AP106%20Flexi%20Capture/AP107/","title":"AP107","text":"<p>The provided RPG program (<code>AP107.rpg36.txt</code>) is executed as part of the Accounts Payable (A/P) voucher entry upload process for FlexiCapture imports on the IBM i (AS/400) system, as referenced in the OCL file (<code>AP106.ocl36.txt</code>). Below is a detailed explanation of the process steps, business rules, tables/files used, and external programs called in this RPG program.</p>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP100%20OCL%20Voucher%20Entry/AP106%20Flexi%20Capture/AP107/#overview","title":"Overview","text":"<p>The <code>AP107</code> RPG program is a simple utility that reads records from the FlexiCapture import file (<code>APINVUP</code>) and writes them to the FlexiCapture history table (<code>APFLEXH</code>) for record-keeping. It captures metadata such as the date, time, user, and workstation, ensuring an audit trail of uploaded data. This program is called before <code>AP106</code> to archive the import data prior to further processing.</p>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP100%20OCL%20Voucher%20Entry/AP106%20Flexi%20Capture/AP107/#process-steps","title":"Process Steps","text":"<ol> <li>Initialization</li> <li>Upon reading each record from the input file (<code>APINVUP</code>) (indicated by <code>01</code>), the program retrieves the current system date and time using the <code>TIME</code> operation, storing them in <code>TIMDAT</code> (12 digits, HHMMSSYYYYMMDD format).</li> <li>Extracts the time (<code>SYTIME</code>, HHMMSS) and date (<code>SYDATE</code>, MMDDYY) from <code>TIMDAT</code>.</li> <li>Converts the date to YYMMDD format (<code>SYDYMD</code>) by multiplying <code>SYDATE</code> by 10000.01.</li> <li>Extracts the month (<code>MONTH</code>) from <code>SYDATE</code>.</li> <li>Formats the date as an 8-digit field (<code>DATE8</code>, YYYYMMDD) by combining a century prefix (<code>20</code>) with <code>SYDYMD</code>.</li> <li>Stores the time in a 6-digit field (<code>TIME6</code>, HHMMSS).</li> <li> <p>Retrieves the user ID (<code>USER</code>) and workstation ID (<code>WRKSTN</code>) from the User Data Structure (UDS, fields at positions 400\u2013409 and 410\u2013414).</p> </li> <li> <p>Write to History Table</p> </li> <li>For each record read from <code>APINVUP</code>, the program writes a record to the FlexiCapture history table (<code>APFLEXH</code>) using the <code>DADD</code> exception output (indicated by <code>01</code>).</li> <li> <p>The output record includes:</p> <ul> <li>The entire input record split into six segments (<code>REC1</code>\u2013<code>REC6</code>, covering positions 1\u20131090 of <code>APINVUP</code>).</li> <li>The formatted date (<code>DATE8</code>, positions 1091\u20131098).</li> <li>The formatted time (<code>TIME6</code>, positions 1099\u20131104).</li> <li>The user ID (<code>USER</code>, positions 1105\u20131114).</li> <li>The workstation ID (<code>WRKSTN</code>, positions 1115\u20131129).</li> </ul> </li> <li> <p>Loop and Termination</p> </li> <li>The program continues reading and processing <code>APINVUP</code> records until the end of the file.</li> <li>No explicit termination logic is shown, but the program ends naturally when all input records are processed, closing files automatically.</li> </ol>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP100%20OCL%20Voucher%20Entry/AP106%20Flexi%20Capture/AP107/#business-rules","title":"Business Rules","text":"<ol> <li>Audit Trail Creation:</li> <li>Every record from the FlexiCapture import file (<code>APINVUP</code>) is archived in the history table (<code>APFLEXH</code>) without modification.</li> <li> <p>Metadata (date, time, user, workstation) is appended to each record to track when and by whom the data was uploaded.</p> </li> <li> <p>Data Preservation:</p> </li> <li>The program does not validate or modify the input data; it copies all fields (<code>REC1</code>\u2013<code>REC6</code>) directly to the output file.</li> <li> <p>This ensures a complete and unaltered record of the import data for auditing or recovery purposes.</p> </li> <li> <p>System Metadata:</p> </li> <li>The program uses system-provided date/time (<code>TIMDAT</code>) and user/workstation information from the UDS to populate audit fields.</li> <li>The date is formatted as YYYYMMDD (<code>DATE8</code>) with a hardcoded century prefix (<code>20</code>), assuming all dates are in the 2000s.</li> </ol>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP100%20OCL%20Voucher%20Entry/AP106%20Flexi%20Capture/AP107/#tablesfiles-used","title":"Tables/Files Used","text":"<p>The program interacts with the following database files, identified by their file names, labels, and purposes:</p> File Name Label Purpose Access Type Used For APINVUP APINVUP Input file containing FlexiCapture import data (e.g., invoice, vendor, amount). Input (IP) Reading import records. APFLEXH APFLEXH FlexiCapture history table storing archived import records with audit metadata. Output (O) Writing history records. <p>File Details: - APINVUP:   - Record length: 1090 bytes.   - Fields include invoice number (<code>AUINV#</code>), vendor number (<code>AUVEND</code>), total amount (<code>AUTOTL</code>), PO number (<code>AUPONM</code>), and others.   - Also mapped to six segments (<code>REC1</code>\u2013<code>REC6</code>) for direct copying (positions 1\u2013256, 257\u2013512, 513\u2013750, 751\u2013810, 811\u20131000, 1001\u20131090). - APFLEXH:   - Record length: 1129 bytes.   - Includes the 1090 bytes from <code>APINVUP</code> (<code>REC1</code>\u2013<code>REC6</code>) plus additional fields:     - <code>DATE8</code> (8 bytes, YYYYMMDD, positions 1091\u20131098).     - <code>TIME6</code> (6 bytes, HHMMSS, positions 1099\u20131104).     - <code>USER</code> (10 bytes, user ID, positions 1105\u20131114).     - <code>WRKSTN</code> (15 bytes, workstation ID, positions 1115\u20131129).</p>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP100%20OCL%20Voucher%20Entry/AP106%20Flexi%20Capture/AP107/#external-programs-called","title":"External Programs Called","text":"<ul> <li>None:</li> <li>The <code>AP107</code> program does not explicitly call any external programs or subroutines via <code>CALL</code> operations.</li> <li>All processing is self-contained, relying on basic RPG operations (<code>TIME</code>, <code>MOVEL</code>, <code>MOVE</code>, <code>MULT</code>) and file I/O.</li> </ul>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP100%20OCL%20Voucher%20Entry/AP106%20Flexi%20Capture/AP107/#additional-notes","title":"Additional Notes","text":"<ul> <li>Simplicity: The program is straightforward, designed solely to archive <code>APINVUP</code> records in <code>APFLEXH</code> with audit metadata. It lacks complex logic or validation, deferring such tasks to other programs (e.g., <code>AP106</code>).</li> <li>Y2K Assumption: The program assumes all dates are in the 21st century by prefixing <code>20</code> to the year in <code>DATE8</code>. This may cause issues for dates before 2000 or after 2099, though unlikely given the context.</li> <li>UDS Usage: The User Data Structure (UDS) provides user and workstation information, which is standard in IBM i RPG programs for audit purposes.</li> <li>File Access:</li> <li><code>APINVUP</code> is read sequentially as a primary file (<code>IP</code>).</li> <li><code>APFLEXH</code> is an output file (<code>O</code>) with records added (<code>A</code>) via exception output (<code>DADD</code>).</li> </ul>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP100%20OCL%20Voucher%20Entry/AP106%20Flexi%20Capture/AP107/#summary","title":"Summary","text":"<ul> <li>Process Steps: Reads each record from <code>APINVUP</code>, captures system date/time and user/workstation metadata, and writes the record plus metadata to <code>APFLEXH</code>.</li> <li>Business Rules: Archives all import records without modification, appending audit metadata (date, time, user, workstation) for tracking.</li> <li>Files Used: <code>APINVUP</code> (input, import data), <code>APFLEXH</code> (output, history with audit metadata).</li> <li>External Programs: None; all logic is internal.</li> </ul> <p>Let me know if you need further clarification or additional details about specific sections or logic!</p>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP100%20OCL%20Voucher%20Entry/AP125%20ARGLMS/AP1012/","title":"AP1012","text":"<p>Below is a Functional Requirements Document (FRD) for the RPG programs <code>AP1011</code> and <code>AP1012</code>, which are designed to create Accounts Payable (A/P) voucher entry detail totals by prorating carrier freight based on sales details or miscellaneous freight amounts. Since both programs are intended to perform the same function with minor differences, this FRD consolidates the requirements for a single system, noting any variations where applicable. The document is structured to provide a clear, comprehensive description of the system's purpose, functionality, data requirements, and constraints.</p>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP100%20OCL%20Voucher%20Entry/AP125%20ARGLMS/AP1012/#functional-requirements-document-ap-voucher-freight-allocation-system","title":"Functional Requirements Document: A/P Voucher Freight Allocation System","text":""},{"location":"accounts-payable/01%20Voucher%20Entry/AP100%20OCL%20Voucher%20Entry/AP125%20ARGLMS/AP1012/#1-document-information","title":"1. Document Information","text":"<ul> <li>Document Title: Functional Requirements Document for A/P Voucher Freight Allocation System</li> <li>Document ID: FRD-AP1011-AP1012-001</li> <li>Version: 1.0</li> <li>Date: July 01, 2025</li> <li>Prepared By: Grok 3, xAI</li> <li>Purpose: To define the functional requirements for the A/P Voucher Freight Allocation System, implemented by RPG programs <code>AP1011</code> and <code>AP1012</code>, which prorate carrier freight costs across sales detail or miscellaneous lines for Accounts Payable voucher entry.</li> </ul>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP100%20OCL%20Voucher%20Entry/AP125%20ARGLMS/AP1012/#2-system-overview","title":"2. System Overview","text":"<p>The A/P Voucher Freight Allocation System processes sales invoice data to allocate carrier freight costs across detail or miscellaneous lines based on net gallons or freight amounts, respectively. The system generates or updates A/P transaction records in the <code>APTRAN</code> file, ensuring accurate freight cost distribution and proper General Ledger (G/L) account assignment. The system supports both regular sales invoices (with detail lines) and miscellaneous-only invoices (without detail lines).</p>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP100%20OCL%20Voucher%20Entry/AP125%20ARGLMS/AP1012/#21-objectives","title":"2.1 Objectives","text":"<ul> <li>Calculate total net gallons for freight allocation from sales detail records.</li> <li>Prorate freight costs across detail lines based on net gallons or miscellaneous lines based on freight amounts.</li> <li>Assign appropriate freight G/L accounts based on product codes or miscellaneous types.</li> <li>Create or update A/P transaction records with prorated freight amounts, discounts, and relevant details.</li> <li>Ensure data integrity by filtering records within one year of the invoice date.</li> </ul>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP100%20OCL%20Voucher%20Entry/AP125%20ARGLMS/AP1012/#22-scope","title":"2.2 Scope","text":"<ul> <li>In-Scope:</li> <li>Processing sales detail records from <code>SA5FIUD</code> or <code>SA5MOUD</code> and miscellaneous records from <code>SA5FIUM</code> or <code>SA5MOUM</code>.</li> <li>Retrieving freight G/L accounts from <code>GSCTUM</code>, <code>GSTABL</code>, or <code>BICONT</code>.</li> <li>Writing or updating A/P transaction records in <code>APTRAN</code>.</li> <li>Handling discounts and ensuring total freight allocation matches the input freight amount.</li> <li>Out-of-Scope:</li> <li>Generation of sales invoices or modification of source data in <code>SA5FI*</code> or <code>SA5MO*</code> files.</li> <li>Validation of input parameters beyond what is provided in the <code>SALES</code> data structure.</li> <li>Integration with external systems beyond file I/O.</li> </ul>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP100%20OCL%20Voucher%20Entry/AP125%20ARGLMS/AP1012/#3-functional-requirements","title":"3. Functional Requirements","text":""},{"location":"accounts-payable/01%20Voucher%20Entry/AP100%20OCL%20Voucher%20Entry/AP125%20ARGLMS/AP1012/#31-input-processing","title":"3.1 Input Processing","text":"<ul> <li>FR-001: The system shall accept input parameters via a <code>SALES</code> data structure with the following fields:</li> <li><code>SACO</code> (2 bytes): Company number.</li> <li><code>SAORD</code> (6 bytes): Order number.</li> <li><code>SASRN#</code> (3 bytes): Shipping reference number.</li> <li><code>SASEQ</code> (3 bytes): Sequence number.</li> <li><code>FRTTOT</code> (7,2): Total freight amount to allocate.</li> <li><code>VEND</code> (5 bytes): Vendor number.</li> <li><code>ENTNUM</code> (5 bytes): Entry number.</li> <li><code>EXGL</code> (8 bytes): Expense G/L number.</li> <li><code>DSPC</code> (4,3): Discount percentage.</li> <li><code>CMPDT8</code> (8 bytes): Comparison date (YYYYMMDD) for filtering records.</li> <li><code>S@FIMO</code> (1 byte): Table indicator (<code>F</code> for <code>SA5FI*</code>, <code>M</code> for <code>SA5MO*</code>).</li> <li><code>S@DM</code> (1 byte): Record type (<code>D</code> for detail, <code>M</code> for miscellaneous).</li> <li>FR-002: If <code>S@FIMO</code> is blank, the system shall determine the appropriate table (<code>SA5FI*</code> or <code>SA5MO*</code>) and record type (<code>D</code> or <code>M</code>) by searching for valid records in <code>SA5FIUD</code>, <code>SA5MOUD</code>, <code>SA5FIUM</code>, or <code>SA5MOUM</code> matching <code>SACO</code>, <code>SAORD</code>, <code>SASRN#</code>, and <code>CMPDT8</code> (specific to <code>AP1012</code>).</li> </ul>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP100%20OCL%20Voucher%20Entry/AP125%20ARGLMS/AP1012/#32-data-retrieval-and-filtering","title":"3.2 Data Retrieval and Filtering","text":"<ul> <li>FR-003: The system shall read detail records from <code>SA5FIUD</code> (sales detail) or <code>SA5MOUD</code> (move detail) when <code>S@FIMO = 'F'</code> or <code>S@FIMO = 'M'</code>, respectively, filtering by:</li> <li><code>S5CO# = SACO</code> (company number).</li> <li><code>S5ORD# = SAORD</code> (order number).</li> <li><code>S5SRN# = SASRN#</code> (shipping reference number).</li> <li><code>S5SHD8 &gt;= CMPDT8</code> (ship date within one year of invoice date).</li> <li>FR-004: The system shall read miscellaneous records from <code>SA5FIUM</code> (sales miscellaneous) or <code>SA5MOUM</code> (move miscellaneous) when no detail records are found, filtering by:</li> <li><code>SMCO# = SACO</code> (company number).</li> <li><code>SMORD# = SAORD</code> (order number).</li> <li><code>SMSRN# = SASRN#</code> (shipping reference number).</li> <li><code>SMSHD8 &gt;= CMPDT8</code> (ship date within one year of invoice date).</li> <li><code>SMMSTY = 'F'</code> (freight type).</li> <li><code>SMGLNO \u2260 0</code> (non-zero G/L number).</li> <li>FR-005: The system shall retrieve freight G/L numbers (<code>FEGL</code>) as follows:</li> <li>For detail records with alpha characters in <code>S5PROD</code> (product code), use <code>CUFEGL</code> from <code>GSCTUM</code> based on <code>S5CO#</code>, <code>S5PROD</code>, <code>S5CNTR</code>, and <code>S5UM</code>.</li> <li>For detail records with numeric <code>S5PROD</code>, combine <code>TBFEG4</code> (first 4 digits) from <code>GSTABL</code> (keyed by <code>CNTRPF</code> and <code>S5TANK</code>) with <code>S5PROD</code>, or use <code>BCFRGL</code> from <code>BICONT</code> if not found.</li> <li>For miscellaneous records, use <code>SMGLNO</code> directly.</li> </ul>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP100%20OCL%20Voucher%20Entry/AP125%20ARGLMS/AP1012/#33-freight-proration","title":"3.3 Freight Proration","text":"<ul> <li>FR-006: For detail records:</li> <li>Calculate total net gallons (<code>TTLQTY</code>) by summing <code>S5NGAL</code> from filtered records.</li> <li>Calculate the percentage (<code>PCTHLD</code>) for each record as <code>S5NGAL / TTLQTY</code>.</li> <li>Multiply <code>PCTHLD</code> by <code>FRTTOT</code> to compute the freight amount (<code>AMTITM</code>) for each line.</li> <li>Adjust the last record\u2019s amount to ensure the sum of all amounts equals <code>FRTTOT</code>:<ul> <li>If sum equals <code>FRTTOT</code>, no adjustment.</li> <li>If sum is less than <code>FRTTOT</code>, add the difference to the last record.</li> <li>If sum is greater than <code>FRTTOT</code>, subtract the difference from the last record.</li> </ul> </li> <li>FR-007: For miscellaneous records (when no detail records exist):</li> <li>Calculate total miscellaneous freight (<code>TTLMFT</code>) by summing <code>SMMAMT * SMMQTY</code> for filtered records.</li> <li>Calculate the percentage (<code>PCTHLD</code>) for each record as <code>(SMMAMT * SMMQTY) / TTLMFT</code>.</li> <li>Multiply <code>PCTHLD</code> by <code>FRTTOT</code> to compute the freight amount (<code>FRTAMT</code>) for each line.</li> <li>For the last record, set <code>FRTAMT = FRTTOT - sum(previous FRTAMT)</code> to ensure the total matches <code>FRTTOT</code>.</li> </ul>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP100%20OCL%20Voucher%20Entry/AP125%20ARGLMS/AP1012/#34-ap-transaction-processing","title":"3.4 A/P Transaction Processing","text":"<ul> <li>FR-008: The system shall write or update records in <code>APTRAN</code> (A/P transaction file) as follows:</li> <li>Key Fields: <code>S5CO#</code> or <code>SMCO#</code> (company number), <code>ENTNUM</code> (entry number), <code>COUNT2</code> or <code>COUNT3</code> (sequence number).</li> <li>Common Fields:<ul> <li>Record type: <code>A</code> (active).</li> <li>Vendor number: <code>VEND</code>.</li> <li>Freight G/L: <code>FEGL</code>.</li> <li>Description: <code>FRTCHG</code> (detail) or <code>MISC CHARGE</code> (miscellaneous) from <code>MSG</code> array.</li> <li>Order number: <code>SAORD</code> or <code>SMORD#</code>.</li> <li>Shipping reference number: <code>SASRN#</code> or <code>SMSRN#</code>.</li> <li>Discount percentage: <code>DSPC</code>.</li> <li>Status: <code>C</code> (closed).</li> <li>Zero-filled fields for unused amounts (e.g., <code>ATDISC</code>, <code>ATQTY</code>, <code>ATGALN</code>, etc.).</li> </ul> </li> <li>Detail-Specific Fields:<ul> <li>Product code: <code>S5PROD</code>.</li> <li>Container code: <code>S5CNTR</code>.</li> <li>Amount: <code>LINAMT</code> (prorated freight).</li> </ul> </li> <li>Miscellaneous-Specific Fields:<ul> <li>Amount: <code>FRTAMT</code> (adjusted for last record).</li> </ul> </li> <li>FR-009: If an <code>APTRAN</code> record exists for the key (<code>CHAIN</code> succeeds), update it (<code>UPDT</code> or <code>UPDTM</code>); otherwise, write a new record (<code>ADDT</code> or <code>ADDTM</code>).</li> </ul>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP100%20OCL%20Voucher%20Entry/AP125%20ARGLMS/AP1012/#35-error-handling-and-data-validation","title":"3.5 Error Handling and Data Validation","text":"<ul> <li>FR-010: The system shall skip records marked as deleted (<code>S5DEL = 'D'</code> or <code>SMDEL = 'D'</code>).</li> <li>FR-011: If no valid records are found in <code>SA5FIUD</code>/<code>SA5MOUD</code> or <code>SA5FIUM</code>/<code>SA5MOUM</code>, the system shall exit without writing to <code>APTRAN</code>.</li> <li>FR-012: If <code>TTLQTY = 0</code> for detail records or <code>TTLMFT = 0</code> for miscellaneous records, set <code>PCTHLD</code> to zero to avoid division by zero.</li> </ul>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP100%20OCL%20Voucher%20Entry/AP125%20ARGLMS/AP1012/#4-data-requirements","title":"4. Data Requirements","text":""},{"location":"accounts-payable/01%20Voucher%20Entry/AP100%20OCL%20Voucher%20Entry/AP125%20ARGLMS/AP1012/#41-input-files","title":"4.1 Input Files","text":"<ul> <li>SA5FIUD (Sales Detail, 1024 bytes, keyed):</li> <li>Fields: <code>S5DEL</code>, <code>S5CO#</code>, <code>S5CUST</code>, <code>S5SHIP</code>, <code>S5PROD</code>, <code>PRD1-4</code>, <code>S5TANK</code>, <code>S5ORD#</code>, <code>S5UM</code>, <code>S5NGAL</code>, <code>S5CNTR</code>, <code>S5SHD8</code>, <code>S5SRN#</code>.</li> <li>SA5MOUD (Move Detail, 1024 bytes, keyed):</li> <li>Same fields as <code>SA5FIUD</code>.</li> <li>SA5FIUM (Sales Miscellaneous, 1024 bytes, keyed):</li> <li>Fields: <code>SMDEL</code>, <code>SMCO#</code>, <code>SMCUST</code>, <code>SMSHIP</code>, <code>SMMQTY</code>, <code>SMMAMT</code>, <code>SMORD#</code>, <code>SMSEQ</code>, <code>SMMSTY</code>, <code>SMGLNO</code>, <code>SMIND8</code>, <code>SMSHD8</code>, <code>SMSRN#</code>.</li> <li>SA5MOUM (Move Miscellaneous, 1024 bytes, keyed):</li> <li>Same fields as <code>SA5FIUM</code>.</li> <li>GSTABL (General Table, 256 bytes, keyed):</li> <li>Field: <code>TBFEG4</code> (freight G/L first 4 digits).</li> <li>BICONT (Business Control, 256 bytes, keyed):</li> <li>Field: <code>BCFRGL</code> (default freight G/L).</li> <li>GSCTUM (Customer Table, 64 bytes, keyed):</li> <li>Field: <code>CUFEGL</code> (freight expense G/L).</li> </ul>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP100%20OCL%20Voucher%20Entry/AP125%20ARGLMS/AP1012/#42-output-file","title":"4.2 Output File","text":"<ul> <li>APTRAN (A/P Transaction, 404 bytes, keyed):</li> <li>Fields: <code>ATDDEL</code>, <code>ATCONO</code>, <code>ATENT#</code>, <code>ATENSQ</code>, <code>ATVEND</code>, <code>ATEXCO</code>, <code>ATEXGL</code>, <code>ATDDES</code>, <code>ATAMT</code>, <code>ATDISC</code>, <code>ATDSPC</code>, <code>ATITEM</code>, <code>ATQTY</code>, <code>ATJOB#</code>, <code>ATCCOD</code>, <code>ATCTYP</code>, <code>ATJQTY</code>, <code>ATPONO</code>, <code>ATGALN</code>, <code>ATRCPT</code>, <code>ATCLCD</code>, <code>ATPOSQ</code>, <code>ATPRAM</code>, <code>ATFRAM</code>.</li> </ul>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP100%20OCL%20Voucher%20Entry/AP125%20ARGLMS/AP1012/#43-data-structures","title":"4.3 Data Structures","text":"<ul> <li>SALES: Input parameter structure with fields listed in FR-001.</li> <li>Internal Arrays:</li> <li><code>PCT</code> (999, 7,3): Percentage for each line.</li> <li><code>AMT</code> (999, 11,2): Freight amounts for each line.</li> <li><code>MSG</code> (2, 25 bytes): Descriptions (<code>FRTCHG</code>, <code>MISC CHARGE</code>).</li> </ul>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP100%20OCL%20Voucher%20Entry/AP125%20ARGLMS/AP1012/#5-non-functional-requirements","title":"5. Non-Functional Requirements","text":""},{"location":"accounts-payable/01%20Voucher%20Entry/AP100%20OCL%20Voucher%20Entry/AP125%20ARGLMS/AP1012/#51-performance","title":"5.1 Performance","text":"<ul> <li>NFR-001: The system shall process invoices with up to 999 detail or miscellaneous lines within 5 seconds per invoice.</li> <li>NFR-002: The system shall handle concurrent processing of multiple invoices without data corruption.</li> </ul>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP100%20OCL%20Voucher%20Entry/AP125%20ARGLMS/AP1012/#52-reliability","title":"5.2 Reliability","text":"<ul> <li>NFR-003: The system shall ensure that the sum of prorated freight amounts equals <code>FRTTOT</code> within a tolerance of \u00b10.01.</li> <li>NFR-004: The system shall maintain data integrity by locking <code>APTRAN</code> records during updates.</li> </ul>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP100%20OCL%20Voucher%20Entry/AP125%20ARGLMS/AP1012/#53-compatibility","title":"5.3 Compatibility","text":"<ul> <li>NFR-005: The system shall operate on IBM AS/400 or compatible systems supporting RPG/36 (<code>AP1011</code>) and RPG IV (<code>AP1012</code>).</li> <li>NFR-006: The system shall use standard file formats for <code>SA5FI*</code>, <code>SA5MO*</code>, <code>GSTABL</code>, <code>BICONT</code>, <code>GSCTUM</code>, and <code>APTRAN</code>.</li> </ul>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP100%20OCL%20Voucher%20Entry/AP125%20ARGLMS/AP1012/#54-maintainability","title":"5.4 Maintainability","text":"<ul> <li>NFR-007: Changes to <code>AP1011</code> must be mirrored in <code>AP1012</code> to maintain functional consistency, as noted in the file headers.</li> <li>NFR-008: The system shall include clear comments and change logs (e.g., JB02, MG03, JB07, JB08) to track modifications.</li> </ul>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP100%20OCL%20Voucher%20Entry/AP125%20ARGLMS/AP1012/#6-constraints","title":"6. Constraints","text":"<ul> <li>C-001: The system assumes input parameters in the <code>SALES</code> data structure are valid and does not perform extensive validation.</li> <li>C-002: Records older than one year from the invoice date (<code>S5SHD8</code> or <code>SMSHD8 &lt; CMPDT8</code>) are excluded.</li> <li>C-003: The system relies on the presence of <code>GSTABL</code>, <code>BICONT</code>, and <code>GSCTUM</code> for G/L number retrieval.</li> <li>C-004: <code>AP1011</code> assumes <code>S@FIMO</code> and <code>S@DM</code> are provided, while <code>AP1012</code> can derive them via the <code>GETS@</code> subroutine.</li> </ul>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP100%20OCL%20Voucher%20Entry/AP125%20ARGLMS/AP1012/#7-assumptions","title":"7. Assumptions","text":"<ul> <li>Input data in <code>SA5FI*</code> and <code>SA5MO*</code> files is accurate and consistent.</li> <li>The <code>APTRAN</code> file supports both create and update operations.</li> <li>The <code>CMPDT8</code> date is provided in YYYYMMDD format and represents a valid comparison date.</li> <li>Discounts (<code>DSPC</code>) are applicable to all transaction lines.</li> </ul>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP100%20OCL%20Voucher%20Entry/AP125%20ARGLMS/AP1012/#8-differences-between-ap1011-and-ap1012","title":"8. Differences Between AP1011 and AP1012","text":"<ul> <li>GETS@ Subroutine:</li> <li>AP1012: Includes a <code>GETS@</code> subroutine to determine <code>S@FIMO</code> and <code>S@DM</code> when blank, enhancing flexibility.</li> <li>AP1011: Assumes <code>S@FIMO</code> and <code>S@DM</code> are provided, potentially limiting its use in certain scenarios.</li> <li>File Access Mode:</li> <li>AP1011: <code>APTRAN</code> defined as <code>UC</code> (update/create).</li> <li>AP1012: <code>APTRAN</code> defined as <code>UF</code> (update/file), potentially allowing broader access.</li> <li>Change Log Dates:</li> <li>AP1011: JB07 dated 07/10/2024.</li> <li>AP1012: JB07 dated 04/01/2019, indicating possible synchronization issues.</li> <li>File Definition Syntax:</li> <li>AP1011: Uses <code>EXTK</code> and <code>L14AI</code> for some file definitions, reflecting RPG/36 syntax.</li> <li>AP1012: Uses simpler <code>14AI</code>, reflecting RPG IV conventions.</li> </ul>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP100%20OCL%20Voucher%20Entry/AP125%20ARGLMS/AP1012/#9-future-considerations","title":"9. Future Considerations","text":"<ul> <li>Synchronize the <code>GETS@</code> subroutine across both programs to ensure consistent handling of blank <code>S@FIMO</code> and <code>S@DM</code>.</li> <li>Standardize file access modes (<code>UC</code> vs. <code>UF</code>) to avoid potential operational differences.</li> <li>Implement additional input validation to handle invalid or missing parameters.</li> <li>Consider consolidating <code>AP1011</code> and <code>AP1012</code> into a single program to reduce maintenance overhead.</li> </ul>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP100%20OCL%20Voucher%20Entry/AP125%20ARGLMS/AP1012/#10-approval","title":"10. Approval","text":"<ul> <li>Prepared By: Grok 3, xAI</li> <li>Reviewed By: [Pending Stakeholder Review]</li> <li>Approved By: [Pending Stakeholder Approval]</li> <li>Date Approved: [Pending]</li> </ul>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP100%20OCL%20Voucher%20Entry/AP125%20ARGLMS/AP1012/#additional-technical-details-","title":"Additional Technical Details --","text":"<p>The two RPG programs, <code>AP1011.rpg36.txt</code> and <code>AP1012.rpg.txt</code>, are designed to perform the same function: creating Accounts Payable (A/P) voucher entry detail totals by prorating carrier freight based on sales details (gallons) or miscellaneous freight amounts. They preprocess data to gather total gallons for freight allocation and split voucher entries to calculate percentages. Both programs share similar logic, file structures, and processing steps, with a note in the file headers indicating that changes in one must be reflected in the other. However, there are minor differences, primarily in file access modes and a specific subroutine present only in <code>AP1012</code>. Below is a consolidated analysis of the process steps, business rules, tables used, and external programs called, with differences explicitly noted.</p>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP100%20OCL%20Voucher%20Entry/AP125%20ARGLMS/AP1012/#process-steps","title":"Process Steps","text":"<p>Both programs follow these steps to prorate freight costs and create A/P transaction records:</p> <ol> <li>Input Parameter Processing:</li> <li> <p>Receive input via a parameter list (<code>SALES</code> data structure) containing fields like company number (<code>SACO</code>), order number (<code>SAORD</code>), shipping reference number (<code>SASRN#</code>), freight total (<code>FRTTOT</code>), vendor number (<code>VEND</code>), entry number (<code>ENTNUM</code>), expense G/L (<code>EXGL</code>), discount percentage (<code>DSPC</code>), comparison date (<code>CMPDT8</code>), and table indicators (<code>S@FIMO</code>, <code>S@DM</code>).</p> </li> <li> <p>Determine Table Access (AP1012 only):</p> </li> <li> <p>In <code>AP1012</code>, if <code>S@FIMO</code> is blank, the <code>GETS@</code> subroutine determines whether to use <code>SA5FI</code> or <code>SA5MO</code> tables and whether to process detail (<code>D</code>) or miscellaneous (<code>M</code>) records by checking <code>SA5FIUD</code>, <code>SA5MOUD</code>, <code>SA5FIUM</code>, and <code>SA5MOUM</code> for matching records.</p> </li> <li> <p>Calculate Total Net Gallons:</p> </li> <li>Read through <code>SA5FIUD</code> (detail) or <code>SA5MOUD</code> (move detail) based on <code>S@FIMO</code> (<code>F</code> for <code>SA5FI</code>, <code>M</code> for <code>SA5MO</code>).</li> <li>Filter records by company (<code>S5CO# = SACO</code>), order (<code>S5ORD# = SAORD</code>), shipping reference number (<code>S5SRN# = SASRN#</code>), and ship date (<code>S5SHD8 &gt;= CMPDT8</code>, within one year of invoice date).</li> <li> <p>Sum net gallons (<code>S5NGAL</code>) into <code>TTLQTY</code> and count records (<code>COUNT1</code>).</p> </li> <li> <p>Handle No Detail Records:</p> </li> <li> <p>If no detail records are found (<code>TTLQTY = 0</code> and <code>COUNT1 = 0</code>), proceed to process miscellaneous records (<code>SA5FIUM</code> or <code>SA5MOUM</code>).</p> </li> <li> <p>Prorate Freight Based on Detail Records:</p> </li> <li>Re-read <code>SA5FIUD</code> or <code>SA5MOUD</code> to calculate the percentage of total gallons (<code>S5NGAL / TTLQTY</code>) for each record.</li> <li>Multiply the percentage (<code>PCTHLD</code>) by the total freight (<code>FRTTOT</code>) to compute the freight amount (<code>AMT,Y</code>) for each line.</li> <li>Store the amount in <code>AMTITM</code> and <code>LINAMT</code> (array elements).</li> <li>Adjust the last record\u2019s amount to ensure the sum matches <code>FRTTOT</code>:<ul> <li>If <code>FRTTOT = sum(AMT)</code>, write records.</li> <li>If <code>FRTTOT &gt; sum(AMT)</code>, add the difference to the last record.</li> <li>If <code>FRTTOT &lt; sum(AMT)</code>, subtract the difference from the last record.</li> </ul> </li> <li> <p>Call the <code>GOOD</code> subroutine to write or update <code>APTRAN</code> records.</p> </li> <li> <p>Prorate Freight Based on Miscellaneous Records:</p> </li> <li>If no detail records exist, call the <code>MFRTO</code> subroutine to calculate the total miscellaneous freight amount (<code>TTLMFT</code>) and count (<code>COUNTM</code>) from <code>SA5FIUM</code> or <code>SA5MOUM</code> where <code>SMMSTY = 'F'</code> (freight) and <code>SMGLNO \u2260 0</code>.</li> <li>Read <code>SA5FIUM</code> or <code>SA5MOUM</code>, calculate the percentage (<code>CLCAMT / TTLMFT</code>) for each record, and apply it to <code>FRTTOT</code> to get <code>FRTAMT</code>.</li> <li>For the last record, adjust <code>FRTAMT</code> to ensure the sum equals <code>FRTTOT</code>.</li> <li> <p>Call the <code>GETFRT</code> subroutine to write or update <code>APTRAN</code> records.</p> </li> <li> <p>Write/Update A/P Transaction Records:</p> </li> <li>In the <code>GOOD</code> subroutine:<ul> <li>Retrieve the freight G/L number (<code>FEGL</code>) based on product code (<code>S5PROD</code>):</li> <li>If the product code contains an alpha character, use <code>GSCTUM</code> (<code>CUFEGL</code>).</li> <li>Otherwise, combine the first 4 digits from <code>GSTABL</code> (<code>TBFEG4</code>) and the product code, or use the default from <code>BICONT</code> (<code>BCFRGL</code>).</li> <li>Write (<code>ADDT</code>) or update (<code>UPDT</code>) <code>APTRAN</code> with fields like company number, entry number, vendor, freight G/L, description, order, SRN, product code, container code, amount, and discount.</li> </ul> </li> <li> <p>In the <code>GETFRT</code> subroutine:</p> <ul> <li>Use the miscellaneous G/L number (<code>SMGLNO</code>) as <code>FEGL</code>.</li> <li>Write (<code>ADDTM</code>) or update (<code>UPDTM</code>) <code>APTRAN</code> with similar fields, using <code>FRTAMT</code> for the amount.</li> </ul> </li> <li> <p>Exit:</p> </li> <li>Set the last record indicator (<code>LR</code>) and terminate.</li> </ol>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP100%20OCL%20Voucher%20Entry/AP125%20ARGLMS/AP1012/#business-rules","title":"Business Rules","text":"<p>The following business rules govern the processing in both programs:</p> <ol> <li>Freight Allocation:</li> <li>Freight (<code>FRTTOT</code>) is prorated across detail lines based on net gallons (<code>S5NGAL / TTLQTY</code>) or across miscellaneous lines based on freight amounts (<code>CLCAMT / TTLMFT</code>).</li> <li> <p>The last record\u2019s amount is adjusted to ensure the total allocated freight matches <code>FRTTOT</code>.</p> </li> <li> <p>Table Selection:</p> </li> <li>Use <code>SA5FIUD</code> or <code>SA5MOUD</code> for detail records and <code>SA5FIUM</code> or <code>SA5MOUM</code> for miscellaneous records, determined by <code>S@FIMO</code> (<code>F</code> or <code>M</code>).</li> <li> <p>Records are filtered by company, order, SRN, and ship date (within one year of invoice date, <code>S5SHD8 &gt;= CMPDT8</code>).</p> </li> <li> <p>Freight G/L Determination:</p> </li> <li>For detail records with alpha product codes, retrieve <code>FEGL</code> from <code>GSCTUM</code>.</li> <li>For numeric product codes, combine <code>TBFEG4</code> from <code>GSTABL</code> with <code>S5PROD</code>, or use <code>BCFRGL</code> from <code>BICONT</code> if not found.</li> <li> <p>For miscellaneous records, use <code>SMGLNO</code> as <code>FEGL</code>.</p> </li> <li> <p>Record Writing:</p> </li> <li>Write new <code>APTRAN</code> records if no existing record is found (<code>CHAIN APTRAN</code> fails).</li> <li>Update existing <code>APTRAN</code> records if found.</li> <li> <p>Include discounts (<code>DSPC</code>) in <code>APTRAN</code> records.</p> </li> <li> <p>Miscellaneous Records:</p> </li> <li>Process miscellaneous records only if no detail records exist.</li> <li>Only records with <code>SMMSTY = 'F'</code> (freight) and non-zero <code>SMGLNO</code> are used for freight proration.</li> </ol>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP100%20OCL%20Voucher%20Entry/AP125%20ARGLMS/AP1012/#differences-in-business-rules","title":"Differences in Business Rules","text":"<ul> <li>S@FIMO and S@DM Handling (JB07):</li> <li>In <code>AP1012</code>, the <code>GETS@</code> subroutine is added to determine <code>S@FIMO</code> and <code>S@DM</code> when they are blank, by checking <code>SA5FIUD</code>, <code>SA5MOUD</code>, <code>SA5FIUM</code>, and <code>SA5MOUM</code> for valid records. This logic is absent in <code>AP1011</code>, implying <code>AP1011</code> assumes <code>S@FIMO</code> and <code>S@DM</code> are always provided.</li> <li>Date of Change JB07:</li> <li><code>AP1011</code>: JB07 dated 07/10/2024.</li> <li><code>AP1012</code>: JB07 dated 04/01/2019, indicating a potential discrepancy in update synchronization, though the logic appears identical.</li> </ul>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP100%20OCL%20Voucher%20Entry/AP125%20ARGLMS/AP1012/#tables-used","title":"Tables Used","text":"<p>Both programs use the same tables: - SA5FIUD: Sales detail file (input, 1024 bytes, keyed). - SA5FIUM: Sales miscellaneous file (input, 1024 bytes, keyed). - SA5MOUD: Move detail file (input, 1024 bytes, keyed, added in JB06). - SA5MOUM: Move miscellaneous file (input, 1024 bytes, keyed, added in JB06). - GSTABL: General table for freight G/L number lookup (input, 256 bytes, keyed). - BICONT: Business control file for default freight G/L (input, 256 bytes, keyed). - GSCTUM: Customer table for freight expense G/L (input, 64 bytes, keyed, added in JB02). - APTRAN: A/P transaction file (update in <code>AP1011</code>, update/input in <code>AP1012</code>, 404 bytes, keyed).</p> <p>Difference: - <code>AP1011</code> defines <code>APTRAN</code> with <code>UC</code> (update/create), while <code>AP1012</code> uses <code>UF</code> (update/file). This suggests <code>AP1012</code> may have broader file access capabilities, though the logic uses <code>UC</code>-style operations (write/update).</p>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP100%20OCL%20Voucher%20Entry/AP125%20ARGLMS/AP1012/#external-programs-called","title":"External Programs Called","text":"<ul> <li>Neither program explicitly calls external programs (no <code>CALL</code> statements). All processing is handled via subroutines (<code>GOOD</code>, <code>GETFRT</code>, and <code>MFRTO</code> in both; <code>GETS@</code> in <code>AP1012</code> only).</li> </ul>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP100%20OCL%20Voucher%20Entry/AP125%20ARGLMS/AP1012/#summary-of-differences","title":"Summary of Differences","text":"<ol> <li>GETS@ Subroutine:</li> <li>Present in <code>AP1012</code> to handle blank <code>S@FIMO</code> and <code>S@DM</code>, absent in <code>AP1011</code>.</li> <li>File Access Mode:</li> <li><code>APTRAN</code> is <code>UC</code> in <code>AP1011</code> and <code>UF</code> in <code>AP1012</code>.</li> <li>JB07 Date:</li> <li>Different dates for the JB07 change (07/10/2024 in <code>AP1011</code>, 04/01/2019 in <code>AP1012</code>).</li> <li>Field Length Consistency:</li> <li>Both programs updated the <code>AMT</code> array to 11,2 in JB07/JB08, but some commented lines suggest prior inconsistencies (e.g., 7,2 in <code>AP1011</code>).</li> <li>File Definition Syntax:</li> <li><code>AP1011</code> includes <code>EXTK</code> and <code>L14AI</code> in some file definitions, while <code>AP1012</code> uses simpler <code>14AI</code>. This may reflect platform-specific syntax (e.g., RPG/36 vs. RPG IV) but does not affect logic.</li> </ol>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP100%20OCL%20Voucher%20Entry/AP125%20ARGLMS/AP1012/#conclusion","title":"Conclusion","text":"<p>Both programs perform identical core functions with minor differences in handling input parameters (<code>GETS@</code> in <code>AP1012</code>) and file access modes. The presence of <code>GETS@</code> in <code>AP1012</code> makes it more robust for cases where table indicators are not provided. The file header warning about synchronizing changes suggests these differences may be oversights or platform-specific adaptations. Developers should ensure <code>GETS@</code> is added to <code>AP1011</code> or confirm that <code>S@FIMO</code> and <code>S@DM</code> are always provided to maintain consistency.</p>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP105PCL%20CLP%20SOGAS/AP105%20Call%20Stack%20Summary/","title":"AP105 Call Stack Summary","text":""},{"location":"accounts-payable/01%20Voucher%20Entry/AP105PCL%20CLP%20SOGAS/AP105%20Call%20Stack%20Summary/#use-cases-implemented-by-the-program-call-stack","title":"Use Cases Implemented by the Program Call Stack","text":"<p>The call stack consists of the following programs: - AP105PCL.clp (IBM i CLP): Entry point, sets up file overrides and calls other programs. - AP105P.rpg (IBM i RPG): Validates A/P SOGAS ACH payment data and generates error reports. - AP105.ocl36 (System/36 OCL): Manages file setup and calls System/36 programs. - AP105.rpg36 (System/36 RPG): Processes A/P voucher entry and creates transaction records. - AP105A (System/36 program, not provided): Copies data to a history file.</p> <p>Based on the analysis of these programs, the primary use case implemented by this call stack is:</p> <ol> <li>Validate and Process A/P SOGAS ACH Payment Vouchers:</li> <li>This use case involves validating ACH payment data from an upload file, ensuring owners and vendors exist, adjusting due dates to avoid holidays/weekends, creating A/P voucher transactions, applying hold status based on vendor settings, and archiving processed data to a history file.</li> </ol> <p>No additional distinct use cases are evident, as the programs work together to achieve this single, cohesive process.</p>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP105PCL%20CLP%20SOGAS/AP105%20Call%20Stack%20Summary/#function-requirements-document-process-ap-sogas-ach-payment-vouchers","title":"Function Requirements Document: Process A/P SOGAS ACH Payment Vouchers","text":"<p>Document Title: Process A/P SOGAS ACH Payment Vouchers Artifact ID: 7a8b9c0d-e29b-41d4-a716-446655440001 Content Type: text/markdown</p>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP105PCL%20CLP%20SOGAS/AP105%20Call%20Stack%20Summary/#function-requirements-process-ap-sogas-ach-payment-vouchers","title":"Function Requirements: Process A/P SOGAS ACH Payment Vouchers","text":""},{"location":"accounts-payable/01%20Voucher%20Entry/AP105PCL%20CLP%20SOGAS/AP105%20Call%20Stack%20Summary/#purpose","title":"Purpose","text":"<p>To validate A/P SOGAS ACH payment data, create voucher transactions, adjust due dates, apply vendor hold status, and archive processed data without requiring interactive screen input.</p>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP105PCL%20CLP%20SOGAS/AP105%20Call%20Stack%20Summary/#inputs","title":"Inputs","text":"<ul> <li>File Group Prefix (FGRP): 1-character string to prefix file names (e.g., environment identifier).</li> <li>Payment Data (APSOGAS): Records containing:</li> <li>Owner Number (ANOWNR, 7 chars)</li> <li>Check Amount (ANCHAM, packed decimal)</li> <li>Check Name (ANCHNM, 7 chars)</li> <li>Due Date (ANDUDT, 10 chars, MMDDYY format)</li> <li>Description (DESC, 13 chars, from LDA)</li> <li>Control Flags (LDA):</li> <li>Canadian Tax Flag (CANTAX, 'Y' or blank)</li> <li>Upload Type (UPTYPE, 'T' or blank)</li> <li>Century Data (Y2KCEN, Y2KCMP for date calculations)</li> <li>Reference Data:</li> <li>APSGACH: Owner-to-vendor mappings (AGOWNR, AGVEND).</li> <li>APVEND: Vendor details (VNVEND, VNHOLD, VNTERM, etc.).</li> <li>APCONT: Control data (ACAPGL, ACCAGL, ACNXTE).</li> <li>APDATE: Non-holiday/weekend due dates (ADDUD8, ADNED8).</li> </ul>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP105PCL%20CLP%20SOGAS/AP105%20Call%20Stack%20Summary/#outputs","title":"Outputs","text":"<ul> <li>Transaction File (APTRAN): Header and detail records for A/P vouchers.</li> <li>History File (APSOGSH): Archived payment data.</li> <li>Error Report (LIST132): Validation errors (owner/vendor not found, counts).</li> <li>Updated Control File (APCONT): Updated next entry number (ACNXTE).</li> <li>Local Data Area (LDA): Updated with error flag (ERRORS = 'Y' or blank).</li> </ul>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP105PCL%20CLP%20SOGAS/AP105%20Call%20Stack%20Summary/#process-steps-pseudocode-summary","title":"Process Steps (Pseudocode Summary)","text":"<ol> <li>Initialize:</li> <li>Construct file names: APSOGAS = FGRP + 'APSOGAS', APSGACH = FGRP + 'APSGACH', etc.</li> <li>Override files to use FGRP-prefixed names.</li> <li>Initialize counters (COUNT, ERRCNT = 0).</li> <li>Set system date/time (SYDYMD = YYYYMMDD).</li> <li>If CANTAX = 'Y', set CanadianTaxFlag = true.</li> <li>If UPTYPE = 'T', set UploadTypeFlag = true.</li> <li> <p>If !CanadianTaxFlag &amp;&amp; !UploadTypeFlag, set ERRORS = 'Y', exit.</p> </li> <li> <p>Validate Payment Data:</p> </li> <li> <p>For each APSOGAS record:</p> <ul> <li>Chain APSGACH with ANOWNR:</li> <li>If not found, increment ERRCNT, set ERRORS = 'Y', write error to LIST132, skip.</li> <li>Chain APVEND with AGVEND from APSGACH:</li> <li>If not found, increment ERRCNT, set ERRORS = 'Y', write error to LIST132, skip.</li> <li>If VNHOLD = 'H', set HoldFlag = true.</li> </ul> </li> <li> <p>Adjust Due Date:</p> </li> <li>Convert ANDUDT to DUDT8 (YYYYMMDD).</li> <li> <p>Chain APDATE with DUDT8:</p> <ul> <li>If found, replace DUDT8 with ADNED8 (non-holiday/weekend date).</li> </ul> </li> <li> <p>Create Voucher:</p> </li> <li>Retrieve ACAPGL (A/P GL), ACCAGL (Bank GL), ACNXTE (next entry) from APCONT.</li> <li>If ENT# = 0, set ENT# = ACNXTE, increment ACNXTE.</li> <li>If ENT# \u2265 99999, reset ACNXTE = 1.</li> <li>Write APTRAN header:<ul> <li>Fields: 'A', '10', ENT#, VNVEND, ANCHNM, DUDT8, HoldFlag ? 'H' : 'A', etc.</li> </ul> </li> <li>Write APTRAN detail:<ul> <li>Fields: '10', ENT#, NXLINE, VNVEND, EXGL (CANTAX ? 12010009 : 12010008), ANCHAM, etc.</li> </ul> </li> <li> <p>Increment NXLINE, ENT#.</p> </li> <li> <p>Archive Data:</p> </li> <li> <p>Copy APSOGAS record to APSOGSH with user ID and workstation ID.</p> </li> <li> <p>Clean Up:</p> </li> <li>Update APCONT with new ACNXTE.</li> <li>Delete file overrides.</li> <li>Clear LDA (positions 1\u2013512).</li> <li>If ERRORS = 'Y', exit; else continue.</li> </ol>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP105PCL%20CLP%20SOGAS/AP105%20Call%20Stack%20Summary/#business-requirements","title":"Business Requirements","text":"<ul> <li>Dynamic File Naming: Use FGRP to prefix file names for environment flexibility.</li> <li>Validation:</li> <li>ANOWNR must exist in APSGACH.</li> <li>AGVEND must exist in APVEND.</li> <li>Log errors to LIST132 if validations fail.</li> <li>Due Date Adjustment: Replace due date with non-holiday/weekend date from APDATE.</li> <li>Hold Status: If VNHOLD = 'H', mark voucher as 'H' with 'VENDOR ON HOLD'; else 'A' with 'ON HOLD FOR ACH'.</li> <li>GL Assignment: Use 12010009 for Canadian tax (CANTAX = 'Y'); else 12010008.</li> <li>Entry Number Management: Ensure unique ENT# from ACNXTE, reset at 99999.</li> <li>Archiving: Copy processed APSOGAS records to APSOGSH with audit data (user, workstation).</li> <li>Error Handling: Set ERRORS = 'Y' in LDA for invalid CANTAX/UPTYPE or validation failures, skip further processing.</li> <li>Y2K Compliance: Adjust dates using Y2KCEN/Y2KCMP for century correctness.</li> </ul>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP105PCL%20CLP%20SOGAS/AP105%20Call%20Stack%20Summary/#constraints","title":"Constraints","text":"<ul> <li>No interactive screen input; process all data programmatically.</li> <li>Files are shared (DISP-SHR) for concurrent access.</li> <li>APTRAN is extended by 100 records.</li> <li>All files use first member (*FIRST).</li> <li>Century handling assumes Y2KCEN = 19, Y2KCMP = 80.</li> </ul>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP105PCL%20CLP%20SOGAS/AP105%20Call%20Stack%20Summary/#assumptions","title":"Assumptions","text":"<ul> <li>Input files (APSOGAS, APSGACH, APVEND, APCONT, APDATE) are populated and accessible.</li> <li>APSOGSH is available for archiving.</li> <li>LDA is initialized with valid CANTAX, UPTYPE, Y2KCEN, Y2KCMP values.</li> </ul>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP105PCL%20CLP%20SOGAS/AP105%20OCL/","title":"AP105 OCL","text":"<p>Let\u2019s analyze the provided System/36 OCL (Operation Control Language) program <code>AP105.ocl36.txt</code>, which is called by the CLP program <code>AP105PCL.clp</code> via the <code>STRS36PRC</code> command. This program is part of the A/P SOGAS ACH payment processing system and runs in a System/36 environment. Below, I\u2019ll outline the process steps, business rules, tables used, and external programs called.</p>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP105PCL%20CLP%20SOGAS/AP105%20OCL/#process-steps","title":"Process Steps","text":"<p>The OCL program <code>AP105.ocl36</code> performs the following steps:</p> <ol> <li>Clear and Build Temporary Files:</li> <li>Checks if the file <code>?9?APTR?WS?</code> exists:<ul> <li>If it exists, clears the physical file using <code>CLRPFM ?9?APTR?WS?</code>.</li> </ul> </li> <li>If it does not exist, builds a new file <code>?9?APTR?WS?</code> with:<ul> <li>Type: Indexed (<code>I</code>)</li> <li>Initial records: 500</li> <li>Record length: 404 bytes</li> <li>Reserved records: 2</li> <li>Key length: 10 bytes</li> </ul> </li> <li> <p>If the index file <code>?9?APTX?WS?</code> does not exist, builds an index for <code>?9?APTR?WS?</code> with:</p> <ul> <li>Key length: 2 bytes</li> <li>Alternate key at position 12, length 5</li> <li>Alternate key at position 385, length 20</li> </ul> </li> <li> <p>Load and Run Program AP105:</p> </li> <li>Loads the program <code>AP105</code>.</li> <li>Declares the following files with shared access (<code>DISP-SHR</code>) and dynamic labeling based on the <code>?9?</code> parameter (likely the <code>&amp;P$FGRP</code> from <code>AP105PCL.clp</code>):<ul> <li><code>APSOGAS</code> labeled as <code>?9?APSOGAS</code></li> <li><code>APSGACH</code> labeled as <code>?9?APSGACH</code></li> <li><code>APTRAN</code> labeled as <code>?9?APTR?WS?</code> with an extension of 100 records</li> <li><code>APCONT</code> labeled as <code>?9?APCONT</code></li> <li><code>APVEND</code> labeled as <code>?9?APVEND</code></li> <li><code>GSTABL</code> labeled as <code>?9?GSTABL</code></li> <li><code>APDATE</code> labeled as <code>?9?APDATE</code></li> </ul> </li> <li> <p>Executes the <code>AP105</code> program (<code>RUN</code>).</p> </li> <li> <p>Create and Copy to History Table:</p> </li> <li>Sets local data:<ul> <li>At offset 400, stores the user ID (<code>?USER?</code>).</li> <li>At offset 410, stores the workstation ID (<code>?WS?</code>).</li> </ul> </li> <li>Loads the program <code>AP105A</code>.</li> <li>Declares the following files with shared access (<code>DISP-SHR</code>):<ul> <li><code>APSOGAS</code> labeled as <code>?9?APSOGAS</code></li> <li><code>APSOGSH</code> labeled as <code>?9?APSOGSH</code> (likely a history file)</li> </ul> </li> <li> <p>Executes the <code>AP105A</code> program (<code>RUN</code>).</p> </li> <li> <p>Clear Local Data:</p> </li> <li>Clears all local data (<code>LOCAL BLANK-*ALL</code>).</li> </ol>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP105PCL%20CLP%20SOGAS/AP105%20OCL/#business-rules","title":"Business Rules","text":"<p>The program enforces the following business rules:</p> <ol> <li>Dynamic File Labeling:</li> <li> <p>File names are dynamically constructed using the <code>?9?</code> parameter (substituted with <code>&amp;P$FGRP</code> from <code>AP105PCL.clp</code>), allowing the program to work with different file groups or environments.</p> </li> <li> <p>Temporary File Management:</p> </li> <li>Ensures the temporary file <code>?9?APTR?WS?</code> is cleared if it exists or created if it does not, with a predefined structure (500 records, 404 bytes, 10-byte key).</li> <li> <p>Builds an index file <code>?9?APTX?WS?</code> for efficient access to <code>?9?APTR?WS?</code> if needed.</p> </li> <li> <p>File Sharing:</p> </li> <li> <p>All files are opened with shared access (<code>DISP-SHR</code>), allowing concurrent access by other processes or users.</p> </li> <li> <p>History Tracking:</p> </li> <li> <p>The program copies data from <code>APSOGAS</code> to a history file <code>APSOGSH</code> using <code>AP105A</code>_`, indicating that processed payment data is archived for historical or audit purposes.</p> </li> <li> <p>User and Workstation Tracking:</p> </li> <li> <p>Stores the user ID and workstation ID in local data (offsets 400 and 410) for auditing or logging purposes during the history copy process.</p> </li> <li> <p>File Extension:</p> </li> <li>Extends the <code>APTRAN</code> file by 100 records, ensuring sufficient space for transaction data during processing.</li> </ol>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP105PCL%20CLP%20SOGAS/AP105%20OCL/#tables-used","title":"Tables Used","text":"<p>The program references the following files (tables):</p> <ol> <li>APSOGAS:</li> <li>Labeled as <code>?9?APSOGAS</code> (e.g., <code>&amp;P$FGRP</code> + 'APSOGAS').</li> <li> <p>Contains A/P SOGAS ACH payment data (likely source data for voucher entry/editing).</p> </li> <li> <p>APSGACH:</p> </li> <li>Labeled as <code>?9?APSGACH</code>.</li> <li> <p>Contains ACH-related data, likely for owner or vendor validation.</p> </li> <li> <p>APTRAN:</p> </li> <li>Labeled as <code>?9?APTR?WS?</code>.</li> <li> <p>Temporary transaction file, cleared or built with 500 records, 404 bytes, and a 10-byte key. Extended by 100 records during processing.</p> </li> <li> <p>APTX:</p> </li> <li>Labeled as <code>?9?APTX?WS?</code>.</li> <li> <p>Index file for <code>APTRAN</code>, with keys at positions 12 (5 bytes) and 385 (20 bytes).</p> </li> <li> <p>APCONT:</p> </li> <li>Labeled as <code>?9?APCONT</code>.</li> <li> <p>Likely contains control or configuration data for A/P processing.</p> </li> <li> <p>APVEND:</p> </li> <li>Labeled as <code>?9?APVEND</code>.</li> <li> <p>Vendor master file containing vendor details.</p> </li> <li> <p>GSTABL:</p> </li> <li>Labeled as <code>?9?GSTABL</code>.</li> <li> <p>Likely a general system table containing configuration or reference data.</p> </li> <li> <p>APDATE:</p> </li> <li>Labeled as <code>?9?APDATE</code>.</li> <li> <p>Likely contains date-related data for A/P processing (e.g., payment or due dates).</p> </li> <li> <p>APSOGSH:</p> </li> <li>Labeled as <code>?9?APSOGSH</code>.</li> <li>History file for archiving processed <code>APSOGAS</code> data.</li> </ol>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP105PCL%20CLP%20SOGAS/AP105%20OCL/#external-programs-called","title":"External Programs Called","text":"<p>The program invokes the following external programs:</p> <ol> <li>AP105:</li> <li>Loaded and executed with <code>LOAD AP105</code> and <code>RUN</code>.</li> <li> <p>Processes A/P voucher entry and editing for SOGAS ACH payment creation, using the files <code>APSOGAS</code>, <code>APSGACH</code>, <code>APTRAN</code>, <code>APCONT</code>, <code>APVEND</code>, <code>GSTABL</code>, and <code>APDATE</code>.</p> </li> <li> <p>AP105A:</p> </li> <li>Loaded and executed with <code>LOAD AP105A</code> and <code>RUN</code>.</li> <li>Copies data from <code>APSOGAS</code> to the history file <code>APSOGSH</code>, likely for audit or record-keeping purposes.</li> </ol>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP105PCL%20CLP%20SOGAS/AP105%20OCL/#summary","title":"Summary","text":"<ul> <li>Process Steps: Clear or build temporary files (<code>APTRAN</code>, <code>APTX</code>), load and run <code>AP105</code> for voucher entry/editing, set user/workstation data, load and run <code>AP105A</code> to copy to history file, and clear local data.</li> <li>Business Rules: Dynamic file naming with <code>?9?</code> parameter, shared file access, temporary file management, history tracking, and user/workstation logging.</li> <li>Tables Used: <code>APSOGAS</code> (payment data), <code>APSGACH</code> (ACH data), <code>APTRAN</code> (temporary transactions), <code>APTX</code> (index for <code>APTRAN</code>), <code>APCONT</code> (control data), <code>APVEND</code> (vendor data), <code>GSTABL</code> (system table), <code>APDATE</code> (date data), <code>APSOGSH</code> (history file).</li> <li>External Programs Called: <code>AP105</code> (voucher entry/editing), <code>AP105A</code> (history copy).</li> </ul> <p>This OCL program manages the file setup and execution of A/P voucher processing and archiving for SOGAS ACH payments in a System/36 environment, integrating with the IBM i system via dynamic file naming.</p>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP105PCL%20CLP%20SOGAS/AP105%20RPG/","title":"AP105 RPG","text":"<p>Let\u2019s analyze the provided System/36 RPG program <code>AP105.rpg36</code>, which is called by the OCL program <code>AP105.ocl36</code> via the <code>STRS36PRC</code> command in the CLP program <code>AP105PCL.clp</code>. This program is part of the A/P SOGAS ACH payment processing system, specifically for voucher entry and editing. Below, I\u2019ll outline the process steps, business rules, tables used, and external programs called.</p>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP105PCL%20CLP%20SOGAS/AP105%20RPG/#process-steps","title":"Process Steps","text":"<p>The RPG program <code>AP105.rpg36</code> performs the following steps:</p> <ol> <li>File and Data Structure Declarations:</li> <li>Defines files:<ul> <li><code>APSOGAS</code>: Input primary file (127 bytes, disk).</li> <li><code>APSGACH</code>: Input file with keyed access (64 bytes, 7-byte key, disk).</li> <li><code>APTRAN</code>: Update file with keyed access (404 bytes, 10-byte key, disk).</li> <li><code>APCONT</code>: Update file with keyed access (256 bytes, 2-byte key, disk).</li> <li><code>APVEND</code>: Input file with keyed access (579 bytes, 7-byte key, disk).</li> <li><code>APDATE</code>: Input file with keyed access (19 bytes, 10-byte key, disk).</li> </ul> </li> <li> <p>Defines data structures:</p> <ul> <li><code>CKDATE</code> (6 bytes) with subfields <code>CKDMM</code> (month), <code>CKDDD</code> (day), <code>CKDYY</code> (year).</li> <li>User Data Structure (UDS) for Local Data Area (LDA) with fields:</li> <li><code>CANCEL</code> (positions 100\u2013105)</li> <li><code>ERRORS</code> (position 106)</li> <li><code>DESC</code> (positions 107\u2013119)</li> <li><code>CANTAX</code> (position 120, Canadian tax upload flag)</li> <li><code>LDAWT</code> (positions 198\u2013199, wire transfer flag)</li> <li><code>Y2KCEN</code> (positions 509\u2013510, century, e.g., 19 for 1900s)</li> <li><code>Y2KCMP</code> (positions 511\u2013512, comparison year, e.g., 80)</li> </ul> </li> <li> <p>Initialization:</p> </li> <li>Initializes variables:<ul> <li><code>Z5</code> and <code>Z3</code> (5- and 3-digit numerics) to 0.</li> <li><code>MSG</code> and <code>MSG2</code> (40-character message fields) to blanks.</li> <li><code>PTYP</code> (process type) to 'SOGAS '.</li> <li>Clears indicators <code>50</code>, <code>51</code>, <code>53</code>, <code>60</code>, <code>61</code>, <code>55</code>, and <code>91</code>.</li> </ul> </li> <li> <p>If indicator <code>09</code> is off:</p> <ul> <li>Clears <code>TERMKY</code> (12 characters) and sets it to 'APTERM'.</li> <li>Clears <code>GSCKEY</code> (12 characters).</li> <li>Sets <code>POKEY</code> (11 characters) to '000'.</li> <li>Captures system time (<code>TIMDAT</code>, 12 digits) and extracts:</li> <li><code>SYTIME</code> (6-digit time).</li> <li><code>SYDATE</code> (6-digit date).</li> <li><code>SYDYMD</code> (YYYYMMDD format) by multiplying <code>SYDATE</code> by 10000.01.</li> <li><code>MONTH</code> (2 digits) and <code>YEAR</code> (2 digits) from <code>SYDATE</code>.</li> <li>If <code>CANTAX</code> = 'Y', sets indicator <code>54</code> on.</li> <li>Sets indicator <code>09</code> on.</li> </ul> </li> <li> <p>Retrieve Control Data:</p> </li> <li>Chains to <code>APCONT</code> using a hardcoded key <code>10</code> (indicator <code>50</code> on if not found).</li> <li>Sets <code>APGL</code> (A/P GL number) from <code>ACAPGL</code>.</li> <li> <p>Sets <code>BKGL</code> (bank GL number) from <code>ACCAGL</code>.</p> </li> <li> <p>Prepare Entry Number:</p> </li> <li>Builds a company entry key <code>COENT</code> (7 characters) by combining '10' and <code>ENT#</code> (entry number).</li> <li> <p>Sets <code>CHKAMT</code> (11.2 digits) to <code>ANCHAM</code> (check amount from <code>APSOGAS</code>).</p> </li> <li> <p>Process Dates and Invoice Data:</p> </li> <li>Builds invoice and due dates:<ul> <li>Constructs <code>YMD6</code> (6 digits) from <code>DUDMM</code> (month), <code>DUDDD</code> (day), and <code>DUDYY</code> (year) from <code>APSOGAS</code>.</li> <li>Converts system date <code>SYDYMD</code> to <code>MMDDYY</code> format (6 digits) by multiplying by 100.0001.</li> <li>Sets <code>INDT</code> (invoice date) to <code>MMDDYY</code>.</li> <li>Sets invoice number <code>INV#</code> to <code>ANCHNM</code> (check name) or <code>DESC</code> (description from LDA).</li> </ul> </li> <li>Validates invoice date (<code>INDT</code>):<ul> <li>Converts to <code>IYMD</code> (YYYYMMDD) by multiplying by 10000.01.</li> <li>Extracts century <code>IYY</code> (2 digits).</li> <li>If <code>IYY</code> &gt;= <code>Y2KCMP</code> (e.g., 80), sets <code>ICN</code> (century) to <code>Y2KCEN</code> (e.g., 19); otherwise, adds 1 to <code>Y2KCEN</code>.</li> <li>Builds <code>INDT8</code> (8-digit date) using <code>ICN</code> and <code>IYMD</code>.</li> <li>Subtracts 1 year from <code>INDT8</code> to get <code>CMPDT8</code>.</li> </ul> </li> <li> <p>Validates due date (<code>DUDT</code>):</p> <ul> <li>Converts <code>YMD6</code> to <code>DUDT</code> (MMDDYY) by multiplying by 100.0001.</li> <li>Extracts century <code>DYY</code> (2 digits).</li> <li>If <code>DYY</code> &gt;= <code>Y2KCMP</code>, sets <code>DCN</code> to <code>Y2KCEN</code>; otherwise, adds 1 to <code>Y2KCEN</code>.</li> <li>Builds <code>DUDT8</code> (8-digit date) using <code>DCN</code> and <code>YMD6</code>.</li> <li>Chains to <code>APDATE</code> using <code>DUDT8</code> as the key (<code>DATEKY</code>).</li> <li>If found (indicator <code>92</code> off), replaces <code>DUDT8</code> and <code>DUDT</code> with <code>ADNED8</code> (non-holiday/weekend due date from <code>APDATE</code>).</li> </ul> </li> <li> <p>Validate Vendor:</p> </li> <li>Chains to <code>APSGACH</code> using <code>ANOWNR</code> (owner number from <code>APSOGAS</code>) (indicator <code>99</code> on if not found).</li> <li>If not found, jumps to <code>SKIP1</code> tag.</li> <li>If found, builds <code>VNKEY</code> (7 characters) using '10' and <code>AGVEND</code> (vendor number from <code>APSGACH</code>).</li> <li>Chains to <code>APVEND</code> using <code>VNKEY</code> (indicator <code>53</code> on if not found).</li> <li>If not found, jumps to <code>SKIP1</code> tag.</li> <li>If found, moves vendor data to fields:<ul> <li><code>VNAM</code> (vendor name), <code>VAD1\u2013VAD4</code> (address lines).</li> </ul> </li> <li> <p>If <code>VNHOLD</code> = 'H', sets indicator <code>55</code> on (vendor on hold).</p> </li> <li> <p>Add Transaction Header:</p> </li> <li>Calls subroutine <code>HDRADD</code>:<ul> <li>Chains to <code>APTRAN</code> using <code>KEYENT</code> (entry key) (indicator <code>95</code> on if found).</li> <li>Sets indicator <code>70</code> on, writes header record (<code>EXCPTHEADER</code>), and sets <code>70</code> off.</li> </ul> </li> <li>Increments <code>NXLINE</code> (next line number, 3 digits) by 1.</li> <li>Writes detail record (<code>EXCPTDETAIL</code>).</li> <li> <p>Increments <code>ENT#</code> (entry number).</p> </li> <li> <p>Check and Update Entry Number:</p> </li> <li>If <code>ENT#</code> = 0 (indicator <code>60</code> on):<ul> <li>Builds <code>KEYENT</code> (10 characters) from <code>COENT</code> or '000' if not set.</li> <li>Chains to <code>APTRAN</code> using <code>KEYENT</code> (indicator <code>51</code> on if found).</li> <li>If found, writes <code>RELAPC</code> exception to release <code>APCONT</code> and jumps to <code>ENDS1</code>.</li> </ul> </li> <li> <p>If <code>ENT#</code> \u2260 0:</p> <ul> <li>Sets <code>RECSTS</code> to 'ADDNEW'.</li> <li>Sets <code>ENT#</code> to <code>ACNXTE</code> (next entry number from <code>APCONT</code>).</li> <li>Increments <code>ACNXTE</code> and <code>ENT#</code> unless <code>ENT#</code> \u2265 99999 (indicator <code>61</code> on), then resets <code>ACNXTE</code> to 1.</li> <li>Updates <code>COENT</code> with <code>ENT#</code>.</li> <li>Writes <code>APCONT</code> update (<code>EXCPT</code> with indicator <code>79</code>) and clears <code>79</code>.</li> </ul> </li> <li> <p>Initialize Fields:</p> </li> <li> <p>Clears or initializes fields for the next record:</p> <ul> <li><code>CNVO</code>, <code>PPCK</code>, <code>PCKD</code>, <code>IAMT</code>, <code>RTGL</code>, <code>RTPC</code>, <code>FRTL</code>, <code>SORN</code>, <code>SSRN</code>, <code>SVDSPC</code>, <code>POSQ</code>, <code>PRAM</code>, <code>FRAM</code>, <code>SVLNGL</code>, <code>GALN</code>, <code>RCPT</code>, <code>JQTY</code>, <code>AMT</code>, <code>DISC</code> (numeric fields to 0).</li> <li><code>SNGL</code>, <code>HOLD</code>, <code>HLDD</code>, <code>RTGLNM</code>, <code>DDES</code>, <code>EXGLNM</code>, <code>JOB#</code>, <code>CTYP</code>, <code>ITEM</code>, <code>CAID</code> (character fields to blanks).</li> <li><code>CLCD</code> to 'C' (open/closed status).</li> <li><code>DSPC</code> to 0 if <code>SVDSPC</code> = 0.</li> <li>Sets <code>EXGL</code> (expense GL) to 12010008 (if <code>CANTAX</code> \u2260 'Y') or 12010009 (if <code>CANTAX</code> = 'Y').</li> </ul> </li> <li> <p>Output Records:</p> <ul> <li>Writes to <code>APTRAN</code>:</li> <li>Header Record (<code>EXCPTHEADER</code>):<ul> <li>Record type 'A', company '10', <code>ENT#</code>, <code>Z3</code>, <code>VNVEND</code>, <code>CNVO</code>, <code>APGL</code>, <code>ANCHNM</code>, <code>INV#</code>, <code>DUDT</code> (twice), <code>SNGL</code>, hold status ('A' or 'H' based on <code>VNHOLD</code>), hold description, <code>PPCK</code>, <code>VNAM</code>, <code>VAD1\u2013VAD4</code>, <code>BKGL</code>, <code>CHKAMT</code>, <code>RTPC</code>, <code>ATRTGL</code>, <code>DUDT8</code> (twice), <code>FRTL</code>, <code>SORN</code>, <code>SSRN</code>, <code>CAID</code>, <code>VNTERM</code>, <code>PTYP</code>, <code>INV#</code>.</li> </ul> </li> <li>Detail Record (<code>EXCPTDETAIL</code>):<ul> <li><code>DDEL</code>, company '10', <code>ENT#</code>, <code>NXLINE</code>, <code>VNVEND</code>, expense company '10', <code>EXGL</code> (12010008 or 12010009), <code>INV#</code>, <code>CHKAMT</code>, <code>DISC</code>, <code>DSPC</code>, <code>ITEM</code>, <code>LNQTY</code>, <code>JOB#</code>, <code>CTYP</code>, <code>JQTY</code>, <code>PONO</code>, <code>GALN</code>, <code>RCPT</code>, <code>CLCD</code> ('C'), <code>POSQ</code>, <code>CHKAMT</code>, <code>FRAM</code>.</li> </ul> </li> <li>Updates <code>APCONT</code>:</li> <li>Updates <code>ACNXTE</code> (next entry number) if indicator <code>79</code> is on.</li> <li>Releases <code>APCONT</code> via <code>RELAPC</code> exception.</li> </ul> </li> <li> <p>Loop Control:</p> <ul> <li>Jumps to <code>SKIP1</code> tag on validation failures (e.g., <code>APSGACH</code> or <code>APVEND</code> not found).</li> <li>Continues processing <code>APSOGAS</code> records until the end of the file.</li> </ul> </li> </ol>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP105PCL%20CLP%20SOGAS/AP105%20RPG/#business-rules","title":"Business Rules","text":"<p>The program enforces the following business rules:</p> <ol> <li>Dynamic File Access:</li> <li> <p>Uses files dynamically labeled with a prefix (e.g., <code>?9?</code> from <code>AP105.ocl36</code>, derived from <code>&amp;P$FGRP</code> in <code>AP105PCL.clp</code>), supporting multiple file groups or environments.</p> </li> <li> <p>Vendor and Owner Validation:</p> </li> <li>Validates that <code>ANOWNR</code> from <code>APSOGAS</code> exists in <code>APSGACH</code> (indicator <code>99</code>).</li> <li>Validates that <code>AGVEND</code> from <code>APSGACH</code> exists in <code>APVEND</code> (indicator <code>53</code>).</li> <li> <p>Skips processing if either validation fails.</p> </li> <li> <p>Hold Status Handling:</p> </li> <li> <p>If <code>VNHOLD</code> = 'H' in <code>APVEND</code>, sets indicator <code>55</code> and marks the transaction header with 'H' and 'VENDOR ON HOLD' in the hold description; otherwise, uses 'A' and 'ON HOLD FOR ACH'.</p> </li> <li> <p>Due Date Adjustment:</p> </li> <li> <p>Replaces the due date (<code>DUDT8</code>) with a non-holiday/non-weekend date from <code>APDATE</code> (<code>ADNED8</code>) if found, ensuring payments are scheduled on valid business days.</p> </li> <li> <p>Invoice Description:</p> </li> <li> <p>Copies the invoice description from <code>DESC</code> (LDA) or <code>ANCHNM</code> (check name) to <code>INV#</code> for new records.</p> </li> <li> <p>Entry Number Management:</p> </li> <li>Manages entry numbers (<code>ENT#</code>, <code>ACNXTE</code>) to ensure unique transaction identifiers, resetting to 1 if <code>ENT#</code> reaches 99999.</li> <li> <p>Updates <code>APCONT</code> with the next entry number (<code>ACNXTE</code>).</p> </li> <li> <p>Canadian Tax Handling:</p> </li> <li> <p>If <code>CANTAX</code> = 'Y', uses expense GL 12010009; otherwise, uses 12010008.</p> </li> <li> <p>Transaction Structure:</p> </li> <li>Creates header and detail records in <code>APTRAN</code> for each valid <code>APSOGAS</code> record, populating fields like vendor details, GL accounts, amounts, and dates.</li> <li> <p>Ensures detail records are linked to headers via <code>ENT#</code> and <code>NXLINE</code>.</p> </li> <li> <p>Y2K Date Handling:</p> </li> <li>Adjusts dates for century compliance using <code>Y2KCEN</code> and <code>Y2KCMP</code> to determine whether to use the current or next century.</li> </ol>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP105PCL%20CLP%20SOGAS/AP105%20RPG/#tables-used","title":"Tables Used","text":"<p>The program uses the following files (tables):</p> <ol> <li>APSOGAS (Input Primary, 127 bytes):</li> <li>Fields:<ul> <li><code>ANOWNR</code> (1\u20137): Owner number.</li> <li><code>ANNAME</code> (8\u201342): Name.</li> <li><code>ANCHNM</code> (43\u201349): Check name.</li> <li><code>ANDATE</code> (50\u201359): Date (subfields: <code>CKDMM</code> 50\u201351, <code>CKDDD</code> 53\u201354, <code>CKDYY</code> 58\u201359).</li> <li><code>ANCHAM</code> (60\u201365, packed): Check amount.</li> <li><code>ANSTDT</code> (66\u201375): Start date.</li> <li><code>ANENTE</code> (76\u201385): Entry date.</li> <li><code>ANDUDT</code> (86\u201395): Due date (subfields: <code>DUDMM</code> 86\u201387, <code>DUDDD</code> 89\u201390, <code>DUDYY</code> 92\u201393).</li> </ul> </li> <li> <p>Source of payment data for voucher creation.</p> </li> <li> <p>APSGACH (Input, Keyed, 64 bytes, 7-byte key):</p> </li> <li>Fields:<ul> <li><code>AGOWNR</code> (1\u20137): Owner number.</li> <li><code>AGVEND</code> (8\u201312): Vendor number.</li> </ul> </li> <li> <p>Used to validate <code>ANOWNR</code> and retrieve <code>AGVEND</code>.</p> </li> <li> <p>APTRAN (Update, Keyed, 404 bytes, 10-byte key):</p> </li> <li>Header Fields:<ul> <li><code>ATHDEL</code> (1): Header delete flag.</li> <li><code>ATENSQ</code> (9\u201311): Entry sequence number.</li> <li><code>ATVEND</code> (12\u201316): Vendor number.</li> <li><code>ATAPGL</code> (24\u201331): A/P GL number.</li> <li><code>ATIDES</code> (42\u201366): Invoice description.</li> <li><code>ATINDT</code> (67\u201372): Invoice date.</li> <li><code>ATDUDT</code> (73\u201378): Due date.</li> <li><code>ATSNGL</code> (79): Single check flag.</li> <li><code>ATHOLD</code> (80): Hold flag.</li> <li><code>ATHLDD</code> (81\u2013105): Hold description.</li> <li><code>ATPAID</code> (106): Prepaid flag.</li> <li><code>ATPPCK</code> (107\u2013112): Prepaid check number.</li> <li><code>ATVNAM</code> (113\u2013142): Vendor name.</li> <li><code>ATVAD1\u2013ATVAD4</code> (143\u2013262): Address lines.</li> <li><code>ATBKGL</code> (263\u2013270): Bank GL number.</li> <li><code>ATIAMT</code> (271\u2013281): Invoice amount.</li> <li><code>ATRTGL</code> (282\u2013289): Retention GL.</li> <li><code>ATRTPC</code> (290\u2013295): Retention percentage.</li> <li><code>ATPCKD</code> (296\u2013301): Prepaid check date.</li> <li><code>ATFRTL</code> (326\u2013332): Freight to allocate.</li> <li><code>ATSORN</code> (348\u2013353): Sales order number.</li> <li><code>ATSSRN</code> (354\u2013356): Sales SRN number.</li> <li><code>ATCAID</code> (357\u2013362): Carrier ID.</li> <li><code>ATTERM</code> (363\u2013364): Vendor payment terms.</li> <li><code>ATPTYP</code> (365\u2013370): Process type.</li> <li><code>ATDSDT</code> (371\u2013376): Discount due date.</li> <li><code>ATINV#</code> (385\u2013404): Vendor invoice number.</li> </ul> </li> <li>Detail Fields:<ul> <li><code>ATDDEL</code> (1): Detail delete flag.</li> <li><code>ATENSQ</code> (9\u201311): Entry sequence number.</li> <li><code>ATVEND</code> (12\u201316): Vendor number.</li> <li><code>ATEXCO</code> (18\u201319): Expense company.</li> <li><code>ATEXGL</code> (20\u201327): Expense GL number.</li> <li><code>ATDDES</code> (28\u201352): Detail description.</li> <li><code>ATAMT</code> (53\u201358, packed): Detail line amount.</li> <li><code>ATDISC</code> (59\u201364, packed): Discount.</li> <li><code>ATDSPC</code> (65\u201369): Discount percentage.</li> <li><code>ATITEM</code> (79\u201391): Inventory item number.</li> <li><code>ATQTY</code> (92\u201397, packed): Inventory quantity.</li> <li><code>ATJOB#</code> (100\u2013105): Job number.</li> <li><code>ATCCOD</code> (108\u2013113): Job cost code.</li> <li><code>ATCTYP</code> (114\u2013115): Job cost type.</li> <li><code>ATJQTY</code> (116\u2013119, packed): Job cost quantity.</li> <li><code>ATPONO</code> (120\u2013125): Purchase order number.</li> <li><code>ATGALN</code> (126\u2013129, packed): Gallons.</li> <li><code>ATRCPT</code> (130\u2013136): Receipt number.</li> <li><code>ATCLCD</code> (137): Open/closed status.</li> <li><code>ATPOSQ</code> (138\u2013140): PO line sequence.</li> <li><code>ATPRAM</code> (141\u2013146, packed): Product amount.</li> <li><code>ATFRAM</code> (147\u2013150, packed): Freight amount.</li> </ul> </li> <li> <p>Stores transaction header and detail records.</p> </li> <li> <p>APCONT (Update, Keyed, 256 bytes, 2-byte key):</p> </li> <li>Fields:<ul> <li><code>ACDEL</code> (1): Delete flag.</li> <li><code>ACAPGL</code> (34\u201341): A/P GL number.</li> <li><code>ACCAGL</code> (42\u201349): Cash GL number.</li> <li><code>ACDSGL</code> (50\u201357): Discounts GL number.</li> <li><code>ACNXTE</code> (76\u201380): Next entry number.</li> <li><code>ACJCYN</code> (87): Job cost active flag.</li> <li><code>ACRTGL</code> (88\u201395): Retention GL number.</li> <li><code>ACPOYN</code> (96): PO active flag.</li> <li><code>ACEEGL</code> (97\u2013104): Employee expense GL number.</li> </ul> </li> <li> <p>Stores control data and manages entry numbers.</p> </li> <li> <p>APVEND (Input, Keyed, 579 bytes, 7-byte key):</p> </li> <li>Fields:<ul> <li><code>VNDEL</code> (1): Record code.</li> <li><code>VNCO</code> (2\u20133): Company number.</li> <li><code>VNVEND</code> (4\u20138): Vendor number.</li> <li><code>VNVNAM</code> (9\u201338): Vendor name.</li> <li><code>VNAD1\u2013VNAD4</code> (39\u2013158): Address lines.</li> <li><code>VNHOLD</code> (240): Hold invoices flag.</li> <li><code>VNSNGL</code> (241): Single check flag.</li> <li><code>VNEXGL</code> (254\u2013261): Expense GL and sub-account.</li> <li><code>VNTERM</code> (262\u2013263): AP terms code.</li> <li><code>VNCAID</code> (294\u2013299): Carrier ID.</li> <li><code>VNPRID</code> (384\u2013387, packed): ADP payroll ID.</li> <li><code>VNACLS</code> (388\u2013390): ACH class.</li> <li><code>VNACOS</code> (391): ACH checking or savings.</li> <li><code>VNARTE</code> (392\u2013400): ACH bank routing code.</li> <li><code>VNABK#</code> (401\u2013417): ACH bank account number.</li> </ul> </li> <li> <p>Used to validate and retrieve vendor details.</p> </li> <li> <p>APDATE (Input, Keyed, 19 bytes, 10-byte key):</p> </li> <li>Fields:<ul> <li><code>ADDEL</code> (1): Delete flag.</li> <li><code>ADCO</code> (2\u20133): Company.</li> <li><code>ADDUD8</code> (4\u201311): Calculated due date.</li> <li><code>ADNED8</code> (12\u201319): New due date (non-holiday/weekend).</li> </ul> </li> <li>Used to adjust due dates to valid business days.</li> </ol>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP105PCL%20CLP%20SOGAS/AP105%20RPG/#external-programs-called","title":"External Programs Called","text":"<ul> <li>None: The program does not explicitly call any external programs via <code>CALL</code> or other mechanisms. It relies on subroutines (<code>HDRADD</code>) and file operations.</li> </ul>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP105PCL%20CLP%20SOGAS/AP105%20RPG/#summary","title":"Summary","text":"<ul> <li>Process Steps: Declare files and data structures, initialize variables, retrieve control data, process dates and invoice numbers, validate vendors, adjust due dates, add header and detail records to <code>APTRAN</code>, manage entry numbers, and update <code>APCONT</code>.</li> <li>Business Rules: Validates owners and vendors, adjusts due dates for holidays/weekends, applies hold status for vendors, manages entry numbers, supports Canadian tax GL accounts, and ensures Y2K-compliant dates.</li> <li>Tables Used: <code>APSOGAS</code> (payment data), <code>APSGACH</code> (owner validation), <code>APTRAN</code> (transaction headers/details), <code>APCONT</code> (control data), <code>APVEND</code> (vendor data), <code>APDATE</code> (due date adjustments).</li> <li>External Programs Called: None.</li> </ul> <p>This RPG program processes <code>APSOGAS</code> records to create A/P vouchers in <code>APTRAN</code>, validates data, adjusts dates, and handles vendor hold status, preparing transactions for ACH payment export.</p>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP105PCL%20CLP%20SOGAS/AP105P%20RPG/","title":"AP105P RPG","text":"<p>Let\u2019s analyze the provided RPG program <code>AP105P.rpg</code> to extract the process steps, business rules, tables used, and external programs called. This program is called by the CLP program <code>AP105PCL.clp</code> and is part of the A/P SOGAS ACH payment processing system on IBM i.</p>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP105PCL%20CLP%20SOGAS/AP105P%20RPG/#process-steps","title":"Process Steps","text":"<p>The RPG program <code>AP105P.rpg</code> performs the following steps:</p> <ol> <li>File Declarations:</li> <li>Defines the following files:<ul> <li><code>AP105PSC</code>: Workstation file (screen display file).</li> <li><code>APSOGAS</code>: Input primary file (127 bytes, disk).</li> <li><code>APSGACH</code>: Input file with keyed access (64 bytes, 7-byte key, disk).</li> <li><code>APVEND</code>: Input file with keyed access (579 bytes, 7-byte key, disk).</li> <li><code>LIST132</code>: Output printer file (132 bytes).</li> </ul> </li> <li> <p>Defines the User Data Structure (UDS) for Local Data Area (LDA) fields:</p> <ul> <li><code>CANCEL</code> (positions 100\u2013105)</li> <li><code>ERRORS</code> (position 106)</li> <li><code>DESC</code> (positions 107\u2013119)</li> <li><code>CANTAX</code> (position 120, Canadian tax upload flag)</li> <li><code>UPTYPE</code> (position 121, positive/negative dollar values flag)</li> </ul> </li> <li> <p>Parameter Input:</p> </li> <li> <p>Accepts a single 1-character parameter <code>@FGRP</code> via <code>*ENTRY PLIST</code>.</p> </li> <li> <p>Initialization (Indicator 09 Off):</p> </li> <li> <p>If indicator <code>09</code> is off (likely controlled by file status or program logic):</p> <ul> <li>Initializes counters:</li> <li><code>COUNT</code> (5-digit numeric) to 0.</li> <li><code>ERRCNT</code> (5-digit numeric, error count) to 0.</li> <li><code>DUP</code> (5-digit numeric, duplicate count) to 0.</li> <li><code>DATES</code> (5-digit numeric) to 0.</li> <li><code>ERRORS</code> (LDA position 106) to blanks.</li> <li>Captures system time and date:</li> <li>Stores current time/date in <code>TIMDAT</code> (12 digits).</li> <li>Extracts time to <code>SYTIME</code> (6 digits).</li> <li>Extracts date to <code>SYDATE</code> (6 digits).</li> <li>Converts <code>SYDATE</code> to <code>SYDYMD</code> (YYYYMMDD format) by multiplying by 10000.01.</li> <li>Extracts <code>MONTH</code> (2 digits) and <code>YEAR</code> (2 digits) from <code>SYDATE</code>.</li> <li>Sets indicators:</li> <li>Sets indicator <code>09</code> and <code>51</code> on.</li> <li>If <code>CANTAX</code> = 'Y', sets indicator <code>54</code> on.</li> <li>If <code>UPTYPE</code> = 'T', sets indicator <code>55</code> on.</li> <li>If both <code>54</code> and <code>55</code> are off, sets indicator <code>56</code> on and sets <code>ERRORS</code> to 'Y', then turns off indicators <code>50</code> and <code>51</code>.</li> </ul> </li> <li> <p>Increment Counter:</p> </li> <li> <p>Increments <code>COUNT</code> by 1 for each record processed.</p> </li> <li> <p>Validation of <code>APSOGAS</code> Record:</p> </li> <li>Uses <code>ANOWNR</code> (owner number, positions 1\u20137) from <code>APSOGAS</code> to chain (lookup) in <code>APSGACH</code>.</li> <li>If the chain fails (indicator <code>99</code> on, record not found):<ul> <li>Increments <code>ERRCNT</code>.</li> <li>Sets indicator <code>50</code> on, <code>51</code> off.</li> <li>Jumps to <code>SKIP</code> tag (bypassing further processing for this record).</li> </ul> </li> <li> <p>If the chain succeeds (indicator <code>99</code> off):</p> <ul> <li>Builds a 7-character key <code>VNKEY</code> by combining a hardcoded '10' with <code>AGVEND</code> (vendor number) from <code>APSGACH</code>.</li> <li>Chains to <code>APVEND</code> using <code>VNKEY</code>.</li> <li>If the chain to <code>APVEND</code> fails (indicator <code>53</code> on, vendor not found):</li> <li>Sets indicator <code>50</code> on, <code>51</code> off.</li> <li>Sets <code>ERRORS</code> to 'Y'.</li> <li>Increments <code>ERRCNT</code>.</li> <li>Writes an exception output (<code>EXCPT</code>) to <code>LIST132</code>.</li> <li>Jumps to <code>SKIP</code> tag.</li> </ul> </li> <li> <p>Clear and Display Screen:</p> </li> <li>If indicator <code>50</code> is off, clears indicator <code>56</code>.</li> <li> <p>Executes <code>EXFMT</code> (write/read) for <code>SCREEN1</code> in the <code>AP105PSC</code> display file.</p> </li> <li> <p>Output to Printer:</p> </li> <li>Writes to <code>LIST132</code> (printer file) with fields:<ul> <li><code>ANOWNR</code> (positions 1\u201310)</li> <li><code>ERRCNT</code> (positions 11\u201317)</li> <li><code>ANNAME</code> (positions 18\u201355)</li> </ul> </li> </ol>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP105PCL%20CLP%20SOGAS/AP105P%20RPG/#business-rules","title":"Business Rules","text":"<p>The program enforces the following business rules:</p> <ol> <li>Owner Validation:</li> <li> <p>Each <code>APSOGAS</code> record\u2019s <code>ANOWNR</code> must exist in <code>APSGACH</code>. If not, an error is logged (<code>ERRCNT</code> incremented, <code>ERRORS</code> set to 'Y'), and processing skips to the next record.</p> </li> <li> <p>Vendor Validation:</p> </li> <li> <p>The vendor number (<code>AGVEND</code>) from <code>APSGACH</code> must exist in <code>APVEND</code>. If not, an error is logged (<code>ERRCNT</code> incremented, <code>ERRORS</code> set to 'Y'), and an exception report is generated.</p> </li> <li> <p>Error Handling:</p> </li> <li> <p>Errors are tracked via <code>ERRCNT</code> and the <code>ERRORS</code> flag in the LDA (position 106). If errors occur, the program may signal to the calling CLP (<code>AP105PCL</code>) to skip further processing (e.g., S/36 procedure <code>AP105</code>).</p> </li> <li> <p>Canadian Tax and Upload Type Checks:</p> </li> <li>If <code>CANTAX</code> = 'Y', sets indicator <code>54</code> to flag Canadian tax-related processing.</li> <li>If <code>UPTYPE</code> = 'T', sets indicator <code>55</code> to flag specific dollar value handling (positive/negative).</li> <li> <p>If neither condition is met (<code>54</code> and <code>55</code> off), sets <code>ERRORS</code> to 'Y' and indicator <code>56</code> on, indicating a validation failure.</p> </li> <li> <p>Dynamic File Processing:</p> </li> <li> <p>The program processes records from <code>APSOGAS</code> and validates against <code>APSGACH</code> and <code>APVEND</code>, ensuring data integrity for A/P SOGAS ACH payments.</p> </li> <li> <p>Reporting:</p> </li> <li>Outputs errors or processing results to a printer file (<code>LIST132</code>) for reporting, including owner number, error count, and name.</li> </ol>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP105PCL%20CLP%20SOGAS/AP105P%20RPG/#tables-used","title":"Tables Used","text":"<p>The program uses the following files (tables):</p> <ol> <li>APSOGAS (Input Primary, 127 bytes):</li> <li>Fields:<ul> <li><code>ANOWNR</code> (positions 1\u20137): Owner number.</li> <li><code>ANNAME</code> (positions 8\u201342): Name.</li> <li><code>ANCHNM</code> (positions 43\u201349): Check name.</li> <li><code>ANDATE</code> (positions 50\u201359): Date.</li> <li><code>ANCHAM</code> (positions 60\u201365, packed): Check amount.</li> <li><code>ANSTDT</code> (positions 66\u201375): Start date.</li> <li><code>ANENTE</code> (positions 76\u201385): Entry date.</li> <li><code>ANDUDT</code> (positions 86\u201395): Due date.</li> </ul> </li> <li> <p>Used as the primary input file for payment data.</p> </li> <li> <p>APSGACH (Input, Keyed, 64 bytes, 7-byte key):</p> </li> <li>Fields:<ul> <li><code>AGOWNR</code> (positions 1\u20137): Owner number.</li> <li><code>AGVEND</code> (positions 8\u201312): Vendor number.</li> </ul> </li> <li> <p>Used to validate <code>ANOWNR</code> from <code>APSOGAS</code>.</p> </li> <li> <p>APVEND (Input, Keyed, 579 bytes, 7-byte key):</p> </li> <li>Fields:<ul> <li><code>VNDEL</code> (position 1): Record code.</li> <li><code>VNCO</code> (positions 2\u20133): Company number.</li> <li><code>VNVEND</code> (positions 4\u20138): Vendor number.</li> <li><code>VNVNAM</code> (positions 9\u201338): Vendor name.</li> <li><code>VNAD1</code> to <code>VNAD4</code> (positions 39\u2013158): Address lines.</li> <li><code>VNHOLD</code> (position 240): Hold invoices flag.</li> <li><code>VNSNGL</code> (position 241): Single check flag.</li> <li><code>VNEXGL</code> (positions 254\u2013261): Expense GL and sub-account.</li> <li><code>VNTERM</code> (positions 262\u2013263): AP terms code.</li> <li><code>VNCAID</code> (positions 294\u2013299): Carrier ID.</li> <li><code>VNPRID</code> (positions 384\u2013387, packed): ADP payroll ID.</li> <li><code>VNACLS</code> (positions 388\u2013390): ACH class.</li> <li><code>VNACOS</code> (position 391): ACH checking or savings.</li> <li><code>VNARTE</code> (positions 392\u2013400): ACH bank routing code.</li> <li><code>VNABK#</code> (positions 401\u2013417): ACH bank account number.</li> </ul> </li> <li> <p>Used to validate vendors associated with <code>AGVEND</code> from <code>APSGACH</code>.</p> </li> <li> <p>LIST132 (Output, Printer, 132 bytes):</p> </li> <li> <p>Used to generate a report with <code>ANOWNR</code>, <code>ERRCNT</code>, and <code>ANNAME</code>.</p> </li> <li> <p>AP105PSC (Workstation, Display File):</p> </li> <li>Contains <code>SCREEN1</code> for interactive display (written and read via <code>EXFMT</code>).</li> </ol>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP105PCL%20CLP%20SOGAS/AP105P%20RPG/#external-programs-called","title":"External Programs Called","text":"<ul> <li>None: The program does not explicitly call any external programs via <code>CALL</code> or other mechanisms. It interacts with the display file <code>AP105PSC</code> and printer file <code>LIST132</code> but does not invoke other RPG or CL programs.</li> </ul>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP105PCL%20CLP%20SOGAS/AP105P%20RPG/#summary","title":"Summary","text":"<ul> <li>Process Steps: Declare files, initialize counters and LDA, process <code>APSOGAS</code> records, validate against <code>APSGACH</code> and <code>APVEND</code>, handle errors, display screen, and output to printer.</li> <li>Business Rules: Validates owner and vendor numbers, tracks errors in LDA, handles Canadian tax and upload type flags, and generates error reports.</li> <li>Tables Used: <code>APSOGAS</code> (payment data), <code>APSGACH</code> (owner validation), <code>APVEND</code> (vendor details), <code>LIST132</code> (printer output), <code>AP105PSC</code> (display file).</li> <li>External Programs Called: None.</li> </ul> <p>This RPG program validates A/P SOGAS ACH payment records, ensuring owners and vendors exist in the respective files, and reports errors via a printer file and interactive screen.</p>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP105PCL%20CLP%20SOGAS/AP105PCL%20CLP/","title":"AP105PCL CLP","text":"<p>Let\u2019s analyze the provided AS400 IBM i CLP (Control Language Program) <code>AP105PCL.clp</code> to extract the process steps, business rules, programs called, and tables used.</p>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP105PCL%20CLP%20SOGAS/AP105PCL%20CLP/#process-steps","title":"Process Steps","text":"<p>The program performs the following sequential steps:</p> <ol> <li>Declare Variables:</li> <li>Defines a parameter <code>&amp;P$FGRP</code> (1-character input parameter).</li> <li> <p>Declares character variables:</p> <ul> <li><code>&amp;APSOGAS</code> (10 characters)</li> <li><code>&amp;APSOGASH</code> (10 characters)</li> <li><code>&amp;APSGACH</code> (10 characters)</li> <li><code>&amp;APVEND</code> (10 characters)</li> <li><code>&amp;PARM9</code> (10 characters)</li> </ul> </li> <li> <p>Construct File Names:</p> </li> <li>Concatenates the input parameter <code>&amp;P$FGRP</code> with fixed strings to create file names:<ul> <li><code>&amp;APSOGAS</code> = <code>&amp;P$FGRP</code> + 'APSOGAS'</li> <li><code>&amp;APSOGASH</code> = <code>&amp;P$FGRP</code> + 'APSOGASH'</li> <li><code>&amp;APSGACH</code> = <code>&amp;P$FGRP</code> + 'APSGACH'</li> <li><code>&amp;APVEND</code> = <code>&amp;P$FGRP</code> + 'APVEND'</li> </ul> </li> <li> <p>Constructs a parameter string <code>&amp;PARM9</code> by concatenating ',,,,,,,,' with <code>&amp;P$FGRP</code>.</p> </li> <li> <p>Override Database Files:</p> </li> <li> <p>Overrides the logical files to point to the physical files in the library list (<code>*LIBL</code>):</p> <ul> <li><code>APSOGAS</code> to <code>&amp;APSOGAS</code> (first member)</li> <li><code>APSOGASH</code> to <code>&amp;APSOGASH</code> (first member)</li> <li><code>APSGACH</code> to <code>&amp;APSGACH</code> (first member)</li> <li><code>APVEND</code> to <code>&amp;APVEND</code> (first member)</li> </ul> </li> <li> <p>Call Program:</p> </li> <li> <p>Calls the program <code>AP105P</code>, passing the parameter <code>&amp;P$FGRP</code>.</p> </li> <li> <p>Check Local Data Area (LDA):</p> </li> <li>Checks if position 106 of the LDA (Local Data Area) contains 'Y'.</li> <li> <p>If true:</p> <ul> <li>Clears the LDA (positions 1 to 512) to blanks.</li> <li>Returns (exits the program).</li> </ul> </li> <li> <p>Start S/36 Procedure:</p> </li> <li>If the LDA condition is not met, calls the S/36 procedure <code>AP105</code> with the parameter <code>&amp;PARM9</code> (',,,,,,,,' + <code>&amp;P$FGRP</code>).</li> <li> <p>Note: A commented-out line suggests a hardcoded parameter <code>',,,,,,,,G'</code> was previously used.</p> </li> <li> <p>Clean Up:</p> </li> <li>Deletes all file overrides (<code>DLTOVR FILE(*ALL)</code>).</li> <li> <p>Clears the LDA (positions 1 to 512) to blanks.</p> </li> <li> <p>End Program:</p> </li> <li>Ends the program with <code>ENDPGM</code>.</li> </ol>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP105PCL%20CLP%20SOGAS/AP105PCL%20CLP/#business-rules","title":"Business Rules","text":"<p>The program includes the following business rules:</p> <ol> <li>Dynamic File Naming:</li> <li> <p>File names are dynamically constructed by prefixing the input parameter <code>&amp;P$FGRP</code> to fixed file suffixes (<code>APSOGAS</code>, <code>APSOGASH</code>, <code>APSGACH</code>, <code>APVEND</code>). This implies the program supports multiple file groups or environments based on the input parameter.</p> </li> <li> <p>Conditional Logic Based on LDA:</p> </li> <li> <p>If position 106 of the LDA contains 'Y', the program clears the LDA and exits without invoking the S/36 procedure. This suggests that <code>AP105P</code> may set this flag to indicate a condition (e.g., error or completion) that skips further processing.</p> </li> <li> <p>File Overrides:</p> </li> <li> <p>The program ensures that file operations use the correct files by overriding them to the dynamically named files in the library list, ensuring flexibility across different file groups or environments.</p> </li> <li> <p>S/36 Compatibility:</p> </li> <li>The use of <code>STRS36PRC</code> indicates compatibility with System/36 procedures, suggesting this program may be part of a legacy system or migration to IBM i.</li> </ol>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP105PCL%20CLP%20SOGAS/AP105PCL%20CLP/#programs-called","title":"Programs Called","text":"<p>The program invokes the following:</p> <ol> <li>AP105P:</li> <li>A program called via <code>CALL PGM(AP105P)</code> with the parameter <code>&amp;P$FGRP</code>.</li> <li> <p>Likely an IBM i program that processes A/P SOGAS ACH payments, possibly setting the LDA flag at position 106.</p> </li> <li> <p>AP105:</p> </li> <li>A System/36 procedure called via <code>STRS36PRC PRC(AP105)</code> with the parameter <code>&amp;PARM9</code> (',,,,,,,,' + <code>&amp;P$FGRP</code>).</li> <li>This procedure likely performs additional processing for A/P SOGAS ACH payments in a System/36 environment.</li> </ol>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP105PCL%20CLP%20SOGAS/AP105PCL%20CLP/#tables-used","title":"Tables Used","text":"<p>The program references the following files (tables):</p> <ol> <li>APSOGAS:</li> <li>Overridden to <code>&amp;APSOGAS</code> (constructed as <code>&amp;P$FGRP</code> + 'APSOGAS').</li> <li> <p>Likely contains A/P SOGAS ACH payment data.</p> </li> <li> <p>APSOGASH:</p> </li> <li>Overridden to <code>&amp;APSOGASH</code> (constructed as <code>&amp;P$FGRP</code> + 'APSOGASH').</li> <li> <p>Likely a header file or summary data for A/P SOGAS ACH payments.</p> </li> <li> <p>APSGACH:</p> </li> <li>Overridden to <code>&amp;APSGACH</code> (constructed as <code>&amp;P$FGRP</code> + 'APSGACH').</li> <li> <p>Likely contains ACH-specific data for A/P SOGAS payments.</p> </li> <li> <p>APVEND:</p> </li> <li>Overridden to <code>&amp;APVEND</code> (constructed as <code>&amp;P$FGRP</code> + 'APVEND').</li> <li>Likely a vendor master file containing vendor details for A/P payments.</li> </ol> <p>These files are accessed from the library list (<code>*LIBL</code>) and use the first member (<code>*FIRST</code>).</p>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP105PCL%20CLP%20SOGAS/AP105PCL%20CLP/#summary","title":"Summary","text":"<ul> <li>Process Steps: Declare variables, construct file names, override files, call <code>AP105P</code>, check LDA, call S/36 procedure <code>AP105</code> (if LDA condition not met), clean up overrides, clear LDA, and end.</li> <li>Business Rules: Dynamic file naming based on <code>&amp;P$FGRP</code>, conditional exit based on LDA position 106, file overrides for flexibility, and S/36 compatibility.</li> <li>Programs Called: <code>AP105P</code> (IBM i program), <code>AP105</code> (System/36 procedure).</li> <li>Tables Used: <code>APSOGAS</code>, <code>APSOGASH</code>, <code>APSGACH</code>, <code>APVEND</code>.</li> </ul> <p>This program serves as a wrapper to check and process A/P SOGAS ACH payment files, bridging IBM i and System/36 environments.</p>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP200%20OCL%20Convert%20Voucher%20to%20Payable/AP200%20Summary%20Merge%201%262/","title":"Function Requirement Document: Process Accounts Payable Transactions and Post to General Ledger and Inventory","text":""},{"location":"accounts-payable/01%20Voucher%20Entry/AP200%20OCL%20Convert%20Voucher%20to%20Payable/AP200%20Summary%20Merge%201%262/#purpose","title":"Purpose","text":"<p>To process Accounts Payable (A/P) transactions, create and manage vouchers, generate general ledger journal entries, summarize A/P entries, post invoice details to inventory receipts, and produce detailed financial and diagnostic reports. This encompasses the end-to-end processing of A/P transactions, including voucher creation, journal entry generation, summarization, and posting to inventory receipts.</p>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP200%20OCL%20Convert%20Voucher%20to%20Payable/AP200%20Summary%20Merge%201%262/#components","title":"Components","text":"<p>The system consists of three interconnected RPG programs: 1. AP200 (Purchase Register): Processes A/P transactions, creates vouchers, updates related files, and generates journal entries and a Purchase Register report. 2. AP205 (Purchase Journal): Summarizes A/P journal entries and generates general ledger entries and a Purchase Journal report. 3. AP210 (A/P to Inventory Posting): Posts A/P invoice details to inventory receipt records, updating quantities and amounts.</p>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP200%20OCL%20Convert%20Voucher%20to%20Payable/AP200%20Summary%20Merge%201%262/#inputs","title":"Inputs","text":"<ul> <li>Purchase Journal Date (<code>JRDATE</code>): MMDDYY format, required.</li> <li>Cash Disbursements Date (<code>CDDATE</code>): MMDDYY format, required if prepaid/ACH/wire/employee transactions exist.</li> <li>Purchase Journal Period/Year (<code>KYPD</code>, <code>KYPDYY</code>): Required if 13 accounting periods are enabled.</li> <li>Cash Disbursements Period/Year (<code>CDPD</code>, <code>CDPDYY</code>): Required if 13 periods and prepaid transactions exist.</li> <li>APTRAN: Transaction file with header (company, vendor, invoice, dates, hold codes, sales order, carrier ID) and detail (expense G/L, amount, discount, gallons, receipt number, purchase order) records.</li> <li>APCONT: A/P control file (company name, journal number, next voucher number).</li> <li>APVEND: Vendor master file (year-to-date purchases, balance).</li> <li>APOPENH, APOPEND, APOPENV: Open A/P files for voucher records.</li> <li>APINVH: Invoice header file for invoice details.</li> <li>FRCINH, FRCFBH: Freight invoice and override header files for A/P status.</li> <li>POFILEH, POFILED: Purchase order files.</li> <li>APPJJR: Journal register file for input to summarization.</li> <li>AP205S: Sort/index file for <code>APPJJR</code>.</li> <li>INFIL1, INTZH1: Inventory receipt and holding files for invoice posting.</li> <li>Control Files: <code>GSCONT</code> (system controls), <code>GLCONT</code> (G/L controls), <code>GSTABL</code> (period end dates).</li> <li>System Date and Time: For date conversions and reporting.</li> </ul>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP200%20OCL%20Convert%20Voucher%20to%20Payable/AP200%20Summary%20Merge%201%262/#outputs","title":"Outputs","text":"<ul> <li>APPJJR: Journal register with G/L entries (A/P, expense, intercompany).</li> <li>APPYTR: Payment transaction records for prepaid/ACH/wire/employee/utility vouchers.</li> <li>APHISTH, APHISTD, APHISTV: History files for canceled vouchers.</li> <li>TEMGEN: General ledger entries (detailed and summarized).</li> <li>APOPENH, APOPEND, APOPENV: Updated open A/P records.</li> <li>APVEND: Updated vendor balances.</li> <li>APINVH: Updated invoice headers.</li> <li>FRCINH, FRCFBH: Updated freight A/P status.</li> <li>POFILEH, POFILED: Updated purchase order files (if enabled).</li> <li>INFIL1, INTZH1: Updated inventory receipt records.</li> <li>APPRINT (AP200, AP205): Purchase Register and Purchase Journal reports.</li> <li>APLIST: Diagnostic report for inventory posting.</li> </ul>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP200%20OCL%20Convert%20Voucher%20to%20Payable/AP200%20Summary%20Merge%201%262/#process-steps","title":"Process Steps","text":""},{"location":"accounts-payable/01%20Voucher%20Entry/AP200%20OCL%20Convert%20Voucher%20to%20Payable/AP200%20Summary%20Merge%201%262/#1-validate-input-parameters","title":"1. Validate Input Parameters","text":"<ul> <li>Validate <code>JRDATE</code> and <code>CDDATE</code> for correct format (MMDDYY) and fiscal year compliance using <code>GLCONT</code> (<code>GCLSYR</code>, <code>GCFFMO</code>).</li> <li>If 13 accounting periods enabled (<code>GX13GL = 'Y'</code> in <code>GSCONT</code>), validate <code>KYPD</code> (1\u201313) and <code>CDPD</code> (1\u201313) against period end dates in <code>GSTABL</code> (<code>TBPDDT</code>).</li> <li>Check for prepaid/ACH/wire/employee transactions (<code>ATPAID = 'P', 'A', 'W', 'E'</code>) in <code>APTRAN</code> to determine if <code>CDDATE</code> is required.</li> </ul>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP200%20OCL%20Convert%20Voucher%20to%20Payable/AP200%20Summary%20Merge%201%262/#2-initialize-system","title":"2. Initialize System","text":"<ul> <li>Convert journal date (<code>JRDATE</code>) to Y2K-compliant format (e.g., <code>JRYMD</code>, <code>JRYM8</code>).</li> <li>Convert <code>JRDATE</code> to YYYYMMDD (<code>PJYMD</code>) with Y2K-compliant century (19xx if year \u2265 80, else 20xx).</li> <li>Retrieve company details (<code>APCONT</code>) and initialize totals, counters, and separators.</li> <li>Retrieve next journal (<code>ACJRNL</code>) and voucher numbers (<code>ACNXVO</code>) from <code>APCONT</code>.</li> <li>Set journal ID (<code>JRNID</code>) to <code>'PJ'</code>, <code>'WT'</code>, or <code>'EE'</code> based on transaction type.</li> </ul>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP200%20OCL%20Convert%20Voucher%20to%20Payable/AP200%20Summary%20Merge%201%262/#3-process-ap-transactions-ap200","title":"3. Process A/P Transactions (AP200)","text":"<ul> <li>Read <code>APTRAN</code> header and detail records.</li> <li>For each header:</li> <li>Skip if deleted (<code>ATHDEL = 'D'</code>); clear <code>FRAPST</code> in <code>FRCINH</code>/<code>FRCFBH</code> if <code>'Y'</code>.</li> <li>Assign voucher numbers (<code>NXTVO</code>) for non-canceled, non-100% retention vouchers.</li> <li>Set flags for prepaid (<code>P</code>), ACH (<code>A</code>), wire (<code>W</code>), employee expense (<code>E</code>), utility auto-pay (<code>U</code>), single check (<code>ATSNGL = 'S'</code>), or hold (<code>ATHOLD = 'H', 'A', 'W', 'E', 'U'</code>).</li> <li>Write payment transactions (<code>APPYTR</code>) for prepaid, ACH, wire, employee, or utility auto-pay vouchers.</li> <li>Calculate retention amount (<code>ATRTAM = ATAMT * ATRTPC / 100</code>) if <code>ATRTPC \u2260 0</code>.</li> <li>For each detail:</li> <li>Calculate discounts (<code>ATDISC = ATAMT * (ATDSPC / 100)</code>) if discount percent is non-zero AND <code>ATDISC = 0</code>.</li> <li>Handle retentions: compute retention amount (<code>ATRTAM = ATAMT * (ATRTPC / 100)</code>), adjust <code>ATAMT</code>, and set retention discount (<code>ATRTDS</code>). For 100% retention, set <code>ATAMT = 0</code> and <code>ATRTAM = original ATAMT</code>.</li> <li>Update level 1 totals (<code>L1AMT</code>, <code>L1DISC</code>, <code>L1RTAM</code>, <code>L1RTDS</code>, <code>L1PAMT</code>, <code>L1FAMT</code>).</li> <li>Generate intercompany journal entries (<code>APPJJR</code>) if company numbers differ (<code>ATCONO \u2260 ATEXCO</code>).</li> <li>Update P/O files (<code>POFILEH</code>, <code>POFILED</code>) if enabled (<code>ACPOYN = 'Y'</code>) with amounts (<code>POAPPU</code>, <code>PDAPV$</code>) and receipt data (<code>PDRCQT</code>, <code>PDRCDT</code>, <code>PDCOMP</code>).</li> <li>Update open A/P (<code>APOPENH</code>, <code>APOPEND</code>, <code>APOPENV</code>), vendor (<code>APVEND</code>), and invoice (<code>APINVH</code>) files.</li> <li>Write history records (<code>APHISTH</code>, <code>APHISTD</code>, <code>APHISTV</code>) for canceled vouchers.</li> <li>Update vendor totals (<code>VN$YTD</code>, <code>VNPURC</code>, <code>VNCBAL</code>) in <code>APVEND</code>.</li> <li>Accumulate company totals (<code>L2AMT</code>, <code>L2DISC</code>, <code>L2PAMT</code>, <code>L2FAMT</code>).</li> <li>Produce Purchase Register report (<code>APPRINT</code>) with voucher details, totals, and special fields (sales order, carrier ID, process type).</li> </ul>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP200%20OCL%20Convert%20Voucher%20to%20Payable/AP200%20Summary%20Merge%201%262/#4-summarize-journal-entries-ap205","title":"4. Summarize Journal Entries (AP205)","text":"<ul> <li>Read <code>APPJJR</code> records via <code>AP205S</code> sort file.</li> <li>Summarize A/P entries (<code>PJTYPE = 'AP      '</code>) into a single <code>TEMGEN</code> record per voucher.</li> <li>Write detailed <code>TEMGEN</code> records for non-A/P entries (expense, intercompany).</li> <li>Adjust negative amounts: negate and switch debit (<code>D</code>) to credit (<code>C</code>) or vice versa.</li> <li>Accumulate company-level debit (<code>L4DR</code>) and credit (<code>L4CR</code>) totals.</li> <li>Produce Purchase Journal report (<code>APPRINT</code>) with journal entries, totals, and gallons/receipt details.</li> </ul>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP200%20OCL%20Convert%20Voucher%20to%20Payable/AP200%20Summary%20Merge%201%262/#5-post-to-inventory-receipts-ap210","title":"5. Post to Inventory Receipts (AP210)","text":"<ul> <li>Read <code>APTRAN</code> detail records with receipt number (<code>APREC#</code>).</li> <li>Skip records with sales order (<code>ATSORN \u2260 *ZERO</code>) or deleted status (<code>APHDEL = 'D'</code>, <code>APDDEL = 'D'</code>).</li> <li>Match receipt number in <code>INFIL1</code> or <code>INTZH1</code>:</li> <li>If exact match (<code>APGAL = IHNQTY + IHNQTF - IHAPTQ - IHAPTF</code>), update record.</li> <li>If no exact match, find record with sufficient gallons (<code>APGAL &lt; RNQTY</code>).</li> <li>If no sufficient gallons, update first record.</li> <li>Update <code>INFIL1</code> or <code>INTZH1</code> with invoice date (<code>JRYMD</code>), G/L number (<code>APGL</code>), journal number (<code>JR#</code>), quantities (<code>IHAPTQ</code>, <code>IHAPTF</code>), dollars (<code>IHAPTD</code>), invoice number (<code>APINVN</code>), PO number (<code>IHPONO</code>), and close code (<code>IHCLCD = 'O' or 'C'</code>).</li> <li>Produce diagnostic report (<code>APLIST</code>) with input and updated fields.</li> </ul>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP200%20OCL%20Convert%20Voucher%20to%20Payable/AP200%20Summary%20Merge%201%262/#business-rules","title":"Business Rules","text":""},{"location":"accounts-payable/01%20Voucher%20Entry/AP200%20OCL%20Convert%20Voucher%20to%20Payable/AP200%20Summary%20Merge%201%262/#validation","title":"Validation","text":"<ul> <li>Dates must be valid and within the current fiscal year (<code>GCLSYR</code>, <code>GCFFMO</code>).</li> <li>Periods (1\u201313) must match <code>GSTABL</code> boundaries if 13 periods enabled.</li> <li><code>CDDATE</code> required only if prepaid/ACH/wire/employee transactions exist.</li> </ul>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP200%20OCL%20Convert%20Voucher%20to%20Payable/AP200%20Summary%20Merge%201%262/#voucher-management","title":"Voucher Management","text":"<ul> <li>Assign unique voucher numbers (<code>NXTVO</code>) for non-canceled, non-100% retention, and retention vouchers.</li> <li>Support payment types: prepaid (<code>P</code>), ACH (<code>A</code>), wire (<code>W</code>), employee expense (<code>E</code>), utility auto-pay (<code>U</code>).</li> <li>Mark canceled vouchers (<code>ATCNVO \u2260 *ZEROS</code>) as deleted in open A/P files and write to history files.</li> <li>Hold codes (<code>H</code>, <code>A</code>, <code>W</code>, <code>E</code>, <code>U</code>) affect voucher processing.</li> </ul>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP200%20OCL%20Convert%20Voucher%20to%20Payable/AP200%20Summary%20Merge%201%262/#discounts-and-retentions","title":"Discounts and Retentions","text":"<ul> <li>Calculate discounts if <code>ATDSPC \u2260 0</code> and <code>ATDISC = 0</code> (both conditions must be true).</li> <li>For retentions (<code>ATRTPC \u2260 0</code>), compute <code>ATRTAM</code> and adjust <code>ATAMT</code>; for 100% retention, set <code>ATAMT = 0</code> and <code>ATRTAM = original ATAMT</code>.</li> <li>Create separate retention voucher if not 100% retention.</li> </ul>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP200%20OCL%20Convert%20Voucher%20to%20Payable/AP200%20Summary%20Merge%201%262/#freight-handling","title":"Freight Handling","text":"<ul> <li>Clear <code>FRAPST</code> in <code>FRCINH</code> or <code>FRCFBH</code> for deleted vouchers if previously flagged (<code>FRAPST = 'Y'</code>).</li> <li>Prioritize <code>FRCFBH</code> over <code>FRCINH</code> for freight status checks.</li> </ul>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP200%20OCL%20Convert%20Voucher%20to%20Payable/AP200%20Summary%20Merge%201%262/#intercompany-transfers","title":"Intercompany Transfers","text":"<ul> <li>Generate <code>APPJJR</code> entries for intercompany transactions (<code>ATCONO \u2260 ATEXCO</code>) using intercompany G/L accounts (<code>ACICGL</code>).</li> <li>Generate debit/credit entries for <code>ATCONO \u2260 ATEXCO</code>.</li> </ul>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP200%20OCL%20Convert%20Voucher%20to%20Payable/AP200%20Summary%20Merge%201%262/#purchase-orders","title":"Purchase Orders","text":"<ul> <li>Update <code>POFILEH</code>/<code>POFILED</code> if <code>ACPOYN = 'Y'</code> and <code>ATPONO \u2260 blanks</code>.</li> </ul>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP200%20OCL%20Convert%20Voucher%20to%20Payable/AP200%20Summary%20Merge%201%262/#journal-summarization","title":"Journal Summarization","text":"<ul> <li>Summarize A/P entries into a single <code>TEMGEN</code> record with fixed description.</li> <li>Negate negative amounts and adjust debit/credit codes accordingly.</li> </ul>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP200%20OCL%20Convert%20Voucher%20to%20Payable/AP200%20Summary%20Merge%201%262/#inventory-posting","title":"Inventory Posting","text":"<ul> <li>Skip posting if sales order exists or records are deleted.</li> <li>Match receipts exactly, by sufficient gallons, or use first record if no match.</li> <li>Update inventory records with A/P details and set close status based on <code>APCLCD</code>.</li> </ul>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP200%20OCL%20Convert%20Voucher%20to%20Payable/AP200%20Summary%20Merge%201%262/#y2k-compliance","title":"Y2K Compliance","text":"<ul> <li>Convert dates to 8-digit format using century (19xx if year \u2265 80, else 20xx) based on <code>Y2KCMP = 1980</code>.</li> </ul>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP200%20OCL%20Convert%20Voucher%20to%20Payable/AP200%20Summary%20Merge%201%262/#reporting","title":"Reporting","text":"<ul> <li>Generate Purchase Register (<code>AP200</code>) with voucher, sales order, carrier ID, and process type details.</li> <li>Generate Purchase Journal (<code>AP205</code>) with summarized A/P and detailed non-A/P entries, including gallons/receipt.</li> <li>Generate diagnostic report (<code>AP210</code>) for inventory posting verification.</li> <li>Include sales order (<code>ATSORN</code>), sequence (<code>ATSSRN</code>), carrier ID (<code>ATCAID</code>), process type (<code>ATPTYP</code>), and discount due date (<code>ATDSDT</code>) in reports.</li> </ul>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP200%20OCL%20Convert%20Voucher%20to%20Payable/AP200%20Summary%20Merge%201%262/#calculations","title":"Calculations","text":""},{"location":"accounts-payable/01%20Voucher%20Entry/AP200%20OCL%20Convert%20Voucher%20to%20Payable/AP200%20Summary%20Merge%201%262/#date-conversion","title":"Date Conversion","text":"<ul> <li><code>YYYYMMDD = JRDATE * 10000.01</code>, century set to 19 if year \u2265 1980, else 20.</li> <li>Alternative: <code>YYYYMMDD = MMDDYY * 10000.01</code>, with century (19xx if year \u2265 80, else 20xx).</li> </ul>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP200%20OCL%20Convert%20Voucher%20to%20Payable/AP200%20Summary%20Merge%201%262/#financial-calculations","title":"Financial Calculations","text":"<ul> <li>Discount: <code>ATDISC = ATAMT * (ATDSPC / 100)</code> if <code>ATDSPC \u2260 0</code> and <code>ATDISC = 0</code>.</li> <li>Retention Amount: <code>ATRTAM = ATAMT * (ATRTPC / 100)</code>.</li> <li>Remaining Quantity (Inventory): <code>RNQTY = IHNQTY + IHNQTF - IHAPTQ - IHAPTF</code>.</li> </ul>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP200%20OCL%20Convert%20Voucher%20to%20Payable/AP200%20Summary%20Merge%201%262/#totals","title":"Totals","text":"<ul> <li>Voucher Level: <code>L1AMT += ATAMT</code>, <code>L1DISC += ATDISC</code>, <code>L1RTAM += ATRTAM</code>, <code>L1RTDS += ATRTDS</code>, <code>L1PAMT += ATPRAM</code>, <code>L1FAMT += ATFRAM</code>.</li> <li>Company Level: <code>L2AMT += L1AMT</code>, <code>L2DISC += L1DISC</code>, <code>L2PAMT += L1PAMT</code>, <code>L2FAMT += L1FAMT</code>.</li> </ul>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP200%20OCL%20Convert%20Voucher%20to%20Payable/AP200%20Summary%20Merge%201%262/#constraints","title":"Constraints","text":"<ul> <li>Purchase order updates (<code>POFILEH</code>, <code>POFILED</code>) are controlled by <code>ACPOYN = 'Y'</code> flag.</li> <li><code>APLIST</code> is temporary for diagnostic purposes and may be removed.</li> <li>13-period accounting supported if <code>KYYYPD \u2260 0</code>.</li> <li>System supports various transaction types including utility auto-pay transactions.</li> </ul>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP200%20OCL%20Convert%20Voucher%20to%20Payable/AP200%20Summary%20Merge%201%262/#error-handling","title":"Error Handling","text":"<ul> <li>Validate all input parameters before processing.</li> <li>Handle missing or invalid data gracefully.</li> <li>Provide diagnostic reporting for inventory posting verification.</li> <li>Maintain audit trail through history files for canceled vouchers.</li> </ul>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP200%20OCL%20Convert%20Voucher%20to%20Payable/AP200%20Summary%20Purchase%20Journal/","title":"AP200 Summary Purchase Journal","text":""},{"location":"accounts-payable/01%20Voucher%20Entry/AP200%20OCL%20Convert%20Voucher%20to%20Payable/AP200%20Summary%20Purchase%20Journal/#list-of-use-cases-implemented-by-the-ap200-call-stack","title":"List of Use Cases Implemented by the AP200 Call Stack","text":"<p>The <code>AP200</code> call stack, consisting of the OCL procedure (<code>AP200.ocl36.txt</code>), the parameter prompt program (<code>AP200P.rpg36.txt</code>), and the main processing program (<code>AP200.rpg36.txt</code>), implements the following primary use case:</p> <ol> <li>Generate Purchase Journal and Update A/P Records:</li> <li>This use case involves prompting for and validating input parameters (dates and accounting periods), processing Accounts Payable (A/P) transactions, generating journal entries, updating open A/P, vendor, purchase order (P/O), and freight files, and producing a Purchase Register report. It handles various transaction types (e.g., prepaid, ACH, wire transfer, employee expense, utility auto-pay), cancellations, retentions, and intercompany transfers, ensuring accurate financial and inventory tracking.</li> </ol> <p>This is the primary use case, as the programs collectively form a cohesive workflow for managing the A/P Purchase Journal process, from parameter input to transaction processing and reporting.</p>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP200%20OCL%20Convert%20Voucher%20to%20Payable/AP200%20Summary%20Purchase%20Journal/#function-requirement-document","title":"Function Requirement Document","text":""},{"location":"accounts-payable/01%20Voucher%20Entry/AP200%20OCL%20Convert%20Voucher%20to%20Payable/AP200%20Summary%20Purchase%20Journal/#function-requirement-document-generate-purchase-journal-and-update-ap-records","title":"Function Requirement Document: Generate Purchase Journal and Update A/P Records","text":""},{"location":"accounts-payable/01%20Voucher%20Entry/AP200%20OCL%20Convert%20Voucher%20to%20Payable/AP200%20Summary%20Purchase%20Journal/#purpose","title":"Purpose","text":"<p>The function processes Accounts Payable (A/P) transactions to generate Purchase Journal entries, update open A/P, vendor, purchase order (P/O), and freight files, and produce a Purchase Register report. It validates input parameters and handles transaction types (prepaid, ACH, wire transfer, employee expense, utility auto-pay), cancellations, retentions, and intercompany transfers.</p>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP200%20OCL%20Convert%20Voucher%20to%20Payable/AP200%20Summary%20Purchase%20Journal/#inputs","title":"Inputs","text":"<ul> <li>Purchase Journal Date (<code>JRDATE</code>): MMDDYY format, required.</li> <li>Cash Disbursements Date (<code>CDDATE</code>): MMDDYY format, required if prepaid/ACH/wire/employee transactions exist.</li> <li>Purchase Journal Period/Year (<code>KYPD</code>, <code>KYPDYY</code>): Required if 13 accounting periods are enabled.</li> <li>Cash Disbursements Period/Year (<code>CDPD</code>, <code>CDPDYY</code>): Required if 13 periods and prepaid transactions exist.</li> <li>A/P Transaction File (<code>APTRAN</code>): Contains header and detail records with fields like company (<code>ATCONO</code>), vendor (<code>ATVEND</code>), invoice (<code>ATINV#</code>), amount (<code>ATAMT</code>), payment type (<code>ATPAID</code>), hold code (<code>ATHOLD</code>), etc.</li> <li>Control Files: <code>APCONT</code> (control data), <code>APVEND</code> (vendor data), <code>GSCONT</code> (system controls), <code>GLCONT</code> (G/L controls), <code>GSTABL</code> (period end dates), <code>POFILEH</code>, <code>POFILED</code> (P/O data), <code>FRCINH</code>, <code>FRCFBH</code> (freight data).</li> </ul>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP200%20OCL%20Convert%20Voucher%20to%20Payable/AP200%20Summary%20Purchase%20Journal/#outputs","title":"Outputs","text":"<ul> <li>Purchase Journal (<code>APPJJR</code>): Journal entries for A/P, expense, retention, and intercompany transactions.</li> <li>Open A/P Files (<code>APOPENH</code>, <code>APOPEND</code>, <code>APOPENV</code>): Updated with new or canceled vouchers.</li> <li>History Files (<code>APHISTH</code>, <code>APHISTD</code>, <code>APHISTV</code>): Records for canceled vouchers.</li> <li>Vendor File (<code>APVEND</code>): Updated year-to-date and balance totals.</li> <li>Purchase Order Files (<code>POFILEH</code>, <code>POFILED</code>): Updated amounts and receipt data if P/O integration enabled.</li> <li>Freight Files (<code>FRCINH</code>, <code>FRCFBH</code>): Cleared A/P status for deleted vouchers.</li> <li>Payment Transaction File (<code>APPYTR</code>): Updated with prepaid/ACH/wire/employee transaction data.</li> <li>Purchase Register Report (<code>APPRINT</code>): Detailed report with voucher, vendor, invoice, and totals.</li> </ul>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP200%20OCL%20Convert%20Voucher%20to%20Payable/AP200%20Summary%20Purchase%20Journal/#process-steps","title":"Process Steps","text":"<ol> <li>Validate Input Parameters:</li> <li>Validate <code>JRDATE</code> and <code>CDDATE</code> for correct format (MMDDYY) and fiscal year compliance using <code>GLCONT</code> (<code>GCLSYR</code>, <code>GCFFMO</code>).</li> <li>If 13 accounting periods enabled (<code>GX13GL = 'Y'</code> in <code>GSCONT</code>), validate <code>KYPD</code> (1\u201313) and <code>CDPD</code> (1\u201313) against period end dates in <code>GSTABL</code> (<code>TBPDDT</code>).</li> <li>Check for prepaid/ACH/wire/employee transactions (<code>ATPAID = 'P', 'A', 'W', 'E'</code>) in <code>APTRAN</code> to determine if <code>CDDATE</code> is required.</li> <li>Initialize Processing:</li> <li>Convert <code>JRDATE</code> to YYYYMMDD (<code>PJYMD</code>) with Y2K-compliant century (19xx/20xx).</li> <li>Retrieve next journal (<code>ACJRNL</code>) and voucher numbers (<code>ACNXVO</code>) from <code>APCONT</code>.</li> <li>Set journal ID (<code>JRNID</code>) to <code>'PJ'</code>, <code>'WT'</code>, or <code>'EE'</code> based on transaction type.</li> <li>Process Transactions:</li> <li>For each <code>APTRAN</code> header:<ul> <li>Skip if deleted (<code>ATHDEL = 'D'</code>); clear <code>FRAPST</code> in <code>FRCINH</code>/<code>FRCFBH</code> if <code>'Y'</code>.</li> <li>Assign voucher number (<code>VOUCHR</code>) from <code>ACNXVO</code> or <code>ATCNVO</code> (canceled).</li> <li>Set flags for prepaid (<code>P</code>), ACH (<code>A</code>), wire (<code>W</code>), employee expense (<code>E</code>), utility auto-pay (<code>U</code>), single check (<code>ATSNGL = 'S'</code>), or hold (<code>ATHOLD = 'H', 'A', 'W', 'E', 'U'</code>).</li> <li>Calculate retention amount (<code>ATRTAM = ATAMT * ATRTPC / 100</code>) if <code>ATRTPC \u2260 0</code>.</li> <li>Write payment records to <code>APPYTR</code> for prepaid/ACH/wire/employee transactions.</li> </ul> </li> <li>For each detail:<ul> <li>Calculate discount (<code>ATDISC = ATAMT * ATDSPC / 100</code>) if <code>ATDSPC \u2260 0</code>.</li> <li>Adjust <code>ATAMT</code> for retention if applicable.</li> <li>Update level 1 totals (<code>L1AMT</code>, <code>L1DISC</code>, <code>L1RTAM</code>, <code>L1RTDS</code>, <code>L1PAMT</code>, <code>L1FAMT</code>).</li> <li>Generate intercompany entries if <code>ATCONO \u2260 ATEXCO</code>.</li> <li>Update P/O files (<code>POFILEH</code>, <code>POFILED</code>) if enabled (<code>ACPOYN = 'Y'</code>) with amounts (<code>POAPPU</code>, <code>PDAPV$</code>) and receipt data (<code>PDRCQT</code>, <code>PDRCDT</code>, <code>PDCOMP</code>).</li> </ul> </li> <li>Handle Cancellations:</li> <li>For canceled vouchers (<code>ATCNVO \u2260 0</code>), update <code>APOPENH</code>, <code>APOPEND</code>, or <code>APOPENV</code> and write to history files (<code>APHISTH</code>, <code>APHISTD</code>, <code>APHISTV</code>).</li> <li>Generate Journal Entries:</li> <li>Write to <code>APPJJR</code> for A/P, expense, retention, and intercompany transactions.</li> <li>Update Totals:</li> <li>Update vendor totals (<code>VN$YTD</code>, <code>VNPURC</code>, <code>VNCBAL</code>) in <code>APVEND</code>.</li> <li>Update invoice history (<code>APINVH</code>) with amounts and dates.</li> <li>Accumulate company totals (<code>L2AMT</code>, <code>L2DISC</code>, <code>L2PAMT</code>, <code>L2FAMT</code>).</li> <li>Produce Report:</li> <li>Generate Purchase Register (<code>APPRINT</code>) with company, voucher, vendor, invoice, discount, gallons, receipt, and totals (voucher, retention, company).</li> </ol>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP200%20OCL%20Convert%20Voucher%20to%20Payable/AP200%20Summary%20Purchase%20Journal/#business-rules","title":"Business Rules","text":"<ul> <li>Validation:</li> <li>Dates must be valid and within the current fiscal year (<code>GCLSYR</code>, <code>GCFFMO</code>).</li> <li>Periods (1\u201313) must match <code>GSTABL</code> boundaries if 13 periods enabled.</li> <li><code>CDDATE</code> required only if prepaid/ACH/wire/employee transactions exist.</li> <li>Transaction Types:</li> <li>Supports prepaid (<code>P</code>), ACH (<code>A</code>), wire (<code>W</code>), employee expense (<code>E</code>), and utility auto-pay (<code>U</code>).</li> <li>Hold codes (<code>H</code>, <code>A</code>, <code>W</code>, <code>E</code>, <code>U</code>) affect voucher processing.</li> <li>Retention:</li> <li>Calculate retention (<code>ATRTAM</code>) if <code>ATRTPC \u2260 0</code>; create separate retention voucher if not 100%.</li> <li>Intercompany:</li> <li>Generate debit/credit entries for <code>ATCONO \u2260 ATEXCO</code> using <code>ACICGL</code>.</li> <li>Discounts:</li> <li>Apply discount (<code>ATDISC</code>) if <code>ATDSPC \u2260 0</code>.</li> <li>Purchase Orders:</li> <li>Update <code>POFILEH</code>/<code>POFILED</code> if <code>ACPOYN = 'Y'</code> and <code>ATPONO \u2260 blanks</code>.</li> <li>Freight:</li> <li>Clear <code>FRAPST</code> in <code>FRCINH</code>/<code>FRCFBH</code> for deleted vouchers if <code>'Y'</code>.</li> <li>Cancellations:</li> <li>Update open A/P and write history for canceled vouchers.</li> <li>Reporting:</li> <li>Include sales order (<code>ATSORN</code>), sequence (<code>ATSSRN</code>), carrier ID (<code>ATCAID</code>), process type (<code>ATPTYP</code>), and discount due date (<code>ATDSDT</code>).</li> </ul>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP200%20OCL%20Convert%20Voucher%20to%20Payable/AP200%20Summary%20Purchase%20Journal/#calculations","title":"Calculations","text":"<ul> <li>Date Conversion: <code>YYYYMMDD = MMDDYY * 10000.01</code>, with century (19xx if year \u2265 80, else 20xx).</li> <li>Retention Amount: <code>ATRTAM = ATAMT * (ATRTPC / 100)</code>.</li> <li>Discount Amount: <code>ATDISC = ATAMT * (ATDSPC / 100)</code>.</li> <li>Totals:</li> <li>Voucher: <code>L1AMT += ATAMT</code>, <code>L1DISC += ATDISC</code>, <code>L1RTAM += ATRTAM</code>, <code>L1RTDS += ATRTDS</code>, <code>L1PAMT += ATPRAM</code>, <code>L1FAMT += ATFRAM</code>.</li> <li>Company: <code>L2AMT += L1AMT</code>, <code>L2DISC += L1DISC</code>, <code>L2PAMT += L1PAMT</code>, <code>L2FAMT += L1FAMT</code>.</li> </ul>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP200%20OCL%20Convert%20Voucher%20to%20Payable/AP200%20Summary2%20Purchase%20Journal/","title":"AP200 Summary2 Purchase Journal","text":""},{"location":"accounts-payable/01%20Voucher%20Entry/AP200%20OCL%20Convert%20Voucher%20to%20Payable/AP200%20Summary2%20Purchase%20Journal/#list-of-use-cases-implemented-by-the-ap200-ap205-and-ap210-rpg-programs","title":"List of Use Cases Implemented by the AP200, AP205, and AP210 RPG Programs","text":"<p>The call stack consists of three RPG III programs (<code>AP200</code>, <code>AP205</code>, <code>AP210</code>) invoked by the main OCL program (<code>AP200.ocl36</code>) to manage the Accounts Payable (A/P) Purchase Register process, summarize journal entries, and post A/P invoices to inventory receipts. These programs collectively implement a single overarching use case, which can be broken down into three interconnected functions for clarity. Below is the identified use case, treated as a large function that processes inputs programmatically without screen interaction.</p> <p>Use Case: Process Accounts Payable Transactions and Post to General Ledger and Inventory - Description: This use case encompasses the end-to-end processing of A/P transactions, including voucher creation, journal entry generation, summarization, and posting to inventory receipts. It validates and updates A/P records, generates general ledger entries, and produces reports, ensuring accurate financial and inventory tracking. - Components:   1. AP200 (Purchase Register): Processes A/P transactions, creates vouchers, updates related files, and generates journal entries and a Purchase Register report.   2. AP205 (Purchase Journal): Summarizes A/P journal entries and generates general ledger entries and a Purchase Journal report.   3. AP210 (A/P to Inventory Posting): Posts A/P invoice details to inventory receipt records, updating quantities and amounts.</p>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP200%20OCL%20Convert%20Voucher%20to%20Payable/AP200%20Summary2%20Purchase%20Journal/#function-requirement-document-process-accounts-payable-transactions-and-post-to-general-ledger-and-inventory","title":"Function Requirement Document: Process Accounts Payable Transactions and Post to General Ledger and Inventory","text":""},{"location":"accounts-payable/01%20Voucher%20Entry/AP200%20OCL%20Convert%20Voucher%20to%20Payable/AP200%20Summary2%20Purchase%20Journal/#function-requirement-process-accounts-payable-transactions-and-post-to-general-ledger-and-inventory","title":"Function Requirement: Process Accounts Payable Transactions and Post to General Ledger and Inventory","text":""},{"location":"accounts-payable/01%20Voucher%20Entry/AP200%20OCL%20Convert%20Voucher%20to%20Payable/AP200%20Summary2%20Purchase%20Journal/#purpose","title":"Purpose","text":"<p>To process Accounts Payable (A/P) transactions, create and manage vouchers, generate general ledger journal entries, summarize A/P entries, post invoice details to inventory receipts, and produce detailed financial and diagnostic reports without user interface interaction.</p>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP200%20OCL%20Convert%20Voucher%20to%20Payable/AP200%20Summary2%20Purchase%20Journal/#inputs","title":"Inputs","text":"<ul> <li>APTRAN: Transaction file with header (company, vendor, invoice, dates, hold codes, sales order, carrier ID) and detail (expense G/L, amount, discount, gallons, receipt number, purchase order) records.</li> <li>APCONT: A/P control file (company name, journal number, next voucher number).</li> <li>APVEND: Vendor master file (year-to-date purchases, balance).</li> <li>APOPEN, APOPENH, APOPEND, APOPENV: Open A/P files for voucher records.</li> <li>APINVH: Invoice header file for invoice details.</li> <li>FRCINH, FRCFBH: Freight invoice and override header files for A/P status.</li> <li>POFILEH, POFILED: Purchase order files (disabled).</li> <li>APPJJR: Journal register file for input to summarization.</li> <li>AP205S: Sort/index file for <code>APPJJR</code>.</li> <li>INFIL1, INTZH1: Inventory receipt and holding files for invoice posting.</li> <li>System Date and Time: For date conversions and reporting.</li> <li>Journal Date (JRDATE): For Y2K-compliant date processing.</li> </ul>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP200%20OCL%20Convert%20Voucher%20to%20Payable/AP200%20Summary2%20Purchase%20Journal/#outputs","title":"Outputs","text":"<ul> <li>APPJJR: Journal register with G/L entries (A/P, expense, intercompany).</li> <li>APPYTR: Payment transaction records for prepaid/ACH/wire/employee/utility vouchers.</li> <li>APHISTH, APHISTD, APHISTV: History files for canceled vouchers.</li> <li>TEMGEN: General ledger entries (detailed and summarized).</li> <li>APOPENH, APOPEND, APOPENV: Updated open A/P records.</li> <li>APVEND: Updated vendor balances.</li> <li>APINVH: Updated invoice headers.</li> <li>FRCINH, FRCFBH: Updated freight A/P status.</li> <li>INFIL1, INTZH1: Updated inventory receipt records.</li> <li>APPRINT (AP200, AP205): Purchase Register and Purchase Journal reports.</li> <li>APLIST: Diagnostic report for inventory posting.</li> </ul>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP200%20OCL%20Convert%20Voucher%20to%20Payable/AP200%20Summary2%20Purchase%20Journal/#process-steps","title":"Process Steps","text":"<ol> <li>Initialize System:</li> <li>Convert journal date (<code>JRDATE</code>) to Y2K-compliant format (e.g., <code>JRYMD</code>, <code>JRYM8</code>).</li> <li> <p>Retrieve company details (<code>APCONT</code>) and initialize totals, counters, and separators.</p> </li> <li> <p>Process A/P Transactions (AP200):</p> </li> <li>Read <code>APTRAN</code> header and detail records.</li> <li>Assign voucher numbers (<code>NXTVO</code>) for non-canceled, non-100% retention vouchers.</li> <li>Update freight files (<code>FRCINH</code>, <code>FRCFBH</code>) by clearing A/P status (<code>FRAPST</code>) for deleted vouchers.</li> <li>Write payment transactions (<code>APPYTR</code>) for prepaid, ACH, wire, employee, or utility auto-pay vouchers.</li> <li>Calculate discounts (<code>ATDISC = ATAMT * (ATDSPC / 100)</code>) if discount percent is non-zero.</li> <li>Handle retentions: compute retention amount (<code>ATRTAM = ATAMT * (ATRTPC / 100)</code>), adjust <code>ATAMT</code>, and set retention discount (<code>ATRTDS</code>).</li> <li>Generate intercompany journal entries (<code>APPJJR</code>) if company numbers differ (<code>ATCONO \u2260 ATEXCO</code>).</li> <li>Update open A/P (<code>APOPENH</code>, <code>APOPEND</code>, <code>APOPENV</code>), vendor (<code>APVEND</code>), and invoice (<code>APINVH</code>) files.</li> <li>Write history records (<code>APHISTH</code>, <code>APHISTD</code>, <code>APHISTV</code>) for canceled vouchers.</li> <li> <p>Produce Purchase Register report (<code>APPRINT</code>) with voucher details, totals, and special fields (sales order, carrier ID, process type).</p> </li> <li> <p>Summarize Journal Entries (AP205):</p> </li> <li>Read <code>APPJJR</code> records via <code>AP205S</code> sort file.</li> <li>Summarize A/P entries (<code>PJTYPE = 'AP      '</code>) into a single <code>TEMGEN</code> record per voucher.</li> <li>Write detailed <code>TEMGEN</code> records for non-A/P entries (expense, intercompany).</li> <li>Adjust negative amounts: negate and switch debit (<code>D</code>) to credit (<code>C</code>) or vice versa.</li> <li>Accumulate company-level debit (<code>L4DR</code>) and credit (<code>L4CR</code>) totals.</li> <li> <p>Produce Purchase Journal report (<code>APPRINT</code>) with journal entries, totals, and gallons/receipt details.</p> </li> <li> <p>Post to Inventory Receipts (AP210):</p> </li> <li>Read <code>APTRAN</code> detail records with receipt number (<code>APREC#</code>).</li> <li>Skip records with sales order (<code>ATSORN \u2260 *ZERO</code>) or deleted status (<code>APHDEL = 'D'</code>, <code>APDDEL = 'D'</code>).</li> <li>Match receipt number in <code>INFIL1</code> or <code>INTZH1</code>:<ul> <li>If exact match (<code>APGAL = IHNQTY + IHNQTF - IHAPTQ - IHAPTF</code>), update record.</li> <li>If no exact match, find record with sufficient gallons (<code>APGAL &lt; RNQTY</code>).</li> <li>If no sufficient gallons, update first record.</li> </ul> </li> <li>Update <code>INFIL1</code> or <code>INTZH1</code> with invoice date (<code>JRYMD</code>), G/L number (<code>APGL</code>), journal number (<code>JR#</code>), quantities (<code>IHAPTQ</code>, <code>IHAPTF</code>), dollars (<code>IHAPTD</code>), invoice number (<code>APINVN</code>), PO number (<code>IHPONO</code>), and close code (<code>IHCLCD = 'O' or 'C'</code>).</li> <li>Produce diagnostic report (<code>APLIST</code>) with input and updated fields.</li> </ol>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP200%20OCL%20Convert%20Voucher%20to%20Payable/AP200%20Summary2%20Purchase%20Journal/#business-rules","title":"Business Rules","text":"<ol> <li>Voucher Management:</li> <li>Assign unique voucher numbers (<code>NXTVO</code>) for non-canceled, non-100% retention, and retention vouchers.</li> <li>Support payment types: prepaid (<code>P</code>), ACH (<code>A</code>), wire (<code>W</code>), employee expense (<code>E</code>), utility auto-pay (<code>U</code>).</li> <li> <p>Mark canceled vouchers (<code>ATCNVO \u2260 *ZEROS</code>) as deleted in open A/P files and write to history files.</p> </li> <li> <p>Discounts and Retentions:</p> </li> <li>Calculate discounts if <code>ATDSPC \u2260 0</code> and <code>ATDISC = 0</code>.</li> <li> <p>For retentions (<code>ATRTPC \u2260 0</code>), compute <code>ATRTAM</code> and adjust <code>ATAMT</code>; for 100% retention, set <code>ATAMT = 0</code>.</p> </li> <li> <p>Freight Handling:</p> </li> <li>Clear <code>FRAPST</code> in <code>FRCINH</code> or <code>FRCFBH</code> for deleted vouchers if previously flagged (<code>FRAPST = 'Y'</code>).</li> <li> <p>Prioritize <code>FRCFBH</code> over <code>FRCINH</code> for freight status checks.</p> </li> <li> <p>Intercompany Transfers:</p> </li> <li> <p>Generate <code>APPJJR</code> entries for intercompany transactions (<code>ATCONO \u2260 ATEXCO</code>) using intercompany G/L accounts (<code>ACICGL</code>).</p> </li> <li> <p>Journal Summarization:</p> </li> <li>Summarize A/P entries into a single <code>TEMGEN</code> record with fixed description.</li> <li> <p>Negate negative amounts and adjust debit/credit codes accordingly.</p> </li> <li> <p>Inventory Posting:</p> </li> <li>Skip posting if sales order exists or records are deleted.</li> <li>Match receipts exactly, by sufficient gallons, or use first record if no match.</li> <li> <p>Update inventory records with A/P details and set close status based on <code>APCLCD</code>.</p> </li> <li> <p>Y2K Compliance:</p> </li> <li> <p>Convert dates to 8-digit format using century (<code>Y2KCEN = 19</code> or <code>19 + 100</code>) based on <code>Y2KCMP = 1980</code>.</p> </li> <li> <p>Reporting:</p> </li> <li>Generate Purchase Register (<code>AP200</code>) with voucher, sales order, carrier ID, and process type details.</li> <li>Generate Purchase Journal (<code>AP205</code>) with summarized A/P and detailed non-A/P entries, including gallons/receipt.</li> <li>Generate diagnostic report (<code>AP210</code>) for inventory posting verification.</li> </ol>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP200%20OCL%20Convert%20Voucher%20to%20Payable/AP200%20Summary2%20Purchase%20Journal/#calculations","title":"Calculations","text":"<ul> <li>Discount: <code>ATDISC = ATAMT * (ATDSPC / 100)</code> if <code>ATDSPC \u2260 0</code> and <code>ATDISC = 0</code>.</li> <li>Retention Amount: <code>ATRTAM = ATAMT * (ATRTPC / 100)</code>; for 100% retention, <code>ATAMT = 0</code>, <code>ATRTAM = original ATAMT</code>.</li> <li>Remaining Quantity (Inventory): <code>RNQTY = IHNQTY + IHNQTF - IHAPTQ - IHAPTF</code>.</li> <li>Date Conversion: <code>YYYYMMDD = JRDATE * 10000.01</code>, century set to 19 if year \u2265 1980, else 20.</li> </ul>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP200%20OCL%20Convert%20Voucher%20to%20Payable/AP200%20Summary2%20Purchase%20Journal/#constraints","title":"Constraints","text":"<ul> <li>Disabled purchase order updates (<code>POFILEH</code>, <code>POFILED</code>) in <code>AP200</code>.</li> <li><code>APLIST</code> is temporary for diagnostic purposes and may be removed.</li> <li>13-period accounting supported if <code>KYYYPD \u2260 0</code>.</li> </ul>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP200%20OCL%20Convert%20Voucher%20to%20Payable/AP200OCL/","title":"AP200OCL","text":"<p>The provided document is an AS/400 Operation Control Language (OCL) procedure (<code>AP200.ocl36.txt</code>) that manages the Purchase Journal for posting voucher transactions in an Accounts Payable (A/P) system. Below, I\u2019ll explain the process steps in a clear, structured manner, breaking down the key operations, checks, and logic flow of the OCL file.</p>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP200%20OCL%20Convert%20Voucher%20to%20Payable/AP200OCL/#overview","title":"Overview","text":"<p>The <code>AP200</code> OCL procedure automates the posting of A/P voucher or wire transfer transactions to the Purchase Journal. It performs validations, sorts data, updates files, and generates reports. The procedure includes error handling, file management, and integration with other processes (e.g., inventory, job costing). It also supports wire transfer (<code>WT</code>) processing and ensures that certain conditions are met before proceeding.</p>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP200%20OCL%20Convert%20Voucher%20to%20Payable/AP200OCL/#process-steps","title":"Process Steps","text":""},{"location":"accounts-payable/01%20Voucher%20Entry/AP200%20OCL%20Convert%20Voucher%20to%20Payable/AP200OCL/#1-initial-setup-and-metadata","title":"1. Initial Setup and Metadata","text":"<ul> <li>Comments and Revisions:</li> <li>The file includes metadata about revisions, such as:<ul> <li><code>JB01</code> (09/14/14, Jan Beccari): Added posting to inventory transaction holding (<code>INTZH</code>).</li> <li><code>JK01</code> (03/27/15, Jimmy Krajacic): Added support for carrier freight invoices (<code>FRCINV</code>) when a voucher is deleted.</li> <li><code>JB</code> (06/07/21): Prevents A/P voucher posting during inventory beginning-of-week processing (<code>INTSZZ</code>).</li> </ul> </li> <li>Wire Transfer Check:</li> <li>The procedure checks if the user selected the \"Wire Transfer\" journal option (<code>WT</code>).<ul> <li>If <code>?3?/WT</code>, sets <code>P20='APWT?WS?'</code> (wire transfer file).</li> <li>Otherwise, sets <code>P20='APTR?WS?'</code> (standard transaction file).</li> </ul> </li> <li>Switch Initialization:</li> <li>Initializes <code>SWITCH</code> to <code>00000000</code> for conditional logic.</li> <li>Sets <code>SWITCH 10000000</code> if specific file conditions are met (e.g., <code>DATAF1-?9??20?</code> or <code>?F'A,?9??20?'?/00000000</code>).</li> </ul>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP200%20OCL%20Convert%20Voucher%20to%20Payable/AP200OCL/#2-pre-posting-validations","title":"2. Pre-Posting Validations","text":"<p>The procedure performs several checks to ensure the system is in a valid state for posting:</p> <ul> <li>No Voucher or Wire Transaction File:</li> <li> <p>If <code>SWITCH1-1</code> (indicating no A/P voucher or wire transaction file exists):</p> <ul> <li>Displays: \"NO A/P VOUCHER OR WIRE TRANSACTION FILE TO POST\".</li> <li>Prompts user to press <code>0, ENTER</code> to cancel.</li> <li>Jumps to <code>END</code>.</li> </ul> </li> <li> <p>Payment Cycle Conflict:</p> </li> <li> <p>If <code>DATAF1-?9?APPT?WS?</code> (payment cycle file exists):</p> <ul> <li>Deletes <code>?9?APPT?WS?,F1</code> if conditions allow.</li> <li>Displays a warning: \"THE PAYMENT CYCLE MUST BE ENDED FROM THIS WORKSTATION BEFORE THIS PURCHASE JOURNAL CAN BE RUN\".</li> <li>Prompts user to cancel and jumps to <code>END</code>.</li> </ul> </li> <li> <p>Concurrent Purchase Register:</p> </li> <li> <p>If <code>ACTIVE-AP200</code> (another A/P purchase register is running):</p> <ul> <li>Displays: \"AN A/P PURCHASE REGISTER IS ALREADY IN PROGRESS. PLEASE TRY AGAIN IN A FEW MINUTES\".</li> <li>Prompts user to cancel and jumps to <code>END</code>.</li> </ul> </li> <li> <p>Inventory Beginning-of-Week Conflict:</p> </li> <li> <p>If <code>DATAF1-?9?INTSZZ</code> (inventory beginning-of-week process is active):</p> <ul> <li>Displays: \"INVENTORY BEGINNING OF WEEK IS IN PROGRESS. PLEASE TRY AGAIN IN A FEW MINUTES\".</li> <li>Prompts user to cancel and jumps to <code>END</code>.</li> </ul> </li> <li> <p>Voucher Batch Errors:</p> </li> <li>Checks <code>?9?APSTAT</code> for errors in the voucher table (from <code>AP110</code>).</li> <li>If <code>?L'231,3'?/YES</code> (errors exist):<ul> <li>Displays: \"ERRORS EXIST IN THE BATCH. PLEASE RETURN TO THE BATCH AND CORRECT THE ERRORS\".</li> <li>Pauses and jumps to <code>END</code>.</li> </ul> </li> </ul>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP200%20OCL%20Convert%20Voucher%20to%20Payable/AP200OCL/#3-file-and-variable-initialization","title":"3. File and Variable Initialization","text":"<ul> <li>Clear Variables:</li> <li>Sets <code>LOCAL BLANK-*ALL</code> to clear local variables.</li> <li>Set Journal Type:</li> <li>If <code>?3?/WT</code>, sets <code>OFFSET-198,DATA-'WT*** WIRE TRANSFER ***'</code>.</li> <li>Otherwise, sets <code>OFFSET-198,DATA-'                       '</code>.</li> <li>Set Workstation:</li> <li>Sets <code>OFFSET-300,DATA-'?WS?'</code> (workstation ID).</li> <li>Create Temporary File:</li> <li>Builds <code>?9?APPT?WS?</code> (payment transaction file) with 200 records, 128 bytes each.</li> </ul>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP200%20OCL%20Convert%20Voucher%20to%20Payable/AP200OCL/#4-load-and-run-initial-program-ap200p","title":"4. Load and Run Initial Program (<code>AP200P</code>)","text":"<ul> <li>Program: <code>AP200P</code></li> <li>Files:</li> <li><code>APTRAN</code>: Transaction file (<code>?9??20?</code>).</li> <li><code>APPYTR</code>: Payment transaction file (<code>?9?APPT?WS?</code>).</li> <li><code>GSTABL</code>, <code>GSCONT</code>, <code>GLCONT</code>: Shared general ledger and system control files.</li> <li>Action:</li> <li>Runs <code>AP200P</code> to process initial transaction data.</li> <li>Cancel Check:</li> <li>If <code>?L'129,6'?/CANCEL</code>, deletes <code>APPT?WS?</code> and jumps to <code>END</code>.</li> </ul>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP200%20OCL%20Convert%20Voucher%20to%20Payable/AP200OCL/#5-file-cleanup-and-temporary-file-creation","title":"5. File Cleanup and Temporary File Creation","text":"<ul> <li>Delete Temporary Files:</li> <li>Deletes <code>APPJ?WS?</code>, <code>APPK?WS?</code>, <code>APJC?WS?</code> using <code>GSDELETE</code>.</li> <li>Create Job Cost Transaction File:</li> <li>Builds <code>?9?APJC?WS?</code> with 999,000 records, 128 bytes each.</li> </ul>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP200%20OCL%20Convert%20Voucher%20to%20Payable/AP200OCL/#6-sort-transactions-gsort","title":"6. Sort Transactions (<code>#GSORT</code>)","text":"<ul> <li>Program: <code>#GSORT</code></li> <li>Input File: <code>?9??20?</code> (transaction file).</li> <li>Output File: <code>?9?APXX?WS?</code> (sorted transaction file, 999,000 records).</li> <li>Sort Criteria:</li> <li>Sorts by:<ul> <li>Company (<code>FNC 2 3</code>).</li> <li>Vendor (<code>FNC 12 16</code>).</li> <li>Entry/Entry Sequence (<code>FNC 4 11</code>).</li> </ul> </li> <li>Copies fields 1\u2013256 and 257\u2013404 (<code>FDC</code>).</li> <li>Action:</li> <li>Executes sort to organize transactions for processing.</li> </ul>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP200%20OCL%20Convert%20Voucher%20to%20Payable/AP200OCL/#7-run-main-purchase-journal-program-ap200","title":"7. Run Main Purchase Journal Program (<code>AP200</code>)","text":"<ul> <li>Program: <code>AP200</code></li> <li>Files:</li> <li><code>APTRAN</code>: Sorted transactions (<code>?9?APXX?WS?</code>).</li> <li><code>APCONT</code>, <code>APVEND</code>, <code>APOPEN</code>, <code>APOPENH</code>, <code>APOPEND</code>, <code>APOPENV</code>: A/P control, vendor, and open item files (shared).</li> <li><code>APHISTH</code>, <code>APHISTD</code>, <code>APHISTV</code>: A/P history files (shared).</li> <li><code>APINVH</code>: Invoice header file (shared).</li> <li><code>POFILEH</code>, <code>POFILED</code>: Purchase order files (shared).</li> <li><code>JCTRAN</code>: Job cost transactions (<code>?9?APJC?WS?</code>).</li> <li><code>APPJJR</code>: Journal register (<code>?9?APPJ?WS?</code>).</li> <li><code>APPYTR</code>: Payment transactions (<code>?9?APPT?WS?</code>).</li> <li><code>FRCINH</code>, <code>FRCFBH</code>: Freight invoice files (shared).</li> <li>Printer Overrides:</li> <li>If <code>?9?/G</code>, sets output queue to <code>QUSRSYS/APPOST</code>.</li> <li>Otherwise, sets output queue to <code>QUSRSYS/TESTOUTQ</code>.</li> <li>Action:</li> <li>Runs <code>AP200</code> to process transactions, update A/P files, and generate the Purchase Journal report.</li> </ul>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP200%20OCL%20Convert%20Voucher%20to%20Payable/AP200OCL/#8-sort-journal-register-gsort","title":"8. Sort Journal Register (<code>#GSORT</code>)","text":"<ul> <li>Program: <code>#GSORT</code></li> <li>Input File: <code>?9?APPJ?WS?</code> (journal register).</li> <li>Output File: <code>?9?APPK?WS?</code> (sorted journal register, 999,000 records).</li> <li>Sort Criteria:</li> <li>Sorts by:<ul> <li>Company (<code>FNC 2 3</code>).</li> <li>Control/Distribution (<code>FNC 12 12</code>).</li> <li>A/P, Expense, Inter-Company (<code>FNC 106 115</code>).</li> <li>G/L Account (<code>FNC 13 20</code>).</li> </ul> </li> <li>Includes records where field 1 is not empty (<code>I C 1 1NECD</code>).</li> <li>Action:</li> <li>Sorts the journal register for further processing.</li> </ul>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP200%20OCL%20Convert%20Voucher%20to%20Payable/AP200OCL/#9-run-journal-summary-program-ap205","title":"9. Run Journal Summary Program (<code>AP205</code>)","text":"<ul> <li>Program: <code>AP205</code></li> <li>Files:</li> <li><code>APPJJR</code>: Journal register (<code>?9?APPJ?WS?</code>).</li> <li><code>AP205S</code>: Sorted journal register (<code>?9?APPK?WS?</code>).</li> <li><code>APCONT</code>: A/P control file (shared).</li> <li><code>TEMGEN</code>: Temporary general ledger file (shared).</li> <li>Printer Overrides:</li> <li>Same as <code>AP200</code> (output queue <code>APPOST</code> or <code>TESTOUTQ</code>).</li> <li>Action:</li> <li>Runs <code>AP205</code> to summarize journal entries and produce reports.</li> </ul>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP200%20OCL%20Convert%20Voucher%20to%20Payable/AP200OCL/#10-post-job-cost-transactions-conditional","title":"10. Post Job Cost Transactions (Conditional)","text":"<ul> <li>Condition:</li> <li>If <code>?F'A,?9?APJC?WS?'?/00000000</code> (job cost transaction file exists) and procedure <code>JC200</code> exists in the library (<code>?CLIB?</code>).</li> <li>Action:</li> <li>Calls <code>JC200</code> with <code>APJC?WS?</code> to post job cost transactions.</li> </ul>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP200%20OCL%20Convert%20Voucher%20to%20Payable/AP200OCL/#11-post-ap-invoices-to-inventory-receipts-ap210","title":"11. Post A/P Invoices to Inventory Receipts (<code>AP210</code>)","text":"<ul> <li>Program: <code>AP210</code></li> <li>Files:</li> <li><code>APTRAN</code>: Transaction file (<code>?9??20?</code>).</li> <li><code>INFIL1</code>, <code>INTZH1</code>: Inventory files (shared).</li> <li>Printer:</li> <li>Output to <code>APLIST</code> (device <code>PJ</code>, form <code>JBAP</code>, priority 0).</li> <li>Action:</li> <li>Posts A/P invoices to inventory receipt records.</li> </ul>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP200%20OCL%20Convert%20Voucher%20to%20Payable/AP200OCL/#12-cleanup-temporary-files","title":"12. Cleanup Temporary Files","text":"<ul> <li>Action:</li> <li>Deletes temporary files using <code>GSDELETE</code>:<ul> <li><code>APPJ?WS?</code>, <code>APPK?WS?</code>, <code>APTX?WS?</code>, <code>APXX?WS?</code>.</li> <li><code>?20?</code>, <code>APCT?WS?</code>, <code>APJC?WS?</code>.</li> <li><code>APPT?WS?</code> (if no records exist).</li> </ul> </li> <li>Condition:</li> <li>If <code>DATAF1-?9?APPT?WS?</code>, skips deletion and jumps to <code>END</code>.</li> </ul>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP200%20OCL%20Convert%20Voucher%20to%20Payable/AP200OCL/#13-automatic-prepaid-invoice-processing","title":"13. Automatic Prepaid Invoice Processing","text":"<ul> <li>Action:</li> <li>Displays: \"AUTOMATIC PROCESSING OF PREPAID INVOICES IS EXECUTING\".</li> <li>Calls procedures:<ul> <li><code>AP150</code> (auto mode, parameter <code>?3?</code>).</li> <li><code>AP160</code> (auto mode, parameter <code>?3?</code>).</li> <li><code>AP250</code> (auto mode, parameter <code>?3?</code>).</li> </ul> </li> <li>Purpose:</li> <li>Processes prepaid invoices automatically.</li> </ul>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP200%20OCL%20Convert%20Voucher%20to%20Payable/AP200OCL/#14-final-cleanup","title":"14. Final Cleanup","text":"<ul> <li>LMS Identifier Deletion:</li> <li>If <code>DATAF1-?9?LMS?WS?</code> (LMS batch identifier exists), deletes <code>LMS?WS?</code>.</li> <li>Reset State:</li> <li>Clears all local variables (<code>LOCAL BLANK-*ALL</code>).</li> <li>Resets <code>SWITCH</code> to <code>00000000</code>.</li> </ul>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP200%20OCL%20Convert%20Voucher%20to%20Payable/AP200OCL/#15-end-of-procedure","title":"15. End of Procedure","text":"<ul> <li>Tag: <code>END</code></li> <li>Action:</li> <li>Terminates the procedure after all processing or upon cancellation/error.</li> </ul>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP200%20OCL%20Convert%20Voucher%20to%20Payable/AP200OCL/#key-features-and-notes","title":"Key Features and Notes","text":"<ul> <li>Error Handling:</li> <li>The procedure includes robust checks to prevent conflicts (e.g., concurrent processes, payment cycle locks, inventory conflicts).</li> <li>User prompts ensure manual intervention when errors occur.</li> <li>File Management:</li> <li>Temporary files (<code>APPJ?WS?</code>, <code>APPK?WS?</code>, etc.) are created and deleted to manage data during processing.</li> <li>Shared files (e.g., <code>APCONT</code>, <code>APVEND</code>) are accessed in shared mode (<code>DISP-SHR</code>) to allow concurrent access.</li> <li>Sorting:</li> <li>Two sorting steps (<code>#GSORT</code>) organize transactions and journal entries for accurate posting and reporting.</li> <li>Modularity:</li> <li>Calls external programs (<code>AP200P</code>, <code>AP200</code>, <code>AP205</code>, <code>AP210</code>, <code>JC200</code>) and procedures (<code>AP150</code>, <code>AP160</code>, <code>AP250</code>) for specific tasks.</li> <li>Wire Transfer Support:</li> <li>Differentiates between standard transactions (<code>APTR?WS?</code>) and wire transfers (<code>APWT?WS?</code>).</li> <li>Inventory Integration:</li> <li>Posts to inventory receipts (<code>AP210</code>) and prevents conflicts with inventory processes (<code>INTSZZ</code>).</li> <li>Freight Invoices:</li> <li>Supports carrier freight invoice processing (<code>FRCINV</code>) when vouchers are deleted.</li> </ul>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP200%20OCL%20Convert%20Voucher%20to%20Payable/AP200OCL/#flow-summary","title":"Flow Summary","text":"<ol> <li>Validate environment (no conflicts, no errors in voucher batch).</li> <li>Initialize variables and files (set <code>WT</code>, create <code>APPT?WS?</code>).</li> <li>Process initial transactions (<code>AP200P</code>).</li> <li>Sort transactions (<code>#GSORT</code> to <code>APXX?WS?</code>).</li> <li>Post to Purchase Journal (<code>AP200</code>, update A/P and related files).</li> <li>Sort journal register (<code>#GSORT</code> to <code>APPK?WS?</code>).</li> <li>Summarize journal (<code>AP205</code>).</li> <li>Post job cost transactions (if applicable, <code>JC200</code>).</li> <li>Post to inventory receipts (<code>AP210</code>).</li> <li>Process prepaid invoices (<code>AP150</code>, <code>AP160</code>, <code>AP250</code>).</li> <li>Clean up (delete temporary files, reset state).</li> </ol>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP200%20OCL%20Convert%20Voucher%20to%20Payable/AP200OCL/#assumptions-and-clarifications","title":"Assumptions and Clarifications","text":"<ul> <li>Parameters:</li> <li><code>?9?</code>: Library name (dynamic).</li> <li><code>?WS?</code>: Workstation ID.</li> <li><code>?3?</code>: Likely a mode or batch parameter.</li> <li><code>?20?</code>: File name (<code>APTR?WS?</code> or <code>APWT?WS?</code> based on <code>WT</code>).</li> <li>System Context:</li> <li>Runs on IBM AS/400 with RPG programs and OCL.</li> <li>Assumes a multi-user environment with shared files.</li> <li>External Dependencies:</li> <li>Programs: <code>AP200P</code>, <code>AP200</code>, <code>AP205</code>, <code>AP210</code>, <code>#GSORT</code>, <code>JC200</code>.</li> <li>Procedures: <code>AP150</code>, <code>AP160</code>, <code>AP250</code>.</li> <li>Files: A/P, inventory, purchase order, job cost, and freight invoice files.</li> </ul>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP200%20OCL%20Convert%20Voucher%20to%20Payable/AP200OCL/#tables-files-used","title":"Tables (Files) Used","text":"<p>The program references the following files (tables), with labels indicating temporary or shared files: 1. APTRAN (<code>?9??20?</code>, either <code>APTR?WS?</code> or <code>APWT?WS?</code>): Transaction file for vouchers or wire transfers. 2. APPYTR (<code>?9?APPT?WS?</code>): Payment transaction file (temporary). 3. GSTABL (<code>?9?GSTABL</code>, shared): General system table. 4. GSCONT (<code>?9?GSCONT</code>, shared): General system control file. 5. GLCONT (<code>?9?GLCONT</code>, shared): General ledger control file. 6. APCONT (<code>?9?APCONT</code>, shared): A/P control file. 7. APVEND (<code>?9?APVEND</code>, shared): Vendor master file. 8. APOPEN (<code>?9?APOPEN</code>, shared): Open A/P file. 9. APOPENH (<code>?9?APOPNH</code>, shared): Open A/P header file. 10. APOPEND (<code>?9?APOPND</code>, shared): Open A/P detail file. 11. APOPENV (<code>?9?APOPNV</code>, shared): Open A/P vendor file. 12. APHISTH (<code>?9?APHSTH</code>, shared): A/P history header file. 13. APHISTD (<code>?9?APHSTD</code>, shared): A/P history detail file. 14. APHISTV (<code>?9?APHSTV</code>, shared): A/P history vendor file. 15. APINVH (<code>?9?APINVH</code>, shared): A/P invoice header file. 16. POFILEH (<code>?9?POFILH</code>, shared): Purchase order header file. 17. POFILED (<code>?9?POFILD</code>, shared): Purchase order detail file. 18. JCTRAN (<code>?9?APJC?WS?</code>, temporary): Job cost transaction file. 19. APPJJR (<code>?9?APPJ?WS?</code>, temporary): Journal register file. 20. AP205S (<code>?9?APPK?WS?</code>, temporary): Sorted journal register file. 21. FRCINH (<code>?9?FRCINH</code>, shared): Freight invoice header file. 22. FRCFBH (<code>?9?FRCFBH</code>, shared): Freight bill header file. 23. TEMGEN (<code>?9?TEMGEN</code>, shared): Temporary general ledger file. 24. INFIL1 (<code>?9?INFIL1</code>, shared): Inventory file. 25. INTZH1 (<code>?9?INTZH1</code>, shared): Inventory transaction holding file. 26. APSTAT (<code>?9?APSTAT</code>): A/P status file for error checking. 27. LMS?WS? (<code>?9?LMS?WS?</code>, temporary): LMS system identifier file. 28. APXX?WS? (<code>?9?APXX?WS?</code>, temporary): Sorted transaction file. 29. APTX?WS? (<code>?9?APTX?WS?</code>, temporary): Temporary transaction file. 30. APCT?WS? (<code>?9?APCT?WS?</code>, temporary): Temporary A/P control file.</p>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP200%20OCL%20Convert%20Voucher%20to%20Payable/AP200P%20RPG/","title":"AP200P RPG","text":"<p>The <code>AP200P.rpg36.txt</code> file is an RPG III program (<code>AP200P</code>) called within the <code>AP200.ocl36.txt</code> OCL procedure to prompt for and validate input parameters for the Purchase Journal and Cash Disbursements Journal, including dates and accounting periods. Below, I provide a detailed explanation of its process steps, business rules, tables/files used, and external programs called, along with its purpose in the context of the <code>AP200</code> OCL procedure.</p>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP200%20OCL%20Convert%20Voucher%20to%20Payable/AP200P%20RPG/#purpose-in-ap200-ocl","title":"Purpose in AP200 OCL","text":"<p>The <code>AP200P</code> program serves as the initial step in the Purchase Journal process within <code>AP200.ocl36.txt</code>. It prompts the user for key input parameters, such as the Purchase Journal date (<code>PJDATE</code>), Cash Disbursements Journal date (<code>CDDATE</code>), and accounting periods/years (<code>KYPD</code>, <code>KYPDYY</code>, <code>CDPD</code>, <code>CDPDYY</code>). It validates these inputs against system controls and writes validated data to the payment transaction file (<code>APPYTR</code>) for further processing. This program ensures that the journal process starts with accurate and valid parameters, particularly for handling prepaid, ACH, wire transfer, or employee expense transactions.</p> <p>In the <code>AP200</code> OCL procedure, <code>AP200P</code> is called early in the workflow (<code>LOAD AP200P</code>) to set up the necessary parameters before transaction processing and journal generation.</p>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP200%20OCL%20Convert%20Voucher%20to%20Payable/AP200P%20RPG/#process-steps","title":"Process Steps","text":"<ol> <li>Initialization:</li> <li>Clear Indicators and Variables:<ul> <li>Clears indicators <code>81</code> and <code>90</code> (<code>SETOF 8190</code>).</li> <li>Initializes <code>MSG30</code> (message field) to blanks.</li> <li>Sets zero fields (<code>Z5</code>, <code>Z2</code>, <code>Z8</code>, <code>Z6</code>) to 0 for use in output.</li> </ul> </li> <li> <p>Cancel Check:</p> <ul> <li>If function key <code>KG</code> (cancel) is pressed, sets <code>CANCEL</code> to <code>'CANCEL'</code>, sets last record indicator (<code>LR</code>), clears <code>81</code>, and jumps to <code>END</code>.</li> </ul> </li> <li> <p>One-Time Setup (<code>ONETIM</code> Subroutine):</p> </li> <li>Check for Prepaid Transactions:<ul> <li>Sets lower limit (<code>SETLL</code>) on <code>APTRAN</code> to check for records.</li> <li>Reads <code>APTRAN</code> until end-of-file (<code>09</code>) or a non-deleted record is found (<code>N08</code>).</li> <li>Checks <code>ATPAID</code> (payment type) for:</li> <li><code>'P'</code> (prepaid, sets <code>21</code> and <code>22</code>).</li> <li><code>'A'</code> (ACH, sets <code>21</code> and <code>23</code>, per <code>JB01</code>).</li> <li><code>'W'</code> (wire transfer, sets <code>21</code> and <code>24</code>, per <code>JB01</code>).</li> <li><code>'E'</code> (employee expense, sets <code>21</code> and <code>25</code>, per <code>JB01</code>).</li> <li>If no prepaid/ACH/wire/employee transactions exist (<code>N21</code>), sets indicator <code>20</code>.</li> </ul> </li> <li> <p>Accounting Period Check:</p> <ul> <li>Chains to <code>GSCONT</code> to check <code>GX13GL</code> (13 accounting periods flag).</li> <li>If <code>GX13GL = 'Y'</code> or no prepaid transactions exist (<code>N20</code>), sets indicator <code>19</code> (prompt for period/year).</li> <li>If prepaid transactions exist (<code>21</code>), sets indicator <code>18</code> (prompt for Cash Disbursements date).</li> </ul> </li> <li> <p>Screen 1 Processing (<code>S1</code> Subroutine):</p> </li> <li>Purchase Journal Date Validation:<ul> <li>Moves <code>PJDATE</code> to <code>DATE</code> and calls <code>DATCHK</code> to validate the date format.</li> <li>If invalid (<code>79</code>), sets <code>8190</code>, displays error, and jumps to <code>ENDS1</code>.</li> <li>Converts <code>PJDATE</code> to <code>PJYMD</code> (YYYYMMDD) by multiplying by 10000.01.</li> <li>Extracts year (<code>PJYR</code>) and determines century (<code>PJCN</code>):</li> <li>If <code>PJYR &gt;= Y2KCMP</code> (80), sets <code>PJCN</code> to <code>Y2KCEN</code> (19).</li> <li>Otherwise, sets <code>PJCN</code> to <code>Y2KCEN + 1</code> (20).</li> <li>Combines into <code>PJYMD8</code> (century + YYYYMMDD).</li> </ul> </li> <li>Cash Disbursements Date Validation (if Prepaid):<ul> <li>If prepaid transactions exist (<code>21</code>), validates <code>CDDATE</code> using <code>DATCHK</code>.</li> <li>If invalid (<code>79</code>), sets <code>8190</code>, displays error, and jumps to <code>ENDS1</code>.</li> <li>Converts <code>CDDATE</code> to <code>CDYMD</code> (YYYYMMDD) and determines century (<code>CN</code>), forming <code>CDDAT8</code>.</li> </ul> </li> <li>Purchase Journal Period/Year Validation (if 13 Periods):<ul> <li>If <code>16</code> (13 periods), validates <code>KYPD</code> (period, 1\u201313):</li> <li>If <code>KYPD &lt; 1</code> or <code>&gt; 13</code>, sets <code>819050</code>, displays error (<code>MSG,5</code>), and jumps to <code>ENDS1</code>.</li> <li>Retrieves period end date (<code>TBPDDT</code>) from <code>GSTABL</code> using <code>KYPD</code> and <code>KYPDYY</code>:</li> <li>If not found (<code>10</code>), sets <code>819050</code>, displays error (<code>MSG,5</code>), and jumps to <code>ENDS1</code>.</li> <li>Converts <code>TBPDDT</code> to <code>HIDATE</code> (YYYYMMDD) and <code>HIDAT8</code> (century + YYYYMMDD).</li> <li>Compares <code>PJYMD8</code> to <code>HIDAT8</code> (high date); if <code>PJYMD8 &gt; HIDAT8</code>, sets <code>819050</code>, displays error (<code>MSG,6</code>), and jumps to <code>ENDS1</code>.</li> <li>Determines low date for previous period (e.g., period 1 uses period 13 of prior year):</li> <li>Retrieves <code>TBPDDT</code> for previous period from <code>GSTABL</code>.</li> <li>If not found (<code>10</code>), sets <code>819050</code>, displays error (<code>MSG,5</code>), and jumps to <code>ENDS1</code>.</li> <li>Compares <code>PJYMD8</code> to <code>LODAT8</code> (low date); if <code>PJYMD8 &lt; LODAT8</code>, sets <code>819050</code>, displays error (<code>MSG,6</code>), and jumps to <code>ENDS1</code>.</li> <li>Fiscal Year Check:</li> <li>Chains to <code>GLCONT</code> to get last fiscal year closed (<code>GCLSYR</code>).</li> <li>If not found (<code>99</code>), clears date fields.</li> <li>Compares <code>PJDATE</code> (month/year) to fiscal year boundaries; if outside current fiscal year, sets <code>819051</code>, displays error (<code>MSG,7</code>), and jumps to <code>ENDS1</code>.</li> </ul> </li> <li>Cash Disbursements Period/Year Validation (if 13 Periods):<ul> <li>Similar validation for <code>CDPD</code> and <code>CDPDYY</code> using <code>GSTABL</code> and date comparisons.</li> <li>Displays errors (<code>MSG,5</code> or <code>MSG,6</code>) if invalid.</li> </ul> </li> <li> <p>Set Output:</p> <ul> <li>Sets <code>JRDATE</code> to <code>PJDATE</code> and <code>JRYMD8</code> to <code>PJYMD8</code>.</li> <li>Clears <code>CANCEL</code>.</li> <li>Sets indicator <code>82</code> (valid input) and clears <code>81</code>.</li> </ul> </li> <li> <p>Screen 2 Processing (<code>S2</code> Subroutine):</p> </li> <li>Displays confirmation screen (<code>AP200PS2</code>) with input values.</li> <li>If user enters <code>YORN = 'Y'</code>, sets <code>LR</code> (last record), clears <code>81</code>, and proceeds.</li> <li> <p>Otherwise, clears <code>PJDATE</code>, sets <code>0181</code>, clears <code>0282</code>, and redisplays screen.</p> </li> <li> <p>Date Check (<code>DATCHK</code> Subroutine):</p> </li> <li> <p>Validates date format (<code>MMDDYY</code>):</p> <ul> <li>Breaks down into month (<code>$MONTH</code>), day (<code>$DAY</code>), year (<code>$YR</code>).</li> <li>Checks month (1\u201312); sets <code>79</code> if invalid.</li> <li>Validates day based on month:</li> <li>For February, checks leap year:<ul> <li>Non-century years: Divides year by 4 (or multiplies by 0.25).</li> <li>Century years: Combines century and year, divides by 400 (or multiplies by 0.0025).</li> <li>Leap year: Allows up to 29 days; non-leap year: 28 days.</li> </ul> </li> <li>Other months: Allows 30 days for April, June, September, November; 31 days for others.</li> <li>Sets <code>79</code> if day is invalid.</li> </ul> </li> <li> <p>Write to Output File:</p> </li> <li> <p>If valid (<code>LR 21</code>), writes to <code>APPYTR</code>:</p> <ul> <li>Includes zero fields (<code>Z5</code>, <code>Z2</code>, <code>Z8</code>, <code>Z6</code>), <code>CDDATE</code>, <code>CDDAT8</code>, <code>CDPD</code>, <code>CDPDYY</code>, and payment type flag (<code>' '</code>, <code>'A'</code>, <code>'W'</code>, or <code>'E'</code> based on <code>ATPAID</code>).</li> </ul> </li> <li> <p>End Processing:</p> </li> <li>Jumps to <code>END</code> on cancel or error.</li> <li>Closes files and terminates.</li> </ol>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP200%20OCL%20Convert%20Voucher%20to%20Payable/AP200P%20RPG/#business-rules","title":"Business Rules","text":"<ol> <li>Prepaid Transaction Check:</li> <li>Checks <code>APTRAN</code> for prepaid (<code>'P'</code>), ACH (<code>'A'</code>), wire transfer (<code>'W'</code>), or employee expense (<code>'E'</code>) transactions.</li> <li>Prompts for Cash Disbursements date (<code>CDDATE</code>) only if such transactions exist (<code>21</code>).</li> <li>13 Accounting Periods:</li> <li>If <code>GX13GL = 'Y'</code> in <code>GSCONT</code>, validates period/year (<code>KYPD</code>, <code>KYPDYY</code>, <code>CDPD</code>, <code>CDPDYY</code>) against <code>GSTABL</code> period end dates.</li> <li>Ensures dates fall within valid period boundaries (high and low dates).</li> <li>Date Validation:</li> <li>Validates <code>PJDATE</code> and <code>CDDATE</code> for correct format and fiscal year.</li> <li>Checks leap years for February dates, handling century calculations for Y2K compliance.</li> <li>Fiscal Year Check:</li> <li>Ensures <code>PJDATE</code> is within the current fiscal year based on <code>GCLSYR</code> and first fiscal month (<code>GCFFMO</code>).</li> <li>User Confirmation:</li> <li>Requires user confirmation (<code>YORN = 'Y'</code>) to proceed with validated inputs.</li> <li>Error Handling:</li> <li>Displays error messages for invalid dates, periods, or fiscal year mismatches.</li> <li>Cancels processing if user presses <code>KG</code> or inputs are invalid.</li> <li>ACH/Wire Support (<code>JB01</code>, 05/01/13):</li> <li>Supports ACH (<code>'A'</code>), wire transfer (<code>'W'</code>), and employee expense (<code>'E'</code>) payment types in addition to prepaid (<code>'P'</code>).</li> </ol>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP200%20OCL%20Convert%20Voucher%20to%20Payable/AP200P%20RPG/#tablesfiles-used","title":"Tables/Files Used","text":"<ul> <li>Input:</li> <li><code>APTRAN</code> (Input with Delete, <code>ID</code>):<ul> <li>A/P transaction file (404 bytes).</li> <li>Fields: <code>ATPAID</code> (payment type: <code>'P'</code>, <code>'A'</code>, <code>'W'</code>, <code>'E'</code>).</li> <li>Keys: Positions 9 and 10 (company and other keys).</li> </ul> </li> <li><code>GSCONT</code> (Chained Input, <code>IC</code>):<ul> <li>System control file (512 bytes).</li> <li>Fields: <code>GX13GL</code> (13 accounting periods flag).</li> </ul> </li> <li><code>GLCONT</code> (Input, <code>IF</code>):<ul> <li>General ledger control file (256 bytes).</li> <li>Fields: <code>GCDEL</code> (delete flag), <code>GCCO</code> (company number), <code>GCNAME</code> (company name), <code>GCADR1\u20133</code> (address), <code>GCFFMO</code> (first fiscal month), <code>GCNXGJ</code> (next general journal), <code>GCICGL</code> (intercompany G/L), <code>GCLSYR</code> (last fiscal year closed), <code>GCRETC</code> (retained earnings current year), <code>GCYTDP</code> (YTD profit), <code>GCRETP</code> (retained earnings prior years), <code>GCINLN</code> (total income line), <code>GCCONS</code> (consolidated company code), <code>GCCOLM</code> (consolidated column), <code>GCBSGL</code> (balance sheet rounding G/L), <code>GCISGL</code> (income statement rounding G/L), <code>GCMINV</code> (month inventory cost flag), <code>GCLSY4</code> (last fiscal year closed, century), <code>GCLMCC</code> (last month closed for costing), <code>GCCOUM</code> (costing unit of measure).</li> </ul> </li> <li><code>GSTABL</code> (Chained Input, <code>IC</code>):<ul> <li>General ledger table file (256 bytes).</li> <li>Fields: <code>TBPDDT</code> (period end date).</li> <li>Key: Positions 1\u201312 (constructed from period and year).</li> </ul> </li> <li><code>SCREEN</code> (Workstation, <code>CP</code>):<ul> <li>Display file for user prompts (<code>AP200PS1</code>, <code>AP200PS2</code>).</li> <li>Fields: <code>PJDATE</code> (Purchase Journal date), <code>CDDATE</code> (Cash Disbursements date), <code>KYPD</code> (PJ period), <code>KYPDYY</code> (PJ year), <code>CDPD</code> (CD period), <code>CDPDYY</code> (CD year), <code>YORN</code> (confirmation), <code>MSG30</code> (error message).</li> </ul> </li> <li>Output:</li> <li><code>APPYTR</code> (Output, <code>O</code>):<ul> <li>Payment transaction file (128 bytes).</li> <li>Fields: Zero fields (<code>Z5</code>, <code>Z2</code>, <code>Z8</code>, <code>Z6</code>), <code>CDDATE</code>, <code>CDDAT8</code>, <code>CDPD</code>, <code>CDPDYY</code>, payment type flag (<code>' '</code>, <code>'A'</code>, <code>'W'</code>, <code>'E'</code>).</li> </ul> </li> <li><code>SCREEN</code> (Workstation, <code>O</code>):<ul> <li>Outputs prompts and error messages (<code>AP200PS1</code> for input, <code>AP200PS2</code> for confirmation).</li> </ul> </li> </ul>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP200%20OCL%20Convert%20Voucher%20to%20Payable/AP200P%20RPG/#external-programs-called","title":"External Programs Called","text":"<ul> <li>None:</li> <li>The <code>AP200P</code> program does not call external programs. It relies on internal subroutines (<code>ONETIM</code>, <code>S1</code>, <code>S2</code>, <code>DATCHK</code>) for processing.</li> </ul>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP200%20OCL%20Convert%20Voucher%20to%20Payable/AP200P%20RPG/#role-in-ap200-ocl","title":"Role in AP200 OCL","text":"<p>In the <code>AP200</code> OCL procedure, <code>AP200P</code> is called early (<code>LOAD AP200P</code>) to: - Prompt the user for Purchase Journal and Cash Disbursements Journal dates and periods. - Validate inputs against system controls (<code>GSCONT</code>, <code>GLCONT</code>, <code>GSTABL</code>) for date format, period validity, and fiscal year compliance. - Write validated parameters to <code>APPYTR</code> for use in subsequent steps (e.g., <code>AP200</code>, <code>AP205</code>, <code>AP210</code>). - Handle special cases like prepaid, ACH, wire transfer, or employee expense transactions. - Ensure the process aborts gracefully on user cancellation or invalid inputs.</p> <p>This step is critical for initializing the Purchase Journal process with accurate parameters, ensuring downstream processing (sorting, posting, and reporting) uses valid dates and periods.</p>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP200%20OCL%20Convert%20Voucher%20to%20Payable/AP200P%20RPG/#key-notes","title":"Key Notes","text":"<ul> <li>Revisions:</li> <li><code>JB01</code> (05/01/13): Added support for ACH (<code>'A'</code>), wire transfer (<code>'W'</code>), and employee expense (<code>'E'</code>) payment types.</li> <li>Date Handling:</li> <li>Robust date validation with leap year checks and Y2K compliance (19xx vs. 20xx).</li> <li>Period Validation:</li> <li>Supports 13 accounting periods if enabled (<code>GX13GL = 'Y'</code>), with strict period/year checks.</li> <li>User Interaction:</li> <li>Uses two screens (<code>AP200PS1</code> for input, <code>AP200PS2</code> for confirmation) to ensure user validation.</li> <li>Error Messages:</li> <li>Provides clear feedback for invalid inputs (e.g., invalid date, period, or fiscal year).</li> </ul> <p>If you need further details on specific fields, logic, or integration with other OCL steps, let me know!</p>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP200%20OCL%20Convert%20Voucher%20to%20Payable/AP200P%20RPG/#ap200p-process-summary","title":"AP200P Process Summary","text":""},{"location":"accounts-payable/01%20Voucher%20Entry/AP200%20OCL%20Convert%20Voucher%20to%20Payable/AP200P%20RPG/#purpose","title":"Purpose","text":"<p><code>AP200P</code> is an RPG III program called in the <code>AP200</code> OCL procedure to prompt for and validate Purchase Journal and Cash Disbursements Journal parameters, including dates and accounting periods, and write them to <code>APPYTR</code>.</p>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP200%20OCL%20Convert%20Voucher%20to%20Payable/AP200P%20RPG/#process-steps_1","title":"Process Steps","text":"<ol> <li>Initialization: Clears indicators, messages, and zero fields. Checks for user cancel (<code>KG</code>).</li> <li>One-Time Setup (<code>ONETIM</code>):</li> <li>Checks <code>APTRAN</code> for prepaid (<code>'P'</code>), ACH (<code>'A'</code>), wire transfer (<code>'W'</code>), or employee expense (<code>'E'</code>) transactions.</li> <li>Sets flags for prompting Cash Disbursements date (<code>21</code>) or period/year (<code>19</code>, <code>18</code>).</li> <li>Screen 1 (<code>S1</code>):</li> <li>Validates <code>PJDATE</code> and <code>CDDATE</code> using <code>DATCHK</code>.</li> <li>Converts dates to YYYYMMDD and handles Y2K (19xx/20xx).</li> <li>Validates periods (<code>KYPD</code>, <code>CDPD</code>) against <code>GSTABL</code> for 13 accounting periods.</li> <li>Checks fiscal year against <code>GLCONT</code>.</li> <li>Displays errors if invalid.</li> <li>Screen 2 (<code>S2</code>):</li> <li>Prompts for confirmation (<code>YORN = 'Y'</code>).</li> <li>Clears <code>PJDATE</code> if not confirmed.</li> <li>Date Check (<code>DATCHK</code>):</li> <li>Validates date format, month, day, and leap year.</li> <li>Write to <code>APPYTR</code>:</li> <li>Outputs validated dates, periods, and payment type to <code>APPYTR</code>.</li> <li>End: Closes files or jumps to <code>END</code> on cancel/error.</li> </ol>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP200%20OCL%20Convert%20Voucher%20to%20Payable/AP200P%20RPG/#business-rules_1","title":"Business Rules","text":"<ul> <li>Prompts for <code>CDDATE</code> only if prepaid/ACH/wire/employee transactions exist.</li> <li>Validates periods (1\u201313) if <code>GX13GL = 'Y'</code> in <code>GSCONT</code>.</li> <li>Ensures dates are within period boundaries and current fiscal year.</li> <li>Supports ACH/wire/employee payments (<code>JB01</code>).</li> <li>Displays error messages for invalid inputs.</li> <li>Requires user confirmation to proceed.</li> </ul>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP200%20OCL%20Convert%20Voucher%20to%20Payable/AP200P%20RPG/#tablesfiles","title":"Tables/Files","text":"<ul> <li>Input:</li> <li><code>APTRAN</code>: Transaction file (<code>ATPAID</code>).</li> <li><code>GSCONT</code>: System control (<code>GX13GL</code>).</li> <li><code>GLCONT</code>: G/L control (<code>GCLSYR</code>, <code>GCFFMO</code>).</li> <li><code>GSTABL</code>: G/L table (<code>TBPDDT</code>).</li> <li><code>SCREEN</code>: Workstation input (<code>PJDATE</code>, <code>CDDATE</code>, <code>KYPD</code>, <code>KYPDYY</code>, <code>CDPD</code>, <code>CDPDYY</code>, <code>YORN</code>).</li> <li>Output:</li> <li><code>APPYTR</code>: Payment transaction file (dates, periods, payment type).</li> <li><code>SCREEN</code>: Workstation output (prompts, errors).</li> </ul>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP200%20OCL%20Convert%20Voucher%20to%20Payable/AP200P%20RPG/#external-programs","title":"External Programs","text":"<ul> <li>None (uses subroutines: <code>ONETIM</code>, <code>S1</code>, <code>S2</code>, <code>DATCHK</code>).</li> </ul>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP200%20OCL%20Convert%20Voucher%20to%20Payable/AP200P%20RPG/#role-in-ap200-ocl_1","title":"Role in AP200 OCL","text":"<p>Initializes Purchase Journal by prompting and validating dates/periods, writing to <code>APPYTR</code> for downstream processing.</p>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP200%20OCL%20Convert%20Voucher%20to%20Payable/AP200RPG/","title":"AP200RPG","text":"<p>The RPG program <code>AP200</code> is an Accounts Payable (A/P) Purchase Register program that processes vendor invoices, vouchers, and related transactions. Below is a detailed analysis of the process steps, business rules, tables used, and external programs called based on the provided source code.</p>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP200%20OCL%20Convert%20Voucher%20to%20Payable/AP200RPG/#process-steps","title":"Process Steps","text":"<p>The program follows a structured flow to process A/P transactions, including header and detail records, cancellations, intercompany transfers, and updates to various files. The main steps are:</p> <ol> <li>Initialization (ONCE routine):</li> <li>Executes once at program start.</li> <li>Converts the journal date (<code>JRDATE</code>) to a year-month-day format (<code>PJYMD</code>).</li> <li>Handles Y2K logic to determine the century (<code>JCN</code>).</li> <li>Initializes variables (e.g., <code>Z5</code>, <code>Z6</code>, <code>Z7</code>, <code>Z8</code>, <code>Z9</code>, <code>Z10</code>, <code>Z4</code>, <code>ONE1</code>, <code>ONE3</code>, <code>TWO1</code>, <code>THREE1</code>) to zeros or specific values.</li> <li> <p>Sets the <code>POKEY</code> to '000' and increments the <code>ONCE</code> counter.</p> </li> <li> <p>Level 2 Processing (L2DET subroutine):</p> </li> <li>Initializes page number, captures system time and date.</li> <li>Converts system date (<code>SYSDAT</code>) to a year-month-day format (<code>SYSYMD</code>).</li> <li>Chains to <code>APCONT</code> to retrieve company data and next voucher number (<code>ACNXVO</code>).</li> <li>Determines journal ID (<code>JRNID</code>) based on wire transfer flag (<code>WIRE</code>):<ul> <li>'WT' for wire transfers, 'EE' for employee expenses, or 'PJ' otherwise.</li> </ul> </li> <li>Updates <code>ACJRNL</code> (journal number) and writes to <code>APCONT</code> if not found.</li> <li> <p>Initializes level 2 accumulators (<code>L2PAMT</code>, <code>L2FAMT</code>, <code>L2AMT</code>, <code>L2DISC</code>).</p> </li> <li> <p>Level 1 Processing (L1DET subroutine):</p> </li> <li>Initializes level 1 accumulators (<code>L1PAMT</code>, <code>L1FAMT</code>, <code>L1AMT</code>, <code>L1DISC</code>, <code>L1RTAM</code>, <code>L1RTDS</code>).</li> <li>Resets indicators (e.g., 03, 10, 12, 13, 19, 24, 25, 32).</li> <li> <p>Initializes sequence number (<code>SEQ#</code>).</p> </li> <li> <p>Header Record Processing (EACH01 subroutine):</p> </li> <li>Processes header records from <code>APTRAN</code>.</li> <li>Checks if the voucher is deleted (<code>ATHDEL = 'D'</code>):<ul> <li>If deleted, updates <code>FRCFBH</code> and <code>FRCINH</code> to blank <code>FRAPST</code> if it was 'Y'.</li> <li>Skips further processing for deleted vouchers.</li> </ul> </li> <li>Converts dates (<code>ATINDT</code>, <code>ATDUDT</code>, <code>ATPCKD</code>, <code>ATDSDT</code>) to internal format.</li> <li>Validates vendor number (<code>ATVEND</code>), canceled voucher (<code>ATCNVO</code>), prepaid status (<code>ATPAID</code>), single check (<code>ATSNGL</code>), and hold codes (<code>ATHOLD</code>).</li> <li>Assigns voucher number (<code>VOUCHR</code>) from <code>NXTVO</code> or retention voucher (<code>RTVO</code>) if applicable.</li> <li>Processes prepaid vouchers (check, ACH, wire transfer, employee expense) by updating <code>APPYTR</code>.</li> <li>Handles canceled vouchers by calling the <code>CANCEL</code> subroutine.</li> <li> <p>Checks for retention (<code>ATRTPC</code>) and calculates retention amounts if applicable.</p> </li> <li> <p>Detail Record Processing (EACH02 subroutine):</p> </li> <li>Processes detail records from <code>APTRAN</code>.</li> <li>Handles gallons (<code>ATGALN</code>) and receipt number (<code>ATRCPT</code>) for printing.</li> <li>Calculates discounts based on discount percent (<code>ATDSPC</code>) and amount (<code>ATAMT</code>).</li> <li>Processes retention amounts (<code>ATRTAM</code>, <code>ATRTDS</code>) if applicable.</li> <li>Updates payment transaction records (<code>APPYTR</code>) for discounts.</li> <li>Accumulates amounts (<code>L1AMT</code>, <code>L1PAMT</code>, <code>L1FAMT</code>, <code>L1DISC</code>, <code>L1RTAM</code>, <code>L1RTDS</code>).</li> <li>Checks for intercompany transfers by calling <code>INTRCO</code> if company numbers differ (<code>ATCONO \u2260 ATEXCO</code>).</li> <li> <p>Updates purchase order files (<code>POFILEH</code>, <code>POFILED</code>) if <code>ACPOYN = 'Y'</code> and <code>ATPONO</code> is not blank.</p> </li> <li> <p>Cancel Voucher Processing (CANCEL subroutine):</p> </li> <li>Processes canceled vouchers (<code>ATCNVO</code>).</li> <li>Builds a key (<code>OPKY12</code>) using company and vendor data.</li> <li>Reads <code>APOPEN</code> to find matching records.</li> <li>Updates <code>APOPENH</code>, <code>APOPEND</code>, or <code>APOPENV</code> based on record type (<code>OPRCTY</code>).</li> <li> <p>Writes history records to <code>APHISTH</code>, <code>APHISTD</code>, or <code>APHISTV</code>.</p> </li> <li> <p>Level 1 Totals (L1TOT subroutine):</p> </li> <li>Accumulates level 1 totals into level 2 totals (<code>L2PAMT</code>, <code>L2FAMT</code>, <code>L2AMT</code>, <code>L2DISC</code>).</li> <li>Updates vendor totals (<code>VN$YTD</code>, <code>VNPURC</code>, <code>VNCBAL</code>) in <code>APVEND</code>.</li> <li>Writes invoice header (<code>APINVH</code>) if vendor is not zero.</li> <li> <p>Writes totals to <code>APPRINT</code>.</p> </li> <li> <p>Intercompany Transfers (INTRCO subroutine):</p> </li> <li>Processes intercompany transfers when company numbers differ.</li> <li>Sets debit and credit company codes (<code>IDRCO</code>, <code>ICRCO</code>) and G/L accounts (<code>IDRGL</code>, <code>ICRGL</code>).</li> <li>Writes journal entries to <code>APPJJR</code> for debit and credit sides.</li> <li> <p>Handles retention amounts separately if applicable.</p> </li> <li> <p>Output Processing:</p> </li> <li>Writes records to output files (<code>APOPENH</code>, <code>APOPEND</code>, <code>APOPENV</code>, <code>APHISTH</code>, <code>APHISTD</code>, <code>APHISTV</code>, <code>APPJJR</code>, <code>APPYTR</code>, <code>APVEND</code>, <code>APINVH</code>, <code>POFILEH</code>, <code>POFILED</code>, <code>FRCINH</code>, <code>FRCFBH</code>).</li> <li>Generates a purchase register report via <code>APPRINT</code>.</li> </ol>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP200%20OCL%20Convert%20Voucher%20to%20Payable/AP200RPG/#business-rules","title":"Business Rules","text":"<p>The program enforces several business rules to ensure accurate A/P processing:</p> <ol> <li>Voucher Number Assignment:</li> <li>Voucher numbers are assigned from <code>ACNXVO</code> in <code>APCONT</code> and incremented.</li> <li>Retention vouchers (<code>RTVO</code>) are assigned separately if <code>ATRTPC</code> is non-zero.</li> <li> <p>Canceled vouchers use the original voucher number (<code>ATCNVO</code>).</p> </li> <li> <p>Prepaid Vouchers:</p> </li> <li>Prepaid vouchers are flagged with <code>ATPAID = 'P'</code> (check), <code>'A'</code> (ACH), <code>'W'</code> (wire transfer), or <code>'E'</code> (employee expense).</li> <li> <p>Payment transactions are written to <code>APPYTR</code> for prepaid vouchers.</p> </li> <li> <p>Hold Vouchers:</p> </li> <li>Vouchers can be held with <code>ATHOLD = 'H'</code> (hold), <code>'A'</code> (ACH), <code>'W'</code> (wire transfer), <code>'E'</code> (employee expense), or <code>'U'</code> (utility auto-pay).</li> <li> <p>Hold descriptions (<code>ATHLDD</code>) are printed for held vouchers.</p> </li> <li> <p>Discounts:</p> </li> <li>Discounts are calculated if <code>ATDSPC</code> (discount percent) is non-zero.</li> <li>Discount amount (<code>ATDISC</code>) is computed as <code>ATAMT * (ATDSPC / 100)</code>.</li> <li> <p>Discounts are accumulated in <code>L1DISC</code> and written to <code>APPYTR</code>.</p> </li> <li> <p>Retention:</p> </li> <li>Retention is processed if <code>ATRTPC</code> (retention percent) is non-zero.</li> <li>Retention amount (<code>ATRTAM</code>) is calculated as <code>ATAMT * (ATRTPC / 100)</code>.</li> <li> <p>Retention vouchers are written to <code>APOPENH</code>, <code>APOPEND</code>, and <code>APOPENV</code> with a hold code (<code>'H'</code>) and description ('RETENTION').</p> </li> <li> <p>Intercompany Transfers:</p> </li> <li>If <code>ATCONO \u2260 ATEXCO</code>, intercompany journal entries are written to <code>APPJJR</code>.</li> <li> <p>Debit and credit entries use the intercompany G/L account (<code>ACICGL</code>).</p> </li> <li> <p>Purchase Order Integration:</p> </li> <li>If <code>ACPOYN = 'Y'</code> and <code>ATPONO</code> is non-blank, updates <code>POFILEH</code> (header) and <code>POFILED</code> (detail).</li> <li> <p>Updates applied amount (<code>POAPPU</code>), received quantity (<code>PDRCQT</code>), and A/P voucher amount (<code>PDAPV$</code>).</p> </li> <li> <p>Deleted Vouchers:</p> </li> <li>If <code>ATHDEL = 'D'</code>, blanks <code>FRAPST</code> in <code>FRCINH</code> or <code>FRCFBH</code> if it was 'Y'.</li> <li> <p>Skips further processing for deleted vouchers.</p> </li> <li> <p>Single Check and Canceled Vouchers:</p> </li> <li>Single check vouchers are flagged with <code>ATSNGL = 'S'</code>.</li> <li> <p>Canceled vouchers are processed by updating <code>APOPEN</code> and writing to <code>APHIST</code>.</p> </li> <li> <p>Y2K Date Handling:</p> <ul> <li>Adjusts century for dates based on <code>Y2KCMP</code> and <code>Y2KCEN</code>.</li> </ul> </li> <li> <p>Journal ID Assignment:</p> <ul> <li>Assigns <code>JRNID</code> as 'WT' for wire transfers, 'EE' for employee expenses, or 'PJ' otherwise.</li> </ul> </li> </ol>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP200%20OCL%20Convert%20Voucher%20to%20Payable/AP200RPG/#business-rules_1","title":"Business Rules","text":"<ol> <li>Voucher Processing:</li> <li>Processes header (<code>NS 01</code>) and detail (<code>NS 02</code>) records from <code>APTRAN</code>, skipping deleted vouchers (<code>ATHDEL = 'D'</code>).</li> <li>Assigns new voucher numbers (<code>NXTVO</code>) for non-canceled, non-100% retention vouchers and retention vouchers.</li> <li> <p>Supports multiple payment types: prepaid (<code>P</code>), ACH (<code>A</code>), wire transfer (<code>W</code>), employee expense (<code>E</code>), and utility auto-pay (<code>U</code>).</p> </li> <li> <p>Freight Invoice Handling:</p> </li> <li>Clears <code>FRAPST</code> to blank in <code>FRCINH</code> or <code>FRCFBH</code> if a voucher is deleted and <code>FRAPST = 'Y'</code>.</li> <li> <p>Prioritizes <code>FRCFBH</code> (freight bill override header) over <code>FRCINH</code> (carrier invoice header) when checking freight status.</p> </li> <li> <p>Discounts and Retentions:</p> </li> <li>Calculates discounts if <code>ATDSPC \u2260 0</code> and <code>ATDISC = 0</code> (<code>ATDISC = ATAMT * (ATDSPC / 100)</code>).</li> <li> <p>For retentions (<code>ATRTPC \u2260 0</code>), computes retention amount (<code>ATRTAM</code>) and adjusts <code>ATAMT</code>. For 100% retention, moves <code>ATAMT</code> to <code>ATRTAM</code> and zeros <code>ATAMT</code>.</p> </li> <li> <p>Intercompany Transfers:</p> </li> <li> <p>Generates journal entries (<code>APPJJR</code>) for intercompany transactions (<code>ATCONO \u2260 ATEXCO</code>) using intercompany G/L accounts (<code>ACICGL</code>).</p> </li> <li> <p>Cancellation:</p> </li> <li> <p>Marks canceled vouchers (<code>ATCNVO \u2260 *ZEROS</code>) as deleted (<code>'D'</code>) in <code>APOPENH</code>, <code>APOPEND</code>, <code>APOPENV</code> and writes history records (<code>APHISTH</code>, <code>APHISTD</code>, <code>APHISTV</code>).</p> </li> <li> <p>Vendor and Invoice Updates:</p> </li> <li>Updates vendor balances (<code>VN$YTD</code>, <code>VNPURC</code>, <code>VNCBAL</code>) with voucher and retention amounts.</li> <li> <p>Records invoice details in <code>APINVH</code> for non-one-time vendors.</p> </li> <li> <p>Journal Entries:</p> </li> <li> <p>Generates <code>APPJJR</code> entries for A/P, expense, and intercompany accounts, including retention and non-retention transactions.</p> </li> <li> <p>Purchase Order Updates:</p> </li> <li> <p>Disabled (skipped via <code>GOTO SKIP</code>), but intended to update <code>POFILEH</code> (<code>POAPPU</code>) and <code>POFILED</code> (<code>PDRCQT</code>, <code>PDAPV$</code>, <code>PDRCDT</code>, <code>PDCOMP</code>).</p> </li> <li> <p>Reporting:</p> </li> <li>Produces a detailed Purchase Register with company, voucher, and line item details, including special fields like sales order, carrier ID, and process type.</li> </ol>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP200%20OCL%20Convert%20Voucher%20to%20Payable/AP200RPG/#tables-used","title":"Tables Used","text":"<p>The program interacts with the following files (tables):</p> File Name Type Description Usage <code>APTRAN</code> Input A/P Transaction File Reads header and detail records <code>APCONT</code> Update A/P Control File Retrieves company data, updates <code>ACJRNL</code>, <code>ACNXVO</code> <code>APVEND</code> Update A/P Vendor File Updates vendor totals (<code>VN$YTD</code>, <code>VNPURC</code>, <code>VNCBAL</code>) <code>APOPEN</code> Input A/P Open File Reads open vouchers for cancellation <code>APOPENH</code> Update A/P Open Header File Writes/updates header records <code>APOPEND</code> Update A/P Open Detail File Writes detail records <code>APOPENV</code> Update A/P Open Vendor File Writes vendor records <code>APINVH</code> Input A/P Invoice Header File Writes invoice header records <code>POFILEH</code> Update Purchase Order Header File Updates applied amounts (<code>POAPPU</code>) <code>POFILED</code> Update Purchase Order Detail File Updates received qty (<code>PDRCQT</code>), voucher amounts <code>APHISTH</code> Output A/P History Header File Writes history header records <code>APHISTD</code> Output A/P History Detail File Writes history detail records <code>APHISTV</code> Output A/P History Vendor File Writes history vendor records <code>APPJJR</code> Output A/P Journal File Writes journal entries <code>APPYTR</code> Update A/P Payment Transaction File Writes/updates payment transactions <code>FRCINH</code> Update Freight Invoice Header File Updates <code>FRAPST</code> for deleted vouchers <code>FRCFBH</code> Update Freight Bill Override Header File Updates <code>FRAPST</code> for deleted vouchers <code>APPRINT</code> Output A/P Purchase Register Report Generates the purchase register report"},{"location":"accounts-payable/01%20Voucher%20Entry/AP200%20OCL%20Convert%20Voucher%20to%20Payable/AP200RPG/#external-programs-called","title":"External Programs Called","text":"<p>The program does not explicitly call external programs using the <code>CALL</code> opcode. All processing is handled within the program through subroutines and file operations. The subroutines used are:</p> <ul> <li><code>L2DET</code>: Level 2 detail processing.</li> <li><code>L1DET</code>: Level 1 detail processing.</li> <li><code>EACH01</code>: Header record processing.</li> <li><code>EACH02</code>: Detail record processing.</li> <li><code>CANCEL</code>: Cancel voucher processing.</li> <li><code>L1TOT</code>: Level 1 totals processing.</li> <li><code>INTRCO</code>: Intercompany transfer processing.</li> </ul> <p>No external programs are invoked, as the program is self-contained for A/P processing.</p>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP200%20OCL%20Convert%20Voucher%20to%20Payable/AP200RPG/#summary","title":"Summary","text":"<p>The <code>AP200</code> RPG program is a comprehensive A/P Purchase Register system that processes vendor invoices, assigns voucher numbers, handles prepaid and held vouchers, calculates discounts and retentions, and supports intercompany transfers and purchase order integration. It uses 16 files for input, update, and output operations and enforces strict business rules for data integrity. No external programs are called, and all logic is managed via internal subroutines.</p>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP200%20OCL%20Convert%20Voucher%20to%20Payable/AP205RPG/","title":"AP205RPG","text":"<p>The <code>AP205.rpg36.txt</code> file is an RPG III program (<code>AP205</code>) called within the <code>AP200.ocl36.txt</code> OCL procedure to summarize Accounts Payable (A/P) transactions for the Purchase Journal. Below, I provide a detailed explanation of its process steps, business rules, tables/files used, and external programs called, along with its purpose in the context of the <code>AP200</code> OCL procedure.</p>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP200%20OCL%20Convert%20Voucher%20to%20Payable/AP205RPG/#purpose-in-ap200-ocl","title":"Purpose in AP200 OCL","text":"<p>The <code>AP205</code> program is responsible for summarizing A/P journal entries from the Purchase Journal process initiated by <code>AP200</code>. It processes sorted journal register records (<code>APPJJR</code>), accumulates amounts for summarized A/P entries, and writes summarized or detailed journal entries to a temporary general ledger file (<code>TEMGEN</code>) and a printed report (<code>APPRINT</code>). This step finalizes the journal entries for A/P transactions, ensuring they are properly formatted for general ledger integration and reporting.</p> <p>In the <code>AP200</code> OCL procedure, <code>AP205</code> is called after sorting the journal register (<code>APPJ?WS?</code> into <code>APPK?WS?</code>) to produce a summarized output, which is critical for financial reporting and ledger updates.</p>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP200%20OCL%20Convert%20Voucher%20to%20Payable/AP205RPG/#process-steps","title":"Process Steps","text":"<ol> <li>Initialization:</li> <li>Set Indicators and Variables:<ul> <li>Clears indicator <code>60</code> (<code>SETOF 60</code>).</li> <li>Checks if the year/period (<code>KYYYPD</code>) in <code>APCONT</code> is non-zero; if zero, sets indicator <code>99</code> (<code>SETON 99</code>).</li> </ul> </li> <li>Time and Date Setup:<ul> <li>Retrieves system time (<code>TIME</code> to <code>TIMDAT</code>) and formats it into <code>TIME</code> (HHMMSS) and <code>DATE</code> (MMDDYY).</li> <li>Converts <code>DATE</code> to <code>SYSYMD</code> (YYYYMMDD) by multiplying by 10000.01 and moves to <code>SYSDT8</code> (8-digit date).</li> </ul> </li> <li>Page and Separator:<ul> <li>Initializes page number (<code>PAGE</code>) to 0.</li> <li>Sets separator (<code>SEP</code>) to <code>'* '</code> for report formatting.</li> </ul> </li> <li> <p>Company Lookup:</p> <ul> <li>Chains <code>PJCONO</code> (company number from <code>APPJJR</code>) to <code>APCONT</code> to retrieve company name (<code>ACNAME</code>). Sets indicator <code>94</code> if not found.</li> </ul> </li> <li> <p>Process Input Records (<code>APPJJR</code>):</p> </li> <li>Read Input:<ul> <li>Reads records from <code>APPJJR</code> (journal register file) at level <code>L4</code> (company level).</li> </ul> </li> <li>Determine Debit/Credit:<ul> <li>Compares <code>PJCORD</code> (credit/debit flag) to <code>'D'</code>; sets indicator <code>30</code> if debit (<code>DEBIT</code>).</li> </ul> </li> <li>Summarize A/P Entries:<ul> <li>Compares <code>PJTYPE</code> to <code>'AP      '</code>; sets indicator <code>20</code> if true (summarize A/P only).</li> </ul> </li> <li> <p>Accumulate Amount:</p> <ul> <li>Adds <code>PJAMT</code> (amount from <code>APPJJR</code>) to <code>L1AMT</code> (level 1 accumulator) for summarized entries.</li> </ul> </li> <li> <p>Date and Century Handling:</p> </li> <li>Converts <code>PJDATE</code> (purchase journal date) to <code>YMD</code> (YYYYMMDD) by multiplying by 10000.01.</li> <li>Extracts year (<code>YY</code>) from <code>YMD</code>.</li> <li>Compares <code>YY</code> to <code>Y2KCMP</code> (80, from <code>APCONT</code>):<ul> <li>If <code>YY &gt;= 80</code>, sets century (<code>CN</code>) to <code>Y2KCEN</code> (19).</li> <li>Otherwise, adds 1 to <code>Y2KCEN</code> (e.g., 19 + 1 = 20).</li> </ul> </li> <li> <p>Combines century and <code>YMD</code> into <code>CYMD</code> (century + YYYYMMDD).</p> </li> <li> <p>Journal Entry Processing:</p> </li> <li>Non-Summarized Entries:<ul> <li>If not summarized (<code>N20</code>), calls <code>JRNL</code> subroutine to write detailed journal entries.</li> </ul> </li> <li> <p>Summarized Entries:</p> <ul> <li>At level <code>L1</code> (summary level) and if <code>PJTYPE = 'AP      '</code> (<code>20</code>), calls <code>JRNL</code> subroutine to write summarized A/P entries.</li> </ul> </li> <li> <p>JRNL Subroutine:</p> </li> <li>Increments journal reference number (<code>JRREF#</code>).</li> <li>Sets credit/debit flag (<code>CORD</code>) based on <code>PJCORD</code>:<ul> <li>If <code>L1AMT &lt; 0</code> (indicator <code>10</code>), reverses sign of <code>L1AMT</code> and toggles <code>CORD</code> (<code>'C'</code> for credit, <code>'D'</code> for debit).</li> </ul> </li> <li>Accumulates amounts:<ul> <li>If debit (<code>CORD = 'D'</code>, indicator <code>11</code>), adds <code>L1AMT</code> to <code>L4DR</code> (debit total).</li> <li>If credit (<code>CORD != 'D'</code>, <code>N11</code>), adds <code>L1AMT</code> to <code>L4CR</code> (credit total).</li> </ul> </li> <li>Sets journal amount (<code>JRAMT</code>) to <code>L1AMT</code> and resets <code>L1AMT</code> to 0.</li> <li> <p>Checks if gallons (<code>PJGALN</code>) is non-zero (sets indicator <code>60</code>).</p> </li> <li> <p>Write to Output Files:</p> </li> <li>TEMGEN (General Ledger File):<ul> <li>Writes detailed entries (<code>DADD 01N20</code>):</li> <li>Includes company (<code>PJCONO</code>), G/L number (<code>PJGLNO</code>), journal number (<code>PJJRNL</code>), reference (<code>JRREF#</code>), credit/debit (<code>CORD</code>), description (<code>PJDES1</code> or <code>PJDES2</code>), vendor (<code>PJVN10</code>), date (<code>YMD</code>, <code>CYMD</code>), amount (<code>JRAMT</code>), gallons (<code>PJGALN</code>), and receipt (<code>PJRCPT</code>).</li> <li>Writes summarized entries (<code>TADD L1 20</code>):</li> <li>Similar fields but with fixed description (<code>'-SUMMARIZED A/P         '</code>) and <code>PJDATE</code>.</li> </ul> </li> <li> <p>APPRINT (Printed Report):</p> <ul> <li>Prints header (<code>D 103 L4</code> or <code>OFNL4</code>):</li> <li>Company name (<code>ACNAME</code>), page number, date (<code>DATE</code>), time (<code>TIME</code>), journal title (<code>PURCHASE JOURNAL</code>), and period (<code>KYPD</code>, <code>KYPDYY</code>).</li> <li>Prints column headers for journal, reference, description, vendor, G/L number, debit/credit amounts.</li> <li>Prints detailed entries (<code>D 1 01N20</code>):</li> <li>Journal number, reference, description, vendor, G/L number, and amount (debit or credit).</li> <li>Includes gallons and receipt number if <code>PJGALN</code> is non-zero (<code>60</code>).</li> <li>Prints summarized entries (<code>T 1 L1 20</code>):</li> <li>Similar format with <code>'-SUMMARIZED A/P'</code> description.</li> <li>Prints journal totals (<code>T 2 L4</code>):</li> <li>Debit total (<code>L4DR</code>) and credit total (<code>L4CR</code>).</li> </ul> </li> <li> <p>End Processing:</p> </li> <li>Continues reading <code>APPJJR</code> records until end-of-file, processing each at appropriate levels (<code>L4</code>, <code>L1</code>).</li> <li>Outputs final totals and closes files.</li> </ol>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP200%20OCL%20Convert%20Voucher%20to%20Payable/AP205RPG/#business-rules","title":"Business Rules","text":"<ol> <li>Summarization:</li> <li>Only records with <code>PJTYPE = 'AP      '</code> are summarized (indicator <code>20</code>).</li> <li>Summarized entries aggregate amounts (<code>L1AMT</code>) by company and type, written at level <code>L1</code>.</li> <li>Debit/Credit Handling:</li> <li>Determines debit (<code>D</code>) or credit (<code>C</code>) based on <code>PJCORD</code>.</li> <li>If amount is negative, reverses sign and toggles <code>CORD</code> (e.g., negative debit becomes credit).</li> <li>Year 2000 Compliance:</li> <li>Handles dates using <code>Y2KCEN</code> (century, default 19) and <code>Y2KCMP</code> (80) to determine if year is 19xx or 20xx.</li> <li>Error Checking:</li> <li>Validates year/period (<code>KYYYPD</code>) in <code>APCONT</code>; sets indicator <code>99</code> if invalid (zero).</li> <li>Chains to <code>APCONT</code> for company name; sets indicator <code>94</code> if not found.</li> <li>Output Formatting:</li> <li>Detailed entries include vendor, gallons, and receipt data if applicable.</li> <li>Summarized entries use a fixed description and aggregated amounts.</li> <li>Report includes headers, totals, and formatted dates/amounts.</li> <li>Gallons and Receipt:</li> <li>Includes <code>PJGALN</code> (gallons) and <code>PJRCPT</code> (receipt number) in output only if <code>PJGALN</code> is non-zero.</li> </ol>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP200%20OCL%20Convert%20Voucher%20to%20Payable/AP205RPG/#tablesfiles-used","title":"Tables/Files Used","text":"<ul> <li>Input:</li> <li><code>APPJJR</code> (Primary Input, <code>IP</code>):<ul> <li>Journal register file (sorted input from <code>AP200</code>).</li> <li>Fields: <code>PJDEL</code> (delete flag), <code>PJCONO</code> (company), <code>PJJRNL</code> (journal number), <code>PJCORD</code> (credit/debit), <code>PJGLNO</code> (G/L number), <code>PJDES1</code> (description 1), <code>PJDATE</code> (journal date), <code>PJAMT</code> (amount), <code>PJDES2</code> (description 2), <code>PJVN10</code> (vendor), <code>PJTYPE</code> (type), <code>PJGALN</code> (gallons), <code>PJRCPT</code> (receipt).</li> </ul> </li> <li><code>AP205S</code> (Secondary Input, <code>IR</code>):<ul> <li>Sorted journal register file (used for control breaks).</li> <li>Keys: <code>PJCONO</code> (company), <code>PJCORD</code> (credit/debit), <code>PJTYPE</code> (type).</li> </ul> </li> <li><code>APCONT</code> (Chained Input, <code>IC</code>):<ul> <li>A/P control file.</li> <li>Fields: <code>ACNAME</code> (company name), <code>KYYYPD</code> (year/period), <code>KYPDYY</code>, <code>KYPD</code>, <code>JRDATE</code> (journal date), <code>WIREDS</code> (wire transfer description), <code>Y2KCEN</code> (century), <code>Y2KCMP</code> (year compare).</li> </ul> </li> <li>Output:</li> <li><code>TEMGEN</code> (Output, <code>O</code>):<ul> <li>Temporary general ledger file.</li> <li>Stores detailed and summarized journal entries for ledger integration.</li> </ul> </li> <li><code>APPRINT</code> (Printer, <code>O</code>):<ul> <li>Printed Purchase Journal report.</li> <li>Includes headers, detailed/summarized entries, and totals.</li> </ul> </li> </ul>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP200%20OCL%20Convert%20Voucher%20to%20Payable/AP205RPG/#external-programs-called","title":"External Programs Called","text":"<ul> <li>None:</li> <li>The <code>AP205</code> program does not call external programs. It relies on internal subroutines (<code>JRNL</code>) for processing.</li> </ul>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP200%20OCL%20Convert%20Voucher%20to%20Payable/AP205RPG/#role-in-ap200-ocl","title":"Role in AP200 OCL","text":"<p>In the <code>AP200</code> OCL procedure, <code>AP205</code> is called after sorting the journal register (<code>APPJ?WS?</code> into <code>APPK?WS?</code>) to: - Summarize A/P transactions for the Purchase Journal. - Generate a formatted report (<code>APPRINT</code>) for auditing and financial review. - Write journal entries to <code>TEMGEN</code> for integration with the general ledger. - Ensure accurate debit/credit totals and proper date handling for compliance.</p> <p>This step is critical for consolidating A/P data into a summarized format, making it ready for ledger posting and reporting, which aligns with the overall goal of <code>AP200</code> to process and post A/P voucher transactions.</p>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP200%20OCL%20Convert%20Voucher%20to%20Payable/AP205RPG/#key-notes","title":"Key Notes","text":"<ul> <li>Control Breaks:</li> <li>Uses <code>L4</code> (company), <code>L3</code> (credit/debit), <code>L2</code> (type), and <code>L1</code> (summary) for processing records hierarchically.</li> <li>Y2K Handling:</li> <li>Ensures dates are correctly interpreted for 19xx or 20xx centuries.</li> <li>Output Flexibility:</li> <li>Supports both detailed and summarized entries, with conditional inclusion of gallons and receipt data.</li> <li>File Integration:</li> <li>Links with <code>APCONT</code> for company and period data, ensuring consistency with A/P controls.</li> </ul> <p>If you need further details on specific fields, logic, or integration with other OCL steps, let me know!</p>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP200%20OCL%20Convert%20Voucher%20to%20Payable/AP210RPG/","title":"AP210RPG","text":"<p>The <code>AP210.rpg36.txt</code> file is an RPG III program (<code>AP210</code>) called within the <code>AP200.ocl36.txt</code> OCL procedure to post Accounts Payable (A/P) invoices to inventory receipt records. Below, I provide a detailed explanation of its process steps, business rules, tables/files used, and external programs called, along with its purpose in the context of the <code>AP200</code> OCL procedure.</p>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP200%20OCL%20Convert%20Voucher%20to%20Payable/AP210RPG/#purpose-in-ap200-ocl","title":"Purpose in AP200 OCL","text":"<p>The <code>AP210</code> program is responsible for updating inventory receipt records (<code>INFIL1</code> or <code>INTZH1</code>) with A/P invoice data from the transaction file (<code>APTRAN</code>). It matches A/P invoices to inventory receipts based on receipt numbers, updates quantities, amounts, and status, and logs the activity in a printer output file (<code>APLIST</code>). In the <code>AP200</code> OCL procedure, <code>AP210</code> is called after the main Purchase Journal processing to ensure A/P invoices are reflected in inventory records, which is critical for tracking costs and quantities associated with inventory receipts.</p>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP200%20OCL%20Convert%20Voucher%20to%20Payable/AP210RPG/#process-steps","title":"Process Steps","text":"<ol> <li>Initialization:</li> <li>Date and Century Handling:<ul> <li>Retrieves journal date (<code>JRDATE</code>) from the User Data Structure (<code>UDS</code>).</li> <li>Converts <code>JRDATE</code> to <code>JRYMD</code> (YYYYMMDD) by multiplying by 10000.01.</li> <li>Extracts year (<code>JYR</code>) and compares it to <code>Y2KCMP</code> (80, from <code>UDS</code>):</li> <li>If <code>JYR &gt;= 80</code>, sets century (<code>JCN</code>) to <code>Y2KCEN</code> (19).</li> <li>Otherwise, adds 1 to <code>Y2KCEN</code> (e.g., 19 + 1 = 20).</li> <li>Combines century and <code>JRYMD</code> into <code>JRYM8</code> (century + YYYYMMDD).</li> </ul> </li> <li>Variable Setup:<ul> <li>Clears indicators <code>20</code>, <code>90</code>, <code>91</code>, <code>92</code> and sets zero fields (<code>ZERO2</code>, <code>ZERO4</code>, <code>ZERO6</code>, <code>ZERO8</code>) to 0.</li> <li>Sets <code>ONCE</code> to 1 to ensure date processing occurs only once.</li> </ul> </li> <li> <p>Amount Setup:</p> <ul> <li>Moves <code>APGRAM</code> (gross amount from <code>APTRAN</code>) to <code>APAMT</code> (working amount field).</li> </ul> </li> <li> <p>Skip Deleted or Sales Order Records:</p> </li> <li>Checks if <code>ATSORN</code> (sales order number) is zero (<code>IFEQ *ZERO</code>):<ul> <li>If non-zero, skips to <code>END</code> (bypasses posting for sales order-related invoices, per <code>JB01</code> revision).</li> </ul> </li> <li> <p>Checks if header (<code>APHDEL</code>) or detail (<code>APDDEL</code>) delete flags are not <code>'D'</code>:</p> <ul> <li>If either is deleted, skips to <code>END</code>.</li> </ul> </li> <li> <p>Process A/P Invoice:</p> </li> <li>Determine Processing Type:<ul> <li>If indicator <code>20</code> is off (<code>N20</code>), calls <code>NORMAL</code> subroutine (standard invoice processing).</li> <li>If indicator <code>20</code> is on, calls <code>FREIGH</code> subroutine (freight invoice processing, which sets indicator <code>11</code> and calls <code>NORMAL</code>).</li> </ul> </li> <li>Receipt Key:<ul> <li>Builds <code>RCTKEY</code> (9 bytes) by combining <code>APCONO</code> (company number, 3 bytes) and <code>APREC#</code> (receipt number, 6 bytes).</li> </ul> </li> <li> <p>Log to Printer:</p> <ul> <li>Writes detail record to <code>APLIST</code> (<code>EXCPTDTL</code>) with invoice details (company, vendor, invoice number, date, G/L, receipt, gallons, amount, status).</li> </ul> </li> <li> <p>NORMAL Subroutine:</p> </li> <li> <p>Match Receipt (Exact Match):</p> <ul> <li>Sets lower limit (<code>SETLL</code>) on <code>INFIL1</code> and <code>INTZH1</code> using <code>RCTKEY</code>.</li> <li>Reads <code>INFIL1</code> (indicator <code>76</code>) until end-of-file (<code>90</code>) or match.</li> <li>If end-of-file on <code>INFIL1</code>, switches to <code>INTZH1</code> (indicator <code>77</code>) and reads.</li> <li>If a match is found (<code>N90</code>):</li> <li>Calculates remaining quantity (<code>RNQTY = IHNQTY + IHNQTF - IHAPTQ - IHAPTF</code>).</li> <li>If <code>APGAL</code> (A/P gallons) equals <code>RNQTY</code>, updates the record:<ul> <li>Adds <code>APAMT</code> to <code>IHAPTD</code> (total dollars).</li> <li>Adds <code>APGAL</code> to <code>IHAPTQ</code> (total quantity).</li> <li>Sets <code>IHCLCD</code> (status) to <code>'O'</code> (open) or <code>'C'</code> (closed) based on <code>APCLCD</code>.</li> <li>Updates <code>IHCLDT</code> (closed date, YMD) and <code>IHCLD8</code> (closed date, CYMD) with <code>JRYMD</code> and <code>JRYM8</code>.</li> <li>Updates <code>APINVN</code> (invoice number) and <code>IHPONO</code> (PO number).</li> <li>Writes update to <code>INFIL1</code> or <code>INTZH1</code> (<code>EXCPTUPDRCP</code>).</li> <li>Logs to <code>APLIST</code> (<code>EXCPTDT01</code>).</li> <li>Clears <code>APAMT</code> and <code>APGAL</code>.</li> </ul> </li> </ul> </li> <li> <p>Match Receipt (Partial Match):</p> <ul> <li>If no exact match, re-reads <code>INFIL1</code> and <code>INTZH1</code> to find a record with more gallons than <code>APGAL</code>.</li> <li>If found (<code>N90</code> and <code>APGAL &lt; RNQTY</code>):</li> <li>Updates <code>IHAPTD</code>, <code>IHAPTQ</code>, <code>IHCLCD</code>, <code>IHCLDT</code>, <code>IHCLD8</code>, <code>APINVN</code>, and <code>IHPONO</code> as above.</li> <li>Writes update (<code>EXCPTUPDRCP</code>).</li> <li>Logs to <code>APLIST</code> (<code>EXCPTDT02</code>).</li> <li>Clears <code>APAMT</code> and <code>APGAL</code>.</li> </ul> </li> <li> <p>No Match, Update First Record:</p> <ul> <li>If no match and <code>APGAL</code> is non-zero, reads first record from <code>INFIL1</code> or <code>INTZH1</code>.</li> <li>Updates <code>IHAPTD</code>, <code>IHAPTQ</code>, <code>IHCLCD</code>, <code>IHCLDT</code>, <code>IHCLD8</code>, <code>APINVN</code>, and <code>IHPONO</code>.</li> <li>Writes update (<code>EXCPTUPDRCP</code>).</li> <li>Logs to <code>APLIST</code> (<code>EXCPTDT03</code>).</li> <li>Clears <code>APAMT</code> and <code>APGAL</code>.</li> </ul> </li> <li> <p>FREIGH Subroutine:</p> </li> <li>Sets indicator <code>11</code> to flag freight processing.</li> <li>Calls <code>NORMAL</code> subroutine to process freight invoices similarly to standard invoices.</li> <li> <p>Clears indicator <code>11</code>.</p> </li> <li> <p>End Processing:</p> </li> <li>Continues reading <code>APTRAN</code> records until end-of-file.</li> <li>Closes files and terminates.</li> </ol>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP200%20OCL%20Convert%20Voucher%20to%20Payable/AP210RPG/#business-rules","title":"Business Rules","text":"<ol> <li>Skip Sales Orders (<code>JB01</code>, 07/08/10):</li> <li>Bypasses posting if <code>ATSORN</code> (sales order number) is non-zero, as sales order invoices are not posted to inventory receipts.</li> <li>Skip Deleted Records:</li> <li>Skips records where <code>APHDEL</code> or <code>APDDEL</code> is <code>'D'</code> (deleted).</li> <li>Dual File Support (<code>JB02</code>, 09/18/14):</li> <li>Checks both <code>INFIL1</code> (inventory file) and <code>INTZH1</code> (holding file) for receipt matches, switching if no match is found in <code>INFIL1</code>.</li> <li>Quantity Matching:</li> <li>Matches A/P gallons (<code>APGAL</code>) to remaining receipt quantity (<code>IHNQTY + IHNQTF - IHAPTQ - IHAPTF</code>).</li> <li>Updates the first record with sufficient gallons or the first available record if no match.</li> <li>Status Update:</li> <li>Sets <code>IHCLCD</code> to <code>'O'</code> (open) or <code>'C'</code> (closed) based on <code>APCLCD</code>.</li> <li>Updates closed dates (<code>IHCLDT</code>, <code>IHCLD8</code>) with journal date.</li> <li>Freight Invoices:</li> <li>Processes freight invoices separately but uses the same <code>NORMAL</code> logic (indicator <code>11</code> flags freight).</li> <li>Printer Logging (<code>JB03</code>, 09/18/14):</li> <li>Logs all updates to <code>APLIST</code> for debugging and verification, with distinct exception records (<code>DTL</code>, <code>DT01</code>, <code>DT02</code>, <code>DT03</code>).</li> <li>Y2K Compliance:</li> <li>Handles dates using <code>Y2KCEN</code> (19) and <code>Y2KCMP</code> (80) to determine 19xx or 20xx century.</li> <li>Field Updates (<code>MG04</code>, 09/15/15):</li> <li>Supports expanded <code>INFIL1</code> (448 bytes) and <code>APINVN</code> (20 bytes).</li> <li>Includes PO number (<code>IHPONO</code>) from the purchase order system.</li> </ol>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP200%20OCL%20Convert%20Voucher%20to%20Payable/AP210RPG/#tablesfiles-used","title":"Tables/Files Used","text":"<ul> <li>Input:</li> <li><code>APTRAN</code> (Primary Input, <code>IP</code>):<ul> <li>A/P transaction file.</li> <li>Fields: <code>APHDEL</code> (header delete flag), <code>APCONO</code> (company), <code>APVEND</code> (vendor), <code>ATCNVO</code> (canceled voucher), <code>APINVD</code> (invoice date), <code>ATSORN</code> (sales order number), <code>ATSSRN</code> (sales sequence number), <code>APINVN</code> (invoice number), <code>APIN10</code> (short invoice number), <code>APDDEL</code> (detail delete flag), <code>APREC#</code> (receipt number), <code>APGAL</code> (gallons), <code>APGL</code> (G/L number), <code>APGRAM</code> (gross amount), <code>APCLCD</code> (open/closed status).</li> </ul> </li> <li><code>INFIL1</code> (Update/Input, <code>UF</code>):<ul> <li>Inventory file (448 bytes).</li> <li>Fields: <code>IHNQTY</code> (net quantity), <code>IHNQTF</code> (net quantity fraction), <code>IHUNMS</code> (unit of measure), <code>IHAPID</code> (last invoice date), <code>IHAPLE</code> (last expense G/L), <code>IHAPLP</code> (last purchase journal), <code>IHAPTQ</code> (total quantity), <code>IHAPTF</code> (total quantity fraction), <code>IHAPTD</code> (total dollars), <code>IHCLCD</code> (open/closed status), <code>IHCLDT</code> (closed date, YMD), <code>IHCLD8</code> (closed date, CYMD), <code>IHAPI#</code> (last invoice number), <code>IHPONO</code> (PO number).</li> </ul> </li> <li><code>INTZH1</code> (Update/Input, <code>UF</code>):<ul> <li>Inventory transaction holding file (592 bytes).</li> <li>Fields: Same as <code>INFIL1</code> but with different positions (e.g., <code>IHAPTD</code> at 171-179, <code>IHCLCD</code> at 170).</li> </ul> </li> <li>Output:</li> <li><code>INFIL1</code> (Update, <code>E 76 UPDRCP</code>):<ul> <li>Updates inventory receipt records with A/P data.</li> </ul> </li> <li><code>INTZH1</code> (Update, <code>E 77 UPDRCP</code>):<ul> <li>Updates holding file records with A/P data.</li> </ul> </li> <li><code>APLIST</code> (Printer, <code>O</code>):<ul> <li>Printer output file for logging (164 bytes).</li> <li>Logs invoice details (<code>DTL</code>) and update details (<code>DT01</code>, <code>DT02</code>, <code>DT03</code>) with fields like company, vendor, invoice number, date, G/L, receipt, gallons, amount, status, and journal data.</li> </ul> </li> </ul>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP200%20OCL%20Convert%20Voucher%20to%20Payable/AP210RPG/#external-programs-called","title":"External Programs Called","text":"<ul> <li>None:</li> <li>The <code>AP210</code> program does not call external programs. It relies on internal subroutines (<code>NORMAL</code>, <code>FREIGH</code>) for processing.</li> </ul>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP200%20OCL%20Convert%20Voucher%20to%20Payable/AP210RPG/#role-in-ap200-ocl","title":"Role in AP200 OCL","text":"<p>In the <code>AP200</code> OCL procedure, <code>AP210</code> is called after the main Purchase Journal processing (<code>AP200</code>) and journal summarization (<code>AP205</code>) to: - Post A/P invoice data (amounts, quantities, invoice numbers, PO numbers) to inventory receipt records in <code>INFIL1</code> or <code>INTZH1</code>. - Ensure inventory records reflect A/P costs and quantities, maintaining alignment between financial and inventory systems. - Log updates to <code>APLIST</code> for verification, especially useful for debugging (per <code>JB03</code>). - Support freight invoices and bypass sales order-related invoices, ensuring accurate inventory cost tracking.</p> <p>This step is critical for integrating A/P transactions with inventory management, ensuring that receipt records are updated with financial data for accurate cost tracking and reporting.</p>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP200%20OCL%20Convert%20Voucher%20to%20Payable/AP210RPG/#key-notes","title":"Key Notes","text":"<ul> <li>Revisions:</li> <li><code>JB01</code> (07/08/10): Bypasses sales order invoices.</li> <li><code>JB02</code> (09/18/14): Adds support for <code>INTZH1</code> (holding file).</li> <li><code>JB03</code> (09/18/14): Adds <code>APLIST</code> for logging.</li> <li><code>MG04</code> (09/15/15): Expands <code>INFIL1</code> and adds invoice number (<code>APINVN</code>) and PO number (<code>IHPONO</code>).</li> <li>File Switching:</li> <li>Dynamically switches between <code>INFIL1</code> and <code>INTZH1</code> if no match is found, ensuring flexibility in receipt processing.</li> <li>Error Handling:</li> <li>Skips deleted records and non-inventory invoices (e.g., sales orders).</li> <li>Logs all updates for traceability.</li> <li>Quantity Logic:</li> <li>Matches A/P gallons to receipt quantities, updating the first suitable record if no exact match is found.</li> </ul> <p>If you need further details on specific fields, logic, or integration with other OCL steps, let me know!</p>"},{"location":"accounts-payable/02%20Payables/AP196%20OCL%20Status%20Code%20Update/196OCL/","title":"196OCL","text":"<p>The provided files, <code>AP196.ocl36.txt``</code> and <code>AP196.rpg36 (1).txt</code>, describe an A/P Voucher Status Code Update process within an IBM AS/400 (or IBM i) environment. The first file (<code></code>AP196.ocl36.txt<code>`</code>) is an OCL (Operation Control Language) script that controls the execution flow, while the second (<code>AP196.rpg36 (1).txt</code>) is an RPG III program that handles the core logic for updating voucher status codes. Below, I\u2019ll explain what these files do, outline the process steps, business rules, tables used, and any external programs called.</p>"},{"location":"accounts-payable/02%20Payables/AP196%20OCL%20Status%20Code%20Update/196OCL/#overview-of-what-these-files-do","title":"Overview of What These Files Do","text":"<ul> <li> <p>AP196.ocl36.txt<code>`</code> (OCL Script):   This script orchestrates the execution of the A/P voucher status code update process. It defines file allocations, conditionally runs the <code>AP196</code> program to modify voucher status codes, and optionally calls <code>AP197</code> to generate an edit report if errors are detected. The script ensures that the process terminates if no records are available for processing and manages output queues for reports.</p> </li> <li> <p><code>AP196.rpg36 (1).txt</code> (RPG III Program):   This is the core program (<code>AP196</code>) that provides an interactive interface for users to modify the status codes (e.g., hold codes) of accounts payable (A/P) vouchers. It validates input data (company number, vendor number, voucher number), retrieves related records, allows users to update hold codes and descriptions, and updates or deletes records in the voucher control file (<code>APVCTR</code>). The program uses a workstation display to interact with the user via two screens: one for input validation and another for status code modification.</p> </li> </ul> <p>Together, these files implement a process to: - Allow users to update or delete the hold status of A/P vouchers. - Validate input against master files (company, vendor, open payables). - Generate an edit report (via <code>AP197</code>) if errors occur. - Ensure data integrity by checking for valid records and handling deletions appropriately.</p>"},{"location":"accounts-payable/02%20Payables/AP196%20OCL%20Status%20Code%20Update/196OCL/#process-steps","title":"Process Steps","text":"<ol> <li>OCL Script Execution (<code>AP196.ocl36.txt</code>):</li> <li>File Allocation:<ul> <li>Allocates files: <code>APVCTR</code> (voucher control), <code>APCONT</code> (company master), <code>APVEND</code> (vendor master), and <code>APOPNH</code> (open payables header).</li> <li>Uses shared disposition (<code>DISP-SHR</code>) to allow concurrent access.</li> </ul> </li> <li>Initial Check:<ul> <li>Checks if the <code>APVCTR</code> file (<code>?9?APVC?WS?</code>) is empty (record count = 00000000).</li> <li>If empty, the process jumps to the <code>END</code> tag and terminates.</li> </ul> </li> <li>Run <code>AP196</code>:<ul> <li>Loads and executes the <code>AP196</code> program to handle interactive voucher status updates.</li> </ul> </li> <li>Error Handling and Reporting:<ul> <li>If <code>AP196</code> processes records (i.e., <code>APVCTR</code> is not empty after execution), it loads <code>AP197</code> to generate an edit report.</li> <li>Overrides the printer file (<code>LIST</code>) to direct output to either <code>QUSRSYS/APSTEDIT</code> or <code>QUSRSYS/TESTOUTQ</code> based on a condition (<code>?9?/G</code>).</li> <li>Copies the report to an output queue (<code>APSTEDIT</code>) with the name \u201cAP STATUS CHG EDIT\u201d and moves it to <code>JUNKOUTQ</code> if necessary.</li> </ul> </li> <li> <p>Termination:</p> <ul> <li>If no records remain in <code>APVCTR</code>, the process ends.</li> </ul> </li> <li> <p>RPG Program Execution (<code>AP196.rpg36</code>):</p> </li> <li>Screen 1 (AP196S1):<ul> <li>Displays a screen to accept user input: company number (<code>CONO</code>), vendor number (<code>VEND</code>), and voucher number (<code>VOUCH</code>).</li> <li>Validates input by chaining (looking up) records in:</li> <li><code>APCONT</code> (company master) to verify the company number.</li> <li><code>APVEND</code> (vendor master) to verify the vendor number.</li> <li><code>APVCTR</code> (voucher control) to check if a voucher record exists.</li> <li><code>APOPNH</code> (open payables header) to retrieve additional voucher details.</li> <li>If any validation fails (e.g., invalid company, vendor, or voucher), an error message is displayed (from the <code>COM</code> array), and the user is prompted to correct the input.</li> <li>If valid, retrieves the current hold code (<code>HOLD</code>) and hold description (<code>HLDDSC</code>) from either <code>APVCTR</code> or <code>APOPNH</code> and proceeds to Screen 2.</li> </ul> </li> <li>Screen 2 (AP196S2):<ul> <li>Displays the validated voucher details along with the current hold code and description.</li> <li>Allows the user to modify the hold code (<code>HOLD</code>) and hold description (<code>HLDDSC</code>).</li> <li>Updates the <code>APVCTR</code> file with the new values or deletes the record if requested.</li> </ul> </li> <li>Function Key Handling:<ul> <li>KA (Rekey): Clears the screen and redisplays Screen 1 for new input without adding or updating records.</li> <li>KD (Delete): Deletes the voucher record from <code>APVCTR</code> if it exists.</li> <li>KG (End of Job): Terminates the program.</li> </ul> </li> <li>Record Processing:<ul> <li>If a record exists in <code>APVCTR</code>, it updates the hold code and description.</li> <li>If no record exists, it may create a new record or display an error.</li> <li>Deletes records from <code>APVCTR</code> when the delete function is invoked.</li> </ul> </li> <li>Error Handling:<ul> <li>Sets indicators (e.g., 81, 82, 90, 91) to control screen display and error messages.</li> <li>Clears fields after each operation to prevent data carryover.</li> </ul> </li> </ol>"},{"location":"accounts-payable/02%20Payables/AP196%20OCL%20Status%20Code%20Update/196OCL/#business-rules","title":"Business Rules","text":"<ol> <li>Input Validation:</li> <li>The company number (<code>CONO</code>) must exist in <code>APCONT</code> and not be marked as deleted (<code>ACDEL \u2260 'D'</code>).</li> <li>The vendor number (<code>VEND</code>) must exist in <code>APVEND</code> and not be marked as deleted (<code>VNDEL \u2260 'D'</code>).</li> <li>The voucher number (<code>VOUCH</code>) must correspond to a valid record in either <code>APVCTR</code> or <code>APOPNH</code>. If not found in <code>APVCTR</code>, it checks <code>APOPNH</code>.</li> <li> <p>Invalid inputs trigger error messages (e.g., \u201cINVALID COMPANY #\u201d, \u201cINVALID VENDOR #\u201d, \u201cINVALID COMBINATION\u201d).</p> </li> <li> <p>Hold Code and Description:</p> </li> <li>The hold code (<code>HOLD</code>) and hold description (<code>HLDDSC</code>) can be updated in <code>APVCTR</code>.</li> <li>If a voucher exists in <code>APOPNH</code>, its hold code (<code>OPHALT</code>) and description (<code>OPHDES</code>) are used as defaults if no <code>APVCTR</code> record exists.</li> <li> <p>The hold code and description are written to <code>APVCTR</code> when updated or added.</p> </li> <li> <p>Record Deletion:</p> </li> <li>A voucher record can be deleted from <code>APVCTR</code> using the KD function key.</li> <li> <p>Deletion is only performed if the record exists in <code>APVCTR</code>.</p> </li> <li> <p>Error Reporting:</p> </li> <li>If errors occur during processing, <code>AP197</code> is called to generate an edit report listing issues.</li> <li> <p>The report is sent to a specified output queue for review.</p> </li> <li> <p>Data Integrity:</p> </li> <li>The program ensures that only valid vouchers are processed by checking master files.</li> <li>Fields are cleared after each operation to prevent residual data from affecting subsequent transactions.</li> </ol>"},{"location":"accounts-payable/02%20Payables/AP196%20OCL%20Status%20Code%20Update/196OCL/#tables-used","title":"Tables Used","text":"<p>The following files (tables) are referenced in the OCL script and RPG program:</p> <ol> <li><code>APVCTR</code> (Voucher Control File):</li> <li>Type: Update file (<code>UF</code> in RPG).</li> <li>Fields:<ul> <li><code>ATKEY</code> (key field, 12 bytes, includes company, vendor, and voucher numbers).</li> <li><code>ATHOLD</code> (hold code, 1 byte).</li> <li><code>ATHLDS</code> (hold description, 25 bytes).</li> <li><code>ATOHLD</code> (open hold code, 1 byte).</li> <li><code>ATOHDS</code> (open hold description, 25 bytes).</li> </ul> </li> <li> <p>Purpose: Stores voucher status codes and descriptions. Updated or deleted by <code>AP196</code>.</p> </li> <li> <p><code>APCONT</code> (Company Master File):</p> </li> <li>Type: Input file (<code>IF</code> in RPG).</li> <li>Fields:<ul> <li><code>ACDEL</code> (delete flag, 1 byte, 'D' indicates deleted).</li> <li><code>ACNAME</code> (company name, 30 bytes).</li> </ul> </li> <li> <p>Purpose: Validates company numbers and retrieves company names for display.</p> </li> <li> <p><code>APVEND</code> (Vendor Master File):</p> </li> <li>Type: Input file (<code>IF</code> in RPG).</li> <li>Fields:<ul> <li><code>VNDEL</code> (delete flag, 1 byte, 'D' indicates deleted).</li> <li><code>VNCO</code> (company number, 29 bytes).</li> <li><code>VNVEND</code> (vendor number, 5 bytes).</li> <li><code>VNNAME</code> (vendor name, 30 bytes).</li> </ul> </li> <li> <p>Purpose: Validates vendor numbers and retrieves vendor names for display.</p> </li> <li> <p><code>APOPNH</code> (Open Payables Header File):</p> </li> <li>Type: Input file (<code>IF</code> in RPG).</li> <li>Fields:<ul> <li><code>OPDEL</code> (delete flag, 1 byte, 'D' indicates deleted).</li> <li><code>OPCONO</code> (company number, 29 bytes).</li> <li><code>OPVEND</code> (vendor number, 5 bytes).</li> <li><code>OPVONO</code> (voucher number, 5 bytes).</li> <li><code>OPHALT</code> (hold code, 1 byte).</li> <li><code>OPHDES</code> (hold description, 25 bytes).</li> <li>Other fields (e.g., invoice date, due date, gross amount) are defined but not used in this context.</li> </ul> </li> <li> <p>Purpose: Provides voucher details if no record exists in <code>APVCTR</code>. Supplies default hold code and description.</p> </li> <li> <p><code>SCREEN</code> (Workstation File):</p> </li> <li>Type: Combined file (<code>CP</code> in RPG).</li> <li>Purpose: Defines the interactive display for user input and output. Uses two formats:<ul> <li><code>AP196S1</code>: Input screen for company, vendor, and voucher numbers.</li> <li><code>AP196S2</code>: Update screen for hold code and description.</li> </ul> </li> </ol>"},{"location":"accounts-payable/02%20Payables/AP196%20OCL%20Status%20Code%20Update/196OCL/#external-programs-called","title":"External Programs Called","text":"<ol> <li><code>AP197</code>:</li> <li>Called By: <code>AP196.ocl36.txt</code> (OCL script).</li> <li>Purpose: Generates an edit report listing errors or changes made during the voucher status update process.</li> <li>Condition: Executed only if <code>APVCTR</code> contains records after <code>AP196</code> runs (i.e., not empty).</li> <li>Files Used: <code>APVCTR</code>, <code>APVEND</code>, <code>APCONT</code> (same as <code>AP196</code>).</li> <li>Output: Report sent to <code>QUSRSYS/APSTEDIT</code> or <code>QUSRSYS/TESTOUTQ</code>, then copied to <code>JUNKOUTQ</code> withNo other external programs are called by the RPG program itself.</li> </ol>"},{"location":"accounts-payable/02%20Payables/AP196%20OCL%20Status%20Code%20Update/196OCL/#detailed-summary","title":"Detailed Summary","text":"<ul> <li>AP196.ocl36.txt script sets up the environment, runs <code>AP196 program</code>, and conditionally calls <code>AP196</code> for reporting, ensuring efficient process control.</li> <li>The AP196 program (RPG III)** provides an interactive interface for updating or deleting voucher status codes, with robust validation against master files.</li> <li>Business rules ensure data integrity through validation and deletion checks.</li> <li>Tables include voucher control (<code>APVCTR</code>), company master (<code>APCONT</code>), vendor master (<code>VEND</code>), and open payables (<code>APOPNH</code>).</li> <li>External program <code>AP197</code> is used for error reporting.</li> </ul> <p>This process is typical of legacy AS/400 applications for managing A/P workflows, focusing on user-driven updates with strong validation to maintain accurate financial records.</p>"},{"location":"accounts-payable/02%20Payables/AP196%20OCL%20Status%20Code%20Update/197RPG/","title":"197RPG","text":"<p>The <code>AP197.rpg36.txt</code> file is an RPG III program (<code>AP197</code>) designed to generate an edit report for the A/P Voucher Status Code Update process, complementing the functionality of <code>AP196</code> described previously. Below, I provide a detailed explanation of what this program does, including its process steps, business rules, tables used, and any external programs called, formatted consistently with the prior response.</p>"},{"location":"accounts-payable/02%20Payables/AP196%20OCL%20Status%20Code%20Update/197RPG/#overview-of-what-ap197-does","title":"Overview of What AP197 Does","text":"<p>The <code>AP197</code> program is responsible for producing a printed report that lists the details of voucher status code changes made by the <code>AP196</code> program. It reads records from the voucher control file (<code>APVCTR</code>), retrieves associated company and vendor information, and formats a report to display vendor details, voucher numbers, current status codes, and their descriptions. The report serves as an audit trail or error-checking mechanism to verify the modifications made to voucher status codes, highlighting whether prior hold codes existed.</p> <p>This program is called by the OCL script (<code>AP196.ocl36.txt</code>) when records remain in <code>APVCTR</code> after <code>AP196</code> execution, ensuring that any changes are documented for review.</p>"},{"location":"accounts-payable/02%20Payables/AP196%20OCL%20Status%20Code%20Update/197RPG/#process-steps","title":"Process Steps","text":"<ol> <li>Initialization:</li> <li>Retrieves the system time and date (<code>TIMDAT</code>) and formats them into <code>SYSTIM</code> (time) and <code>SYSDAT</code> (date) for inclusion in the report header.</li> <li>Initializes the page counter (<code>PAGE</code>) to zero.</li> <li> <p>Sets a separator line (<code>SEP</code>) to \"* \" for formatting the report.</p> </li> <li> <p>Processing by Company (Level Break L2):</p> </li> <li>Loops through records in <code>APVCTR</code> grouped by company number (<code>ATCONO</code>), using the level break indicator <code>L2</code>.</li> <li> <p>For each company:</p> <ul> <li>Chains (looks up) the company number in <code>APCONT</code> to retrieve the company name (<code>ACNAME</code>).</li> <li>If the company is not found (indicator 92 on), the company name is not printed in the report header.</li> <li>Initializes a field <code>L2CLAM</code> (likely a claim amount, but unused in output) to zero.</li> </ul> </li> <li> <p>Detail Record Processing:</p> </li> <li> <p>For each record in <code>APVCTR</code>:</p> <ul> <li>Checks if the open hold code (<code>ATOHLD</code>) and open hold description (<code>ATOHDS</code>) are blank.</li> <li>If both are blank, sets indicator 50 to indicate \"NO PRIOR HOLD CODE\" in the report.</li> <li>Constructs a vendor key (<code>VENKEY</code>) by combining the company number (<code>ATCONO</code>) and vendor number (<code>ATVEND</code>).</li> <li>Chains the vendor key to <code>APVEND</code> to retrieve the vendor name (<code>VNAME</code>).</li> <li>If the vendor is not found (indicator 99 on), clears the vendor name (<code>VENDNM</code>) to blanks.</li> <li>Writes a detail line to the report (<code>LIST</code>), including:</li> <li>Vendor number (<code>ATVEND</code>).</li> <li>Vendor name (<code>VENDNM</code>).</li> <li>Voucher number (<code>ATVOUC</code>).</li> <li>Current hold code (<code>ATHOLD</code>).</li> <li>Current hold description (<code>ATHLDS</code>).</li> <li>Open hold code (<code>ATOHLD</code>) and description (<code>ATOHDS</code>), if present; otherwise, \"NO PRIOR HOLD CODE\" is printed.</li> </ul> </li> <li> <p>Report Formatting:</p> </li> <li>Outputs a report header for each company (on <code>L2</code> break or overflow):<ul> <li>Includes the company name (<code>ACNAME</code>), page number (<code>PAGE</code>), and system date (<code>SYSDAT</code>).</li> <li>Prints a title: \"A/P VOUCHER STATUS CODE MODIFY EDIT\" with the system time (<code>SYSTIM</code>).</li> </ul> </li> <li>Outputs column headings:<ul> <li>\"VENDOR\", \"NAME\", \"VOUCHER NUMBER\", \"STATUS CODE\", \"CODE DESCRIPTION\", \"CURRENT VALUES\".</li> </ul> </li> <li>Uses separator lines (<code>SEP</code>) to visually separate sections.</li> <li> <p>Handles overflow (<code>OF</code>) to ensure proper pagination.</p> </li> <li> <p>Output Generation:</p> </li> <li>Writes the formatted report to the printer file (<code>LIST</code>), which is directed to an output queue (e.g., <code>QUSRSYS/APSTEDIT</code> or <code>QUSRSYS/TESTOUTQ</code>) as specified in the OCL script.</li> </ol>"},{"location":"accounts-payable/02%20Payables/AP196%20OCL%20Status%20Code%20Update/197RPG/#business-rules","title":"Business Rules","text":"<ol> <li>Data Validation:</li> <li>The program assumes that records in <code>APVCTR</code> are valid, as they are pre-processed by <code>AP196</code>.</li> <li>Company numbers (<code>ATCONO</code>) are validated against <code>APCONT</code>. If not found, the company name is omitted from the report header.</li> <li> <p>Vendor numbers (<code>ATVEND</code>) are validated against <code>APVEND</code>. If not found, the vendor name is set to blanks in the report.</p> </li> <li> <p>Hold Code Reporting:</p> </li> <li>If the open hold code (<code>ATOHLD</code>) and description (<code>ATOHDS</code>) are both blank, the report indicates \"NO PRIOR HOLD CODE\".</li> <li> <p>Otherwise, the open hold code and description are printed to show the prior status.</p> </li> <li> <p>Report Structure:</p> </li> <li>The report is grouped by company number (<code>ATCONO</code>), with a header printed for each company.</li> <li>Detail lines list each voucher's status, including current and prior hold codes.</li> <li> <p>Page breaks are managed using the overflow indicator (<code>OF</code>) and level break (<code>L2</code>).</p> </li> <li> <p>Error Handling:</p> </li> <li>Missing company or vendor records do not halt the program; instead, blank values are used in the report.</li> <li> <p>The program does not modify any files, ensuring it is read-only and safe for audit purposes.</p> </li> <li> <p>Output Destination:</p> </li> <li>The report is sent to the printer file (<code>LIST</code>), with the output queue controlled by the OCL script (<code>AP196.ocl36.txt</code>).</li> </ol>"},{"location":"accounts-payable/02%20Payables/AP196%20OCL%20Status%20Code%20Update/197RPG/#tables-used","title":"Tables Used","text":"<p>The following files (tables) are referenced in the <code>AP197</code> program:</p> <ol> <li><code>APVCTR</code> (Voucher Control File):</li> <li>Type: Input primary file (<code>IP</code> in RPG).</li> <li>Fields:<ul> <li><code>ATDEL</code> (delete flag, 1 byte, not used in output).</li> <li><code>ATCONO</code> (company number, 2 bytes, used for level break and lookup).</li> <li><code>ATVEND</code> (vendor number, 5 bytes).</li> <li><code>ATVOUC</code> (voucher number, 5 bytes).</li> <li><code>ATHOLD</code> (current hold code, 1 byte).</li> <li><code>ATHLDS</code> (current hold description, 25 bytes).</li> <li><code>ATOHLD</code> (open hold code, 1 byte).</li> <li><code>ATOHDS</code> (open hold description, 25 bytes).</li> </ul> </li> <li> <p>Purpose: Primary input file containing voucher status records to be reported.</p> </li> <li> <p><code>APCONT</code> (Company Master File):</p> </li> <li>Type: Input chained file (<code>IC</code> in RPG).</li> <li>Fields:<ul> <li><code>ACNAME</code> (company name, 30 bytes).</li> </ul> </li> <li> <p>Purpose: Provides company names for the report header, looked up by company number (<code>ATCONO</code>).</p> </li> <li> <p><code>APVEND</code> (Vendor Master File):</p> </li> <li>Type: Input file (<code>IF</code> in RPG).</li> <li>Fields:<ul> <li><code>VNDEL</code> (delete flag, 1 byte, not used in output).</li> <li><code>VNCO</code> (company number, 29 bytes, not used in output).</li> <li><code>VNVEND</code> (vendor number, 5 bytes).</li> <li><code>VNAME</code> (vendor name, 30 bytes).</li> <li><code>VNADD1</code> (address line 1, 30 bytes, not used in output).</li> </ul> </li> <li> <p>Purpose: Provides vendor names for the report, looked up by a composite key of company and vendor numbers.</p> </li> <li> <p><code>LIST</code> (Printer File):</p> </li> <li>Type: Output file (<code>O</code> in RPG).</li> <li>Purpose: Defines the report output format, with a line length of 132 characters. Used to print the edit report.</li> </ol>"},{"location":"accounts-payable/02%20Payables/AP196%20OCL%20Status%20Code%20Update/197RPG/#external-programs-called","title":"External Programs Called","text":"<ul> <li>None:   The <code>AP197</code> program does not call any external programs. It is a standalone report generator invoked by the OCL script (<code>AP196.ocl36.txt</code>) when needed.</li> </ul>"},{"location":"accounts-payable/02%20Payables/AP196%20OCL%20Status%20Code%20Update/197RPG/#detailed-summary","title":"Detailed Summary","text":"<ul> <li>Purpose: The <code>AP197</code> program generates an edit report to document changes to voucher status codes made by <code>AP196</code>, serving as an audit or verification tool.</li> <li>Process: Reads <code>APVCTR</code> records, retrieves company and vendor details, and formats a report with headers, column headings, and detail lines showing voucher status codes and descriptions.</li> <li>Business Rules: Validates company and vendor data, handles missing records gracefully, and flags vouchers with no prior hold codes.</li> <li>Tables: Uses <code>APVCTR</code> (primary input), <code>APCONT</code> (company lookup), <code>APVEND</code> (vendor lookup), and <code>LIST</code> (report output).</li> <li>External Programs: None; operates independently under the control of the OCL script.</li> </ul> <p>This program is a typical AS/400 reporting application, designed to provide a clear, structured output for financial oversight in an accounts payable context.</p>"},{"location":"accounts-payable/03%20Payment%20Cycle/AP150%20OCL%20Payment%20Selection%20%26%20Rpt/AP150%20Summary/","title":"AP150 Summary","text":""},{"location":"accounts-payable/03%20Payment%20Cycle/AP150%20OCL%20Payment%20Selection%20%26%20Rpt/AP150%20Summary/#use-cases-implemented-by-the-ap150-ap156-call-stack","title":"Use Cases Implemented by the AP150-AP156 Call Stack","text":"<p>The call stack, consisting of <code>AP150.ocl36.txt</code>, <code>AP151.rpg36.txt</code>, <code>AP155.rpg36.txt</code>, and <code>AP156.ocl36.txt</code> with <code>AP156.rpg36.txt</code>, implements a single primary use case in the Accounts Payable (A/P) system:</p> <ol> <li>Generate and Process Accounts Payable Payments:</li> <li>This use case encompasses selecting vouchers for payment based on criteria (e.g., due date, payment method), creating payment records, generating a cash requirements report, and producing a NACHA file for ACH payments. The process handles multiple payment methods (checks, ACH, wire transfers, employee expenses, utility auto-pay) and tracks discounts, ensuring accurate payment processing and reporting.</li> </ol>"},{"location":"accounts-payable/03%20Payment%20Cycle/AP150%20OCL%20Payment%20Selection%20%26%20Rpt/AP150%20Summary/#function-requirement-document-generate-and-process-accounts-payable-payments","title":"Function Requirement Document: Generate and Process Accounts Payable Payments","text":""},{"location":"accounts-payable/03%20Payment%20Cycle/AP150%20OCL%20Payment%20Selection%20%26%20Rpt/AP150%20Summary/#function-overview","title":"Function Overview","text":"<p>The <code>GenerateAndProcessAPPayments</code> function automates the selection, processing, reporting, and transmission of Accounts Payable payments. It takes input parameters defining payment criteria and produces payment records, a cash requirements report, and a NACHA file for ACH payments. The function supports checks, ACH, wire transfers, employee expenses, and utility auto-pay, while handling discounts and validations.</p>"},{"location":"accounts-payable/03%20Payment%20Cycle/AP150%20OCL%20Payment%20Selection%20%26%20Rpt/AP150%20Summary/#inputs","title":"Inputs","text":"<ul> <li>Company Number (PTCONO): Identifies the company for payment processing (7 digits).</li> <li>Bank G/L Number (PTBKGL): Bank general ledger number for payment (8 digits).</li> <li>Next Check Number (PTNXCK): Starting check number for non-prepaid payments (6 digits).</li> <li>Check Date (PTCKDT): Date of payment issuance (6 digits, YYMMDD).</li> <li>Pay-By Date (PTDATE): Cutoff date for selecting vouchers (6 digits, YYMMDD).</li> <li>Force Discount Flag (PTFDIS): <code>'D'</code> to force discounts, otherwise blank.</li> <li>Payment Method (PTHOLD): <code>' '</code> (check), <code>A</code> (ACH), <code>W</code> (wire transfer), <code>E</code> (employee expense), <code>U</code> (utility auto-pay).</li> <li>Vendor Number (PTVEND): Optional vendor number for specific vendor payments (5 digits).</li> <li>Voucher Number (PTVO): Optional voucher number for specific voucher payments (5 digits).</li> <li>Partial Payment Amount (PTAMT): Amount for partial payments (7.2 digits, packed).</li> <li>Discount Amount (PTDISC): Specific discount to apply (5.2 digits, packed).</li> <li>Pay or Hold (PTPORH): <code>'P'</code> to pay held vouchers, <code>'H'</code> to hold, otherwise blank.</li> <li>Single Check Flag (PTSNGL): <code>'S'</code> for single check per voucher, otherwise blank.</li> <li>Make Prepaid Flag (PTMKPP): <code>'P'</code> to mark as prepaid, otherwise blank.</li> <li>Prepaid Check Number (PTPPCK): Check number for prepaid vouchers (6 digits).</li> <li>Prepaid Date (PTPPDT): Date for prepaid vouchers (6 digits, YYMMDD).</li> <li>Period (PTPD): Accounting period (2 digits).</li> <li>Year (PTPDYY): Accounting year (2 digits).</li> </ul>"},{"location":"accounts-payable/03%20Payment%20Cycle/AP150%20OCL%20Payment%20Selection%20%26%20Rpt/AP150%20Summary/#outputs","title":"Outputs","text":"<ul> <li>Payment Records (APPAY): Records with payment details (company, vendor, voucher, amount, discount, check number, etc.).</li> <li>Missed Discount Records (APPYDS): Records for vouchers with missed discounts.</li> <li>Check Records (APPYCK): Check details (check number, amount, status, etc.).</li> <li>Invoice Detail Records (APDETINV): Aggregated invoice details for reporting.</li> <li>Cash Requirements Report (APCSHRQ): Report detailing payments, discounts, and totals.</li> <li>NACHA File (ACHFILE): NACHA-formatted file for ACH payments (if applicable).</li> </ul>"},{"location":"accounts-payable/03%20Payment%20Cycle/AP150%20OCL%20Payment%20Selection%20%26%20Rpt/AP150%20Summary/#process-steps","title":"Process Steps","text":"<ol> <li>Validate Inputs:</li> <li>Ensure company number, bank G/L, and payment method are valid.</li> <li> <p>Validate dates (PTCKDT, PTDATE, PTPPDT) for Y2K compliance (convert to 8-digit format, e.g., CCYYMMDD).</p> </li> <li> <p>Select Vouchers (AP151):</p> </li> <li>Pay by Date:<ul> <li>Select <code>APOPEN</code> vouchers where:</li> <li>Company (<code>OPCONO</code>) matches <code>PTCONO</code>.</li> <li>Bank G/L (<code>OPBKGL</code>) matches <code>PTBKGL</code>.</li> <li>Payment method (<code>OPHALT</code>) matches <code>PTHOLD</code> (<code>' '</code>, <code>A</code>, <code>W</code>, <code>E</code>, <code>U</code>).</li> <li>Not deleted (<code>OPDEL \u2260 'D'</code>) or on hold (<code>OPHALT \u2260 'H'</code> unless <code>PTPORH = 'P'</code>).</li> <li>Due date (<code>OPDUED</code>) is on or before <code>PTDATE</code> (unless <code>PTFDIS = 'D'</code>).</li> <li>For prepaid vouchers (<code>OPPAID = 'P', 'A', 'W', 'E', 'U'</code>), ensure payment method matches <code>PTHOLD</code>.</li> </ul> </li> <li> <p>Pay by Vendor/Voucher:</p> <ul> <li>Select <code>APOPEN</code> vouchers matching <code>PTVEND</code> and optionally <code>PTVO</code>.</li> <li>Apply same company, bank G/L, and payment method checks.</li> <li>Handle partial payments (<code>PTAMT</code>) and specific discounts (<code>PTDISC</code>).</li> </ul> </li> <li> <p>Calculate Payments and Discounts:</p> </li> <li>Payment Amount: <code>OPLPAM = OPGRAM - OPDISC - OPPPTD</code>.<ul> <li><code>OPGRAM</code>: Gross voucher amount.</li> <li><code>OPDISC</code>: Discount (if applicable).</li> <li><code>OPPPTD</code>: Partial paid to date.</li> </ul> </li> <li>Discount Logic:<ul> <li>If <code>PTFDIS = 'D'</code>, apply <code>OPDISC</code> regardless of discount due date.</li> <li>Otherwise, apply <code>OPDISC</code> only if discount due date (<code>OPDSDT</code>) is on or after <code>PTCKDT</code> and before or on <code>PTDATE</code>.</li> <li>If discount is missed and <code>PTFDIS \u2260 'D'</code>, set <code>OPDISC = 0</code> and write to <code>APPYDS</code>.</li> </ul> </li> <li> <p>For partial payments, set <code>OPLPAM = PTAMT</code> and adjust <code>OPDISC</code> to zero if <code>PTAMT = OPLPAM</code>.</p> </li> <li> <p>Create Payment Records:</p> </li> <li>Write to <code>APPAY</code> with fields: <code>OPDEL</code> (delete flag), <code>OPLPAM</code>, <code>OPDISC</code>, <code>OPCKNO</code> (check number, <code>PTNXCK</code> for non-prepaid, <code>PTPPCK</code> for prepaid), <code>OPPAID</code> (payment method), <code>OPSNGL</code> (<code>'S'</code> for single check or one-time vendor), <code>OPCKDT</code> (check date), <code>PTSEQ#</code> (sequence).</li> <li>For held vouchers (<code>PTPORH = 'H'</code>), mark <code>APPAY</code> record for deletion (<code>PYDEL = 'D'</code>).</li> <li> <p>Write missed discount records to <code>APPYDS</code>.</p> </li> <li> <p>Generate Cash Requirements Report (AP155):</p> </li> <li>Aggregate payment totals by company and check:<ul> <li>Computer checks (<code>C6CNT</code>, <code>C6GRAM</code>, <code>C6DISC</code>, <code>C6LPAM</code>).</li> <li>Prepaid payments (<code>P6CNT</code>, <code>P6GRAM</code>, <code>P6DISC</code>, <code>P6LPAM</code>).</li> <li>Total checks (<code>L6CNT</code>, <code>L6GRAM</code>, <code>L6DISC</code>, <code>L6LPAM</code>).</li> </ul> </li> <li>Update <code>APDETINV</code> with aggregated invoice amounts (<code>APGRAM</code>, <code>APDISC</code>) for same invoice numbers.</li> <li>Validate checks against <code>APCHKR</code>:<ul> <li>Non-void checks must not exist or be open.</li> <li>Void checks must exist, be open, and fully voided.</li> </ul> </li> <li>Write check records to <code>APPYCK</code> with status (<code>'F'</code> for full stub, <code>'V'</code> for void, <code>'C'</code> for credit/no pay).</li> <li> <p>Output report to <code>APCSHRQ</code> with invoice details, check totals, and error messages (e.g., \"CHECK IS ALREADY OPEN\").</p> </li> <li> <p>Create NACHA File for ACH Payments (AP156):</p> </li> <li> <p>If <code>PTHOLD = 'A'</code> (indicated by LDA position 400 = <code>'A'</code>):</p> <ul> <li>Clear <code>ACHFILE</code>.</li> <li>Write NACHA records for <code>APPYCK</code> records with <code>PYSTAT = 'A'</code>:</li> <li>File Header (Type 1): ABA numbers, transmission date/time, company names.</li> <li>Batch Header (Type 5): Company details, effective date (<code>CKYMD</code>).</li> <li>Entry Detail (Type 6): Vendor bank routing (<code>VNARTE</code>), account number (<code>VNABK#</code>), amount (<code>PYCKAM</code>), transaction code (<code>22</code> for checking, <code>32</code> for savings).</li> <li>Batch Control (Type 8): Batch entry count, hash, and credit totals.</li> <li>File Control (Type 9): File-level counts and totals.</li> <li>Filler records to pad blocks to multiples of 10.</li> <li>Output report to <code>REPORT</code> for logging.</li> </ul> </li> <li> <p>Return Outputs:</p> </li> <li>Return updated files (<code>APPAY</code>, <code>APPYDS</code>, <code>APPYCK</code>, <code>APDETINV</code>), report (<code>APCSHRQ</code>), and NACHA file (<code>ACHFILE</code>).</li> </ol>"},{"location":"accounts-payable/03%20Payment%20Cycle/AP150%20OCL%20Payment%20Selection%20%26%20Rpt/AP150%20Summary/#business-rules","title":"Business Rules","text":"<ol> <li>Payment Selection:</li> <li>Vouchers must match company, bank G/L, and payment method.</li> <li>Held vouchers (<code>OPHALT = 'H'</code>) require <code>PTPORH = 'P'</code> to be paid.</li> <li> <p>Prepaid vouchers (<code>OPPAID = 'P', 'A', 'W', 'E', 'U'</code>) must match <code>PTHOLD</code>.</p> </li> <li> <p>Discount Handling:</p> </li> <li>Discounts applied if <code>PTFDIS = 'D'</code> or discount due date is valid.</li> <li> <p>Missed discounts (past due, no force discount) are recorded in <code>APPYDS</code>.</p> </li> <li> <p>Check Number Assignment:</p> </li> <li>Non-prepaid payments use <code>PTNXCK</code>, incremented per check.</li> <li> <p>Prepaid payments use <code>PTPPCK</code> and <code>PTPPDT</code>.</p> </li> <li> <p>Single Check and One-Time Vendors:</p> </li> <li> <p>One-time vendors (<code>OPVEND = 0</code>) or <code>PTSNGL = 'S'</code> require single checks (<code>OPSNGL = 'S'</code>).</p> </li> <li> <p>Check Validation:</p> </li> <li>Non-void checks must not exist or be open in <code>APCHKR</code>.</li> <li>Void checks must exist, be open, and fully voided.</li> <li> <p>Zero/negative amounts are marked \"CREDIT / NO PAY\".</p> </li> <li> <p>Stub Limits:</p> </li> <li> <p>Maximum 36 invoices per check to prevent stub overflow.</p> </li> <li> <p>ACH Processing:</p> </li> <li>Only executed if <code>PTHOLD = 'A'</code>.</li> <li>Requires valid vendor ACH details (<code>VNARTE</code>, <code>VNABK#</code>, <code>VNACOS</code>).</li> <li> <p>NACHA file adheres to standard format with proper record types and block padding.</p> </li> <li> <p>Invoice Aggregation:</p> </li> <li>Multiple invoices with the same number for a vendor are aggregated in <code>APDETINV</code>.</li> </ol>"},{"location":"accounts-payable/03%20Payment%20Cycle/AP150%20OCL%20Payment%20Selection%20%26%20Rpt/AP150%20Summary/#calculations","title":"Calculations","text":"<ul> <li>Payment Amount: <code>OPLPAM = OPGRAM - OPDISC - OPPPTD</code>.</li> <li>For partial payments: <code>OPLPAM = PTAMT</code>, <code>OPDISC = 0</code> if <code>PTAMT = OPLPAM</code>.</li> <li>Discount: <code>OPDISC = OPDISC</code> if valid (force discount or within date range), else <code>0</code>.</li> <li>Check Totals: Sum <code>OPGRAM</code>, <code>OPDISC</code>, <code>OPLPAM</code> per check and company.</li> <li>NACHA Hash: Sum of vendor routing numbers (<code>VNARTE</code>) for batch (<code>L2HASH</code>) and file (<code>LRHASH</code>).</li> <li>NACHA Block Count: <code>LRBLOK = CEIL(RECCNT / 10)</code>.</li> </ul>"},{"location":"accounts-payable/03%20Payment%20Cycle/AP150%20OCL%20Payment%20Selection%20%26%20Rpt/AP150%20Summary/#assumptions","title":"Assumptions","text":"<ul> <li>Input data is pre-validated and sorted (e.g., <code>APPYTR</code> sorted by <code>#GSORT</code> in <code>AP150</code>).</li> <li>Files (<code>APOPEN</code>, <code>APVEND</code>, <code>APCONT</code>, <code>APCHKR</code>) are populated with valid data.</li> <li>ACH payments require vendor ACH details in <code>APVEND</code>.</li> </ul>"},{"location":"accounts-payable/03%20Payment%20Cycle/AP150%20OCL%20Payment%20Selection%20%26%20Rpt/AP150%20Summary/#error-handling","title":"Error Handling","text":"<ul> <li>Skips invalid records (deleted, mismatched company/bank G/L, or payment method).</li> <li>Reports errors in <code>APCSHRQ</code> (e.g., check already open, invalid void).</li> <li>Logs missed discounts in <code>APPYDS</code>.</li> </ul>"},{"location":"accounts-payable/03%20Payment%20Cycle/AP150%20OCL%20Payment%20Selection%20%26%20Rpt/AP150%20Summary/#tables-used-in-the-ap150-ap156-call-stack-and-data-flow","title":"Tables Used in the AP150-AP156 Call Stack and Data Flow","text":"<p>Below is a detailed explanation of the tables (files) used in the Accounts Payable (A/P) payment processing call stack (<code>AP150.ocl36.txt</code>, <code>AP151.rpg36.txt</code>, <code>AP155.rpg36.txt</code>, <code>AP156.ocl36.txt</code>, <code>AP156.rpg36.txt</code>), their purposes, and a summary of the data flow.</p>"},{"location":"accounts-payable/03%20Payment%20Cycle/AP150%20OCL%20Payment%20Selection%20%26%20Rpt/AP150%20Summary/#tables-files-used-and-their-purpose","title":"Tables (Files) Used and Their Purpose","text":""},{"location":"accounts-payable/03%20Payment%20Cycle/AP150%20OCL%20Payment%20Selection%20%26%20Rpt/AP150%20Summary/#tables-used-in-the-ap150-ap156-call-stack","title":"Tables Used in the AP150-AP156 Call Stack","text":"<p>The following tables are used across the AP150-AP156 call stack to process Accounts Payable payments, generate reports, and create NACHA files for ACH payments. Each table's purpose, key fields, and usage in the programs are described below.</p>"},{"location":"accounts-payable/03%20Payment%20Cycle/AP150%20OCL%20Payment%20Selection%20%26%20Rpt/AP150%20Summary/#1-appytr-payment-transaction-file","title":"1. APPYTR (Payment Transaction File)","text":"<ul> <li>Purpose: Stores sorted payment transaction data used as input for payment selection criteria. It contains header records (pay by date) and detail records (pay by vendor/voucher).</li> <li>File Usage:</li> <li>AP151: Primary input file, read to determine which vouchers to select from <code>APOPEN</code> based on company, vendor, voucher, payment method, and dates.</li> <li>AP155: Chained to retrieve next check number, check date, pay-by date, and payment method for the cash requirements report.</li> <li>Key Fields:</li> <li><code>PTCONO</code> (Company Number, 7 digits)</li> <li><code>PTVEND</code> (Vendor Number, 5 digits)</li> <li><code>PTVO</code> (Voucher Number, 5 digits)</li> <li><code>PTAMT</code> (Partial Payment Amount, 7.2 digits, packed)</li> <li><code>PTDISC</code> (Discount Amount, 5.2 digits, packed)</li> <li><code>PTBKGL</code> (Bank G/L Number, 8 digits)</li> <li><code>PTNXCK</code> (Next Check Number, 6 digits)</li> <li><code>PTCKDT</code> (Check Date, 6 digits, YYMMDD)</li> <li><code>PTDATE</code> (Pay-By Date, 6 digits, YYMMDD)</li> <li><code>PTFDIS</code> (Force Discount, <code>'D'</code> or blank)</li> <li><code>PTHOLD</code> (Payment Method, <code>' '</code>, <code>A</code>, <code>W</code>, <code>E</code>, <code>U</code>)</li> <li><code>PTPORH</code> (Pay or Hold, <code>'P'</code>, <code>'H'</code>, or blank)</li> <li><code>PTMKPP</code> (Make Prepaid, <code>'P'</code> or blank)</li> <li><code>PTSEQ#</code> (Sequence Number)</li> <li>Record Length: 128 bytes</li> <li>Access: Input Primary (AP151), Input with Chain (AP155)</li> </ul>"},{"location":"accounts-payable/03%20Payment%20Cycle/AP150%20OCL%20Payment%20Selection%20%26%20Rpt/AP150%20Summary/#2-apopen-open-ap-file","title":"2. APOPEN (Open A/P File)","text":"<ul> <li>Purpose: Contains open voucher details used to identify eligible vouchers for payment based on selection criteria.</li> <li>File Usage:</li> <li>AP151: Chained to select vouchers matching company, bank G/L, payment method, and due date criteria.</li> <li>AP155: Chained to retrieve vendor name and sort abbreviation for reporting if not found in <code>APVEND</code>.</li> <li>Key Fields:</li> <li><code>OPCONO</code> (Company Number, 7 digits)</li> <li><code>OPVEND</code> (Vendor Number, 5 digits)</li> <li><code>OPVONO</code> (Voucher Number, 5 digits)</li> <li><code>OPGRAM</code> (Gross Amount, 7.2 digits, packed)</li> <li><code>OPDISC</code> (Discount Amount, 5.2 digits, packed)</li> <li><code>OPPPTD</code> (Partial Paid to Date, 5.2 digits, packed)</li> <li><code>OPINVN</code> (Invoice Number, 20 bytes)</li> <li><code>OPINDS</code> (Invoice Description, 25 bytes)</li> <li><code>OPDSDT</code> (Discount Due Date, 6 digits, YYMMDD)</li> <li><code>OPDUED</code> (Due Date, 6 digits, YYMMDD)</li> <li><code>OPHALT</code> (Hold Code, <code>'H'</code> or payment method)</li> <li><code>OPPAID</code> (Prepaid Code, <code>'P'</code>, <code>'A'</code>, <code>'W'</code>, <code>'E'</code>, <code>'U'</code>)</li> <li><code>OPCKNO</code> (Prepaid Check Number, 6 digits)</li> <li><code>OPSNGL</code> (Single Check, <code>'S'</code> or blank)</li> <li><code>OPBKGL</code> (Bank G/L Number, 8 digits)</li> <li>Record Length: 384 bytes</li> <li>Access: Input with Disk (AP151), Input with Chain (AP155)</li> </ul>"},{"location":"accounts-payable/03%20Payment%20Cycle/AP150%20OCL%20Payment%20Selection%20%26%20Rpt/AP150%20Summary/#3-appay-payment-file","title":"3. APPAY (Payment File)","text":"<ul> <li>Purpose: Stores generated payment records, including payment amounts, discounts, and check details for processed vouchers.</li> <li>File Usage:</li> <li>AP151: Output file where payment records are written or updated with calculated payment amounts and check details.</li> <li>AP155: Primary input file, read to generate the cash requirements report; updated with sequence numbers.</li> <li>Key Fields:</li> <li><code>OPDEL</code> (Delete Flag, <code>'D'</code> or blank)</li> <li><code>OPCONO</code> (Company Number, 7 digits)</li> <li><code>OPVEND</code> (Vendor Number, 5 digits)</li> <li><code>OPVONO</code> (Voucher Number, 5 digits)</li> <li><code>OPGRAM</code> (Gross Amount, 7.2 digits, packed)</li> <li><code>OPDISC</code> (Discount Amount, 5.2 digits, packed)</li> <li><code>OPPPTD</code> (Partial Paid to Date, 5.2 digits, packed)</li> <li><code>OPLPAM</code> (Payment Amount, 6.2 digits, packed)</li> <li><code>OPPAID</code> (Payment Method, <code>'P'</code>, <code>'A'</code>, <code>'W'</code>, <code>'E'</code>, <code>'U'</code>)</li> <li><code>OPSNGL</code> (Single Check, <code>'S'</code> or blank)</li> <li><code>OPCKNO</code> (Check Number, 6 digits)</li> <li><code>OPCKDT</code> (Check Date, 6 digits, YYMMDD)</li> <li><code>OPSEQ#</code> (Sequence Number, 5 digits)</li> <li><code>OPINVN</code> (Invoice Number, 20 bytes)</li> <li><code>OPINDS</code> (Invoice Description, 25 bytes)</li> <li><code>OPDUED</code> (Due Date, 6 digits, YYMMDD)</li> <li>Record Length: 384 bytes</li> <li>Access: Update/Create (AP151), Update Primary (AP155)</li> </ul>"},{"location":"accounts-payable/03%20Payment%20Cycle/AP150%20OCL%20Payment%20Selection%20%26%20Rpt/AP150%20Summary/#4-appyds-missed-discount-file","title":"4. APPYDS (Missed Discount File)","text":"<ul> <li>Purpose: Tracks vouchers where discounts were available but not taken due to missed discount due dates.</li> <li>File Usage:</li> <li>AP151: Output file where missed discount records are written.</li> <li>AP155: Chained to check for missed discounts and annotate the cash requirements report (\"DISCOUNT NOT TAKEN\").</li> <li>Key Fields:</li> <li><code>DSDEL</code> (Delete Flag, <code>'D'</code> or blank)</li> <li><code>DSCONO</code> (Company Number, 7 digits)</li> <li><code>DSVEND</code> (Vendor Number, 5 digits)</li> <li><code>DSVONO</code> (Voucher Number, 5 digits)</li> <li><code>DSGRAM</code> (Gross Amount, 7.2 digits, packed)</li> <li><code>DSDISC</code> (Discount Amount, 5.2 digits, packed)</li> <li><code>DSPPTD</code> (Partial Paid to Date, 5.2 digits, packed)</li> <li><code>DSLPAM</code> (Last Payment Amount, 6.2 digits, packed)</li> <li><code>DSDSDT</code> (Discount Due Date, 6 digits, YYMMDD)</li> <li><code>DSDUED</code> (Due Date, 6 digits, YYMMDD)</li> <li><code>DSCKNO</code> (Check Number, 6 digits)</li> <li><code>DSPAID</code> (Payment Method, <code>'P'</code>, <code>'A'</code>, <code>'W'</code>, <code>'E'</code>, <code>'U'</code>)</li> <li><code>DSSNGL</code> (Single Check, <code>'S'</code> or blank)</li> <li><code>DSBKGL</code> (Bank G/L Number, 8 digits)</li> <li>Record Length: 384 bytes</li> <li>Access: Output (AP151), Input with File (AP155)</li> </ul>"},{"location":"accounts-payable/03%20Payment%20Cycle/AP150%20OCL%20Payment%20Selection%20%26%20Rpt/AP150%20Summary/#5-appyck-check-file","title":"5. APPYCK (Check File)","text":"<ul> <li>Purpose: Stores check details, including check number, amount, and status (e.g., full stub, void, credit/no pay).</li> <li>File Usage:</li> <li>AP155: Output file where check records are written or updated with status and totals.</li> <li>AP156: Primary input file, read to generate NACHA file for ACH payments.</li> <li>Key Fields:</li> <li><code>AXRECD</code> (Record Code, <code>' '</code>, <code>'F'</code>, <code>'V'</code>, <code>'C'</code>, <code>'P'</code>, <code>'A'</code>, <code>'W'</code>, <code>'E'</code>, <code>'U'</code>)</li> <li><code>PYCONO</code> (Company Number, 7 digits)</li> <li><code>PYVEND</code> (Vendor Number, 5 digits)</li> <li><code>PYBKGL</code> (Bank G/L Number, 8 digits)</li> <li><code>PYCHK#</code> (Check Number, 6 digits)</li> <li><code>PYCKAM</code> (Check Amount, 11.2 digits, packed)</li> <li><code>PYCKDT</code> (Check Date, 6 digits, YYMMDD)</li> <li><code>PYNAME</code> (Vendor Name, 22 bytes)</li> <li><code>PYSEQ#</code> (Sequence Number, 9 digits)</li> <li><code>PYCNTR</code> (Invoice Count, 9 digits)</li> <li>Record Length: 96 bytes</li> <li>Access: Update/Create (AP155), Input Primary (AP156)</li> </ul>"},{"location":"accounts-payable/03%20Payment%20Cycle/AP150%20OCL%20Payment%20Selection%20%26%20Rpt/AP150%20Summary/#6-apdetinv-invoice-detail-file","title":"6. APDETINV (Invoice Detail File)","text":"<ul> <li>Purpose: Tracks aggregated invoice details for vendors, combining amounts for invoices with the same number.</li> <li>File Usage:</li> <li>AP155: Updated with aggregated gross and discount amounts for reporting.</li> <li>Key Fields:</li> <li><code>APDEL</code> (Delete Flag, <code>'D'</code> or blank)</li> <li><code>APCONO</code> (Company Number, 7 digits)</li> <li><code>APVEND</code> (Vendor Number, 5 digits)</li> <li><code>APINVN</code> (Invoice Number, 20 bytes)</li> <li><code>APGRAM</code> (Gross Amount, 6.2 digits, packed)</li> <li><code>APDISC</code> (Discount Amount, 5.2 digits, packed)</li> <li><code>OPPPTD</code> (Partial Paid to Date, 5.2 digits, packed)</li> <li><code>OPINDS</code> (Invoice Description, 25 bytes)</li> <li><code>OPDUED</code> (Due Date, 6 digits, YYMMDD)</li> <li><code>OPVONO</code> (Voucher Number, 5 digits)</li> <li>Record Length: 256 bytes</li> <li>Access: Update with File (AP155)</li> </ul>"},{"location":"accounts-payable/03%20Payment%20Cycle/AP150%20OCL%20Payment%20Selection%20%26%20Rpt/AP150%20Summary/#7-apcont-ap-control-file","title":"7. APCONT (A/P Control File)","text":"<ul> <li>Purpose: Stores company-level control data, including company name, bank G/L, and check numbering details.</li> <li>File Usage:</li> <li>AP155: Chained to retrieve company name and pre-numbered check flag for the report.</li> <li>AP156: Chained to retrieve company name and bank G/L for NACHA file headers.</li> <li>Key Fields:</li> <li><code>ACDEL</code> (Delete Flag, <code>'D'</code> or blank)</li> <li><code>ACCONO</code> (Company Number, 7 digits)</li> <li><code>ACNAME</code> (Company Name, 30 bytes)</li> <li><code>ACBKGL</code> (Bank G/L Number, 8 digits)</li> <li><code>ACPRE#</code> (Pre-Numbered Checks, <code>'Y'</code> or blank)</li> <li>Record Length: 256 bytes</li> <li>Access: Input with Chain (AP155, AP156)</li> </ul>"},{"location":"accounts-payable/03%20Payment%20Cycle/AP150%20OCL%20Payment%20Selection%20%26%20Rpt/AP150%20Summary/#8-apvend-vendor-file","title":"8. APVEND (Vendor File)","text":"<ul> <li>Purpose: Contains vendor details, including name, address, and ACH payment information.</li> <li>File Usage:</li> <li>AP155: Chained to retrieve vendor name and sort abbreviation for the report.</li> <li>AP156: Chained to retrieve ACH-specific fields (routing code, account number, account type) for NACHA file.</li> <li>Key Fields:</li> <li><code>VNDEL</code> (Delete Flag, <code>'D'</code> or blank)</li> <li><code>VNCO</code> (Company Number, 7 digits)</li> <li><code>VNVEND</code> (Vendor Number, 5 digits)</li> <li><code>VNNAME</code> (Vendor Name, 30 bytes)</li> <li><code>VNSORT</code> (Alpha Sort Abbreviation, 10 bytes)</li> <li><code>VNARTE</code> (ACH Bank Routing Code, 9 digits)</li> <li><code>VNABK#</code> (ACH Bank Account Number, 17 bytes)</li> <li><code>VNACOS</code> (ACH Account Type, <code>'C'</code> for checking, else savings)</li> <li>Record Length: 579 bytes</li> <li>Access: Input with Chain (AP155, AP156)</li> </ul>"},{"location":"accounts-payable/03%20Payment%20Cycle/AP150%20OCL%20Payment%20Selection%20%26%20Rpt/AP150%20Summary/#9-apchkr-check-register-file","title":"9. APCHKR (Check Register File)","text":"<ul> <li>Purpose: Validates check status to ensure checks are not already open or incorrectly voided.</li> <li>File Usage:</li> <li>AP155: Chained to validate check numbers and statuses for the report.</li> <li>Key Fields:</li> <li><code>AMCODE</code> (Status Code, <code>'D'</code>, <code>'O'</code>, <code>'R'</code>, <code>'V'</code>)</li> <li><code>AMCKAM</code> (Check Amount, 11.2 digits, packed)</li> <li>Record Length: 128 bytes</li> <li>Access: Input with Chain (AP155)</li> </ul>"},{"location":"accounts-payable/03%20Payment%20Cycle/AP150%20OCL%20Payment%20Selection%20%26%20Rpt/AP150%20Summary/#10-apcshrq-cash-requirements-report-file","title":"10. APCSHRQ (Cash Requirements Report File)","text":"<ul> <li>Purpose: Printer file for outputting the cash requirements report with payment details, check totals, and company summaries.</li> <li>File Usage:</li> <li>AP155: Output file for writing report headers, invoice details, check totals, and error messages.</li> <li>Key Fields:</li> <li>Report fields include company name, vendor name, invoice number, gross amount, discount, payment amount, check number, and totals.</li> <li>Record Length: 142 bytes</li> <li>Access: Output (AP155)</li> </ul>"},{"location":"accounts-payable/03%20Payment%20Cycle/AP150%20OCL%20Payment%20Selection%20%26%20Rpt/AP150%20Summary/#11-achfile-nacha-file","title":"11. ACHFILE (NACHA File)","text":"<ul> <li>Purpose: Stores NACHA-formatted records for ACH payments to PNC Bank.</li> <li>File Usage:</li> <li>AP156: Output file for writing file header, batch header, entry detail, batch control, and file control records.</li> <li>Key Fields:</li> <li>Record Type Codes (<code>'1'</code>, <code>'5'</code>, <code>'6'</code>, <code>'8'</code>, <code>'9'</code>, filler)</li> <li>File Header: ABA numbers, transmission date/time</li> <li>Batch Header: Company name, tax ID, effective date</li> <li>Entry Detail: Vendor routing code, account number, amount</li> <li>Batch Control: Entry count, hash, credit total</li> <li>File Control: Batch count, block count, entry count</li> <li>Record Length: 94 bytes</li> <li>Access: Output (AP156)</li> </ul>"},{"location":"accounts-payable/03%20Payment%20Cycle/AP150%20OCL%20Payment%20Selection%20%26%20Rpt/AP150%20Summary/#12-report-printer-file","title":"12. REPORT (Printer File)","text":"<ul> <li>Purpose: Logs or verifies NACHA file creation details.</li> <li>File Usage:</li> <li>AP156: Output file for logging (specific content not defined in code).</li> <li>Record Length: 132 bytes</li> <li>Access: Output (AP156)</li> </ul>"},{"location":"accounts-payable/03%20Payment%20Cycle/AP150%20OCL%20Payment%20Selection%20%26%20Rpt/AP150%20Summary/#13-ap155s-report-sequencing-file","title":"13. AP155S (Report Sequencing File)","text":"<ul> <li>Purpose: Control or sort file used for sequencing the cash requirements report.</li> <li>File Usage:</li> <li>AP155: Input file for report sequencing.</li> <li>Key Fields: Not detailed in code (likely control flags or sort keys).</li> <li>Record Length: 3 bytes</li> <li>Access: Input Random (AP155)</li> </ul>"},{"location":"accounts-payable/03%20Payment%20Cycle/AP150%20OCL%20Payment%20Selection%20%26%20Rpt/AP150%20Summary/#data-flow-summary","title":"Data Flow Summary","text":"<p>The data flow through the AP150-AP156 call stack is a sequential process that transforms input transaction data into payment records, a report, and an ACH payment file. Below is a summary:</p> <ol> <li>Input Preparation (AP150.ocl36.txt):</li> <li>Input: User-provided parameters (company, bank G/L, check date, etc.) and <code>APPYTR</code> (payment transactions).</li> <li>Process: Sorts <code>APPYTR</code> by company, vendor, voucher, and sequence using <code>#GSORT</code>. Clears <code>APPAY</code>, <code>APPYDS</code>, and <code>APPYCK</code> files to prepare for new data.</li> <li> <p>Output: Sorted <code>APPYTR</code> file.</p> </li> <li> <p>Payment Record Creation (AP151.rpg36.txt):</p> </li> <li>Input: Sorted <code>APPYTR</code>, <code>APOPEN</code> (open vouchers).</li> <li>Process: Reads <code>APPYTR</code> to select vouchers from <code>APOPEN</code> based on criteria (company, bank G/L, payment method, due date). Calculates payment amounts (<code>OPLPAM = OPGRAM - OPDISC - OPPPTD</code>) and applies discounts. Writes payment records to <code>APPAY</code> and missed discount records to <code>APPYDS</code>.</li> <li> <p>Output: Populated <code>APPAY</code> and <code>APPYDS</code> files.</p> </li> <li> <p>Cash Requirements Report Generation (AP155.rpg36.txt):</p> </li> <li>Input: <code>APPAY</code>, <code>APPYTR</code>, <code>APCONT</code>, <code>APVEND</code>, <code>APCHKR</code>, <code>APPYDS</code>, <code>AP155S</code>.</li> <li>Process: Reads <code>APPAY</code> to aggregate payment totals (gross, discount, payment amount) by check and company. Updates <code>APDETINV</code> with aggregated invoice details. Validates checks against <code>APCHKR</code> and writes check records to <code>APPYCK</code>. Outputs report to <code>APCSHRQ</code> with invoice details, check totals, and error messages.</li> <li> <p>Output: Updated <code>APPAY</code>, <code>APDETINV</code>, <code>APPYCK</code>, and <code>APCSHRQ</code> report. Sets LDA position 400 to <code>'A'</code> if ACH payments are detected.</p> </li> <li> <p>NACHA File Creation (AP156.ocl36.txt, AP156.rpg36.txt):</p> </li> <li>Input: <code>APPYCK</code>, <code>APCONT</code>, <code>APVEND</code>, LDA (position 400 = <code>'A'</code>).</li> <li>Process: If ACH payments are present, clears <code>ACHFILE</code> and reads <code>APPYCK</code> to generate NACHA records (file header, batch header, entry detail, batch control, file control). Uses <code>APVEND</code> for ACH details and <code>APCONT</code> for company data. Outputs to <code>ACHFILE</code> and logs to <code>REPORT</code>.</li> <li>Output: Populated <code>ACHFILE</code> and <code>REPORT</code>.</li> </ol> <p>Overall Flow: - Input: <code>APPYTR</code> (transaction criteria), <code>APOPEN</code> (vouchers), <code>APCONT</code> (company data), <code>APVEND</code> (vendor data), <code>APCHKR</code> (check validation). - Transformation: Sort transactions (<code>AP150</code>), select and process payments (<code>AP151</code>), generate report and validate checks (<code>AP155</code>), create NACHA file for ACH (<code>AP156</code>). - Output: <code>APPAY</code> (payments), <code>APPYDS</code> (missed discounts), <code>APPYCK</code> (checks), <code>APDETINV</code> (invoices), <code>APCSHRQ</code> (report), <code>ACHFILE</code> (NACHA file), <code>REPORT</code> (log).</p>"},{"location":"accounts-payable/03%20Payment%20Cycle/AP150%20OCL%20Payment%20Selection%20%26%20Rpt/AP150OCL/","title":"AP150OCL","text":"<p>The provided document is an Operation Control Language (OCL) program, specifically <code>AP150.ocl36.txt</code>, used in IBM midrange systems (e.g., AS/400, now IBM i) for managing Accounts Payable (A/P) payment transactions. OCL is a scripting language used to control job execution and manage files in such environments. Below, I\u2019ll explain the process steps of the program, identify the external programs called, and list the tables (files) used.</p>"},{"location":"accounts-payable/03%20Payment%20Cycle/AP150%20OCL%20Payment%20Selection%20%26%20Rpt/AP150OCL/#process-steps-of-the-ap150-ocl-program","title":"Process Steps of the AP150 OCL Program","text":"<p>The OCL program <code>AP150</code> handles the entry, editing, and processing of A/P payment transactions, including creating payment records and generating a cash requirements report. It involves file operations, sorting, and invoking external programs. Here\u2019s a step-by-step breakdown of the process:</p> <ol> <li>Initial Conditional Check for Automation:</li> <li>The program checks if it\u2019s running in \"AUTO\" mode (triggered by another process, <code>AP200</code>).<ul> <li><code>IF ?2?/AUTO GOTO AP151</code>: If <code>?2?</code> (a parameter) equals \"AUTO,\" the program jumps to the <code>AP151</code> tag, skipping initial file setup.</li> </ul> </li> <li> <p>If not in AUTO mode, it proceeds with file creation and setup.</p> </li> <li> <p>File Creation for Work Files:</p> </li> <li>If the file <code>?9?APPT?WS?</code> (a work file for payment transactions) doesn\u2019t exist, it creates it:<ul> <li><code>BLDFILE ?9?APPT?WS?,I,RECORDS,500,128,,,2,5,DFILE</code></li> <li>Creates a file with 500 records, 128 bytes each, with specific attributes.</li> </ul> </li> <li>Sets a local variable at offset 135 with data <code>'F'</code> for <code>?9?APPT?WS?</code>.</li> <li> <p>If the file <code>?9?APPO?WS?</code> exists, sets a local variable at offset 300 to <code>'Y'</code>.</p> </li> <li> <p>Load Initial Program (<code>AP150</code>):</p> </li> <li>Loads the program <code>AP150</code> (likely an RPG or CL program).</li> <li>Opens the following files:<ul> <li><code>APPYTR</code> (labeled <code>?9?APPT?WS?</code>, shared, extendable by 100 records): Transaction work file.</li> <li><code>APCONT</code> (labeled <code>?9?APCONT</code>, shared): A/P control file.</li> <li><code>GLMAST</code> (labeled <code>?9?GLMAST</code>, shared): General ledger master file.</li> <li><code>APVEND</code> (labeled <code>?9?APVEND</code>, shared): Vendor master file.</li> <li><code>APOPEN</code> (labeled <code>?9?APOPEN</code>, shared): Open A/P file.</li> <li><code>GSTABL</code> (labeled <code>?9?GSTABL</code>, shared): General system table.</li> <li><code>GSCONT</code> (labeled <code>?9?GSCONT</code>, shared): General system control file.</li> </ul> </li> <li> <p>Runs the <code>AP150</code> program to process payment transactions.</p> </li> <li> <p>AP151 Tag - Conditional File Deletion and Creation:</p> </li> <li>Checks if the local variable at offset 300 is <code>'Y'</code>:<ul> <li>If not <code>'Y'</code>, jumps to the <code>END</code> tag, terminating the program.</li> <li>If <code>'Y'</code>, deletes work files: <code>APPO?WS?</code>, <code>APPY?WS?</code>, <code>APPS?WS?</code>, <code>APPC?WS?</code>, <code>APDT?WS?</code>, <code>APDT?WS?C</code>, <code>APDS?WS?</code>.</li> </ul> </li> <li> <p>Creates new work files:</p> <ul> <li><code>?9?APPY?WS?</code>: 999,000 records, 384 bytes.</li> <li><code>?9?APPC?WS?</code>: 999,000 records, 96 bytes.</li> <li><code>?9?APDT?WS?</code>: 500 records, 256 bytes.</li> <li><code>?9?APDS?WS?</code>: 999,000 records, 384 bytes.</li> </ul> </li> <li> <p>Sort Payment Records:</p> </li> <li>Loads the <code>#GSORT</code> program (a system sort utility).</li> <li>Sorts the input file <code>?9?APPT?WS?</code> into output file <code>?9?AP151S</code> (999,000 records, retained job file).</li> <li>Sort specifications:<ul> <li>Sort by company (bytes 7-8), vendor/voucher (bytes 36-45), sequence number (bytes 2-6), and full record (bytes 1-128).</li> </ul> </li> <li> <p>Runs the sort to organize payment transaction records.</p> </li> <li> <p>Load AP151 Program:</p> </li> <li>Loads the <code>AP151</code> program (likely an RPG program for further transaction processing).</li> <li>Opens files:<ul> <li><code>APPYTR</code> (labeled <code>?9?AP151S</code>): Sorted transaction file.</li> <li><code>APOPEN</code> (labeled <code>?9?APOPEN</code>, shared): Open A/P file.</li> <li><code>APPAY</code> (labeled <code>?9?APPY?WS?</code>, extendable): Payment work file.</li> <li><code>APPYDS</code> (labeled <code>?9?APDS?WS?</code>, extendable): Payment discount work file.</li> </ul> </li> <li> <p>Runs <code>AP151</code> to process sorted transactions and update payment records, including handling discounts for late payments (noted in the comment: \"ADD CODE TO SAVE INVOICE INFO WHEN A DISCOUNT IS AVAILABLE BUT PAID TOO LATE\").</p> </li> <li> <p>Generate Cash Requirements Report:</p> </li> <li>Loads <code>#GSORT</code> again to sort payment records for reporting.</li> <li>Sorts the input file <code>?9?APPY?WS?</code> into output file <code>?9?APPS?WS?</code> (999,000 records).</li> <li>Sort specifications:<ul> <li>Sort by company (bytes 2-3), bank G/L number (bytes 153-160), vendor (bytes 4-8), prepaid code (byte 97), check number (bytes 91-96), and single check code (byte 152).</li> </ul> </li> <li> <p>Runs the sort to prepare data for the cash requirements report.</p> </li> <li> <p>Set Wire Transfer Indicator:</p> </li> <li> <p>Checks parameter <code>?3?</code>:</p> <ul> <li>If <code>?3?</code> equals <code>'WT'</code>, sets a local variable at offset 198 to <code>'WT*** WIRE TRANSFER ***'</code>.</li> <li>Otherwise, sets it to a blank string.</li> </ul> </li> <li> <p>Load AP155 Program:</p> </li> <li>Loads the <code>AP155</code> program (likely for generating the cash requirements report or final payment processing).</li> <li>Opens files:<ul> <li><code>APPAY</code> (labeled <code>?9?APPY?WS?</code>, shared): Payment work file.</li> <li><code>AP155S</code> (labeled <code>?9?APPS?WS?</code>): Sorted payment file.</li> <li><code>APCONT</code> (labeled <code>?9?APCONT</code>, shared): A/P control file.</li> <li><code>APPYTR</code> (labeled <code>?9?APPT?WS?</code>): Transaction work file.</li> <li><code>APVEND</code> (labeled <code>?9?APVEND</code>, shared): Vendor master file.</li> <li><code>APOPEN</code> (labeled <code>?9?APOPEN</code>, shared): Open A/P file.</li> <li><code>APCHKR</code> (labeled <code>?9?APCHKR</code>, shared): Check register file.</li> <li><code>APPYCK</code> (labeled <code>?9?APPC?WS?</code>, extendable): Check work file.</li> <li><code>APDETINV</code> (labeled <code>?9?APDT?WS?</code>, extendable): Invoice detail work file.</li> <li><code>APPYDS</code> (labeled <code>?9?APDS?WS?</code>, extendable): Payment discount work file.</li> </ul> </li> <li>Overrides printer file <code>APCSHRQ</code> to output queue <code>QUSRSYS/APEDIT</code> or <code>QUSRSYS/TESTOUTQ</code> based on parameter <code>?9?</code>.</li> <li> <p>Runs <code>AP155</code> to generate the cash requirements report or finalize payments.</p> </li> <li> <p>AP156 Program and Cleanup:</p> <ul> <li>Invokes <code>AP156</code> with parameter <code>?9?</code>.</li> <li>If in AUTO mode (<code>?2?/AUTO</code>), clears all local variables (<code>LOCAL BLANK-*ALL</code>).</li> <li>Proceeds to the <code>END</code> tag, terminating the program.</li> </ul> </li> </ol>"},{"location":"accounts-payable/03%20Payment%20Cycle/AP150%20OCL%20Payment%20Selection%20%26%20Rpt/AP150OCL/#external-programs-called","title":"External Programs Called","text":"<p>The OCL program invokes the following external programs: 1. AP150: Initial program for A/P payment transaction entry and editing. 2. #GSORT: System sort utility, called twice for sorting payment and report data. 3. AP151: Program for processing sorted payment transactions and handling discounts. 4. AP155: Program for generating the cash requirements report or finalizing payments. 5. AP156: Final program, likely for cleanup or additional processing.</p>"},{"location":"accounts-payable/03%20Payment%20Cycle/AP150%20OCL%20Payment%20Selection%20%26%20Rpt/AP150OCL/#tables-files-used","title":"Tables (Files) Used","text":"<p>The program references the following files (tables), with their labels and descriptions: 1. APPYTR (<code>?9?APPT?WS?</code>, <code>?9?AP151S</code>): Payment transaction work file (input and sorted output). 2. APCONT (<code>?9?APCONT</code>): A/P control file, shared. 3. GLMAST (<code>?9?GLMAST</code>): General ledger master file, shared. 4. APVEND (<code>?9?APVEND</code>): Vendor master file, shared. 5. APOPEN (<code>?9?APOPEN</code>): Open A/P file, shared. 6. GSTABL (<code>?9?GSTABL</code>): General system table, shared. 7. GSCONT (<code>?9?GSCONT</code>): General system control file, shared. 8. APPAY (<code>?9?APPY?WS?</code>): Payment work file, extendable. 9. AP155S (<code>?9?APPS?WS?</code>): Sorted payment file for reporting. 10. APCHKR (<code>?9?APCHKR</code>): Check register file, shared. 11. APPYCK (<code>?9?APPC?WS?</code>): Check work file, extendable. 12. APDETINV (<code>?9?APDT?WS?</code>): Invoice detail work file, extendable. 13. APPYDS (<code>?9?APDS?WS?</code>): Payment discount work file, extendable. 14. APPO?WS?: Temporary work file (checked for existence). 15. APCSHRQ: Printer file for the cash requirements report.</p>"},{"location":"accounts-payable/03%20Payment%20Cycle/AP150%20OCL%20Payment%20Selection%20%26%20Rpt/AP150OCL/#summary","title":"Summary","text":"<p>The <code>AP150</code> OCL program orchestrates the A/P payment transaction process by: - Creating and managing work files for transactions, payments, and discounts. - Sorting data for processing and reporting. - Invoking RPG programs (<code>AP150</code>, <code>AP151</code>, <code>AP155</code>, <code>AP156</code>) for specific tasks. - Handling special cases like wire transfers and late payment discounts. - Generating a cash requirements report.</p> <p>It interacts with multiple files (both permanent and temporary) and uses the <code>#GSORT</code> utility for data organization. The program is designed to run either standalone or in AUTO mode as part of a larger process (<code>AP200</code>).</p>"},{"location":"accounts-payable/03%20Payment%20Cycle/AP150%20OCL%20Payment%20Selection%20%26%20Rpt/AP150RPG/","title":"AP150RPG","text":"<p>The <code>AP150.rpg36.txt</code> file is an RPG III program (used on IBM midrange systems like the AS/400, now IBM i) that handles Accounts Payable (A/P) Payment Transaction Entry and Edit. It is the first program called by the <code>AP150.ocl36.txt</code> OCL script, as specified in the <code>LOAD AP150</code> statement. This program provides a user interface for entering and editing payment transactions, validating inputs, and managing payment selections for checks, ACH, wire transfers, employee expenses, or utility auto-pay. Below, I\u2019ll explain the process steps and business rules embedded in the program, based on the provided code.</p>"},{"location":"accounts-payable/03%20Payment%20Cycle/AP150%20OCL%20Payment%20Selection%20%26%20Rpt/AP150RPG/#process-steps-of-the-ap150-rpg-program","title":"Process Steps of the AP150 RPG Program","text":"<p>The <code>AP150</code> program is a workstation-based application that uses a display file (<code>SCREEN</code>) to interact with users for entering and editing A/P payment transactions. It processes data through a series of screens (<code>AP150S1</code> to <code>AP150S5</code>) and performs validations, file updates, and navigation logic. Here\u2019s a step-by-step breakdown of the process:</p> <ol> <li>Program Initialization (<code>ONETIM</code> Subroutine):</li> <li>Initializes variables, sets system date and time, and determines the operating mode (add or update).</li> <li>Checks if 13 accounting periods are used (<code>GX13GL</code> in <code>GSCONT</code> file).</li> <li>If no records exist in <code>APPYTR</code> (payment transaction file), sets the program to add mode (<code>indicator 17</code>) and initializes <code>NXTSEQ</code> (next sequence number) to 1.</li> <li> <p>If records exist, sets the program to update mode (<code>indicator 16</code>), retrieves the company number (<code>PTCONO</code>), and increments <code>NXTSEQ</code> based on the last sequence number (<code>LSTSEQ</code>).</p> </li> <li> <p>Screen Processing:    The program uses five screen formats (<code>AP150S1</code> to <code>AP150S5</code>) to collect and validate data. Each screen corresponds to a specific step in the payment transaction entry process:</p> </li> <li>S1 (Screen 1): Collects company number (<code>CONO</code>).<ul> <li>Validates the company number against <code>APCONT</code> (A/P control file).</li> <li>If valid, retrieves company details (e.g., cash G/L account <code>ACCAGL</code>, next check number <code>ACCKNO</code>) and populates screen fields.</li> <li>If invalid, displays error message \"INVALID COMPANY #\".</li> </ul> </li> <li>S2 (Screen 2): Collects bank G/L number (<code>BKGL</code>), check date (<code>CKDT</code>), payment date (<code>DATE</code>), force discount flag (<code>FDISC</code>), accounting period/year (<code>KYPD</code>, <code>KYPDYY</code>), and payment method (<code>KYHOLD</code>).<ul> <li>Validates inputs (e.g., bank G/L against <code>GLMAST</code>, check number not zero, valid dates, valid <code>KYHOLD</code> codes: <code>' '</code>, <code>A</code>, <code>W</code>, <code>E</code>, <code>U</code>).</li> <li>If checks were previously printed (<code>CHKPRT='Y'</code>), validates the CAPTCHA code (<code>APCODE</code>) to ensure authorized access.</li> <li>Performs date and period validations, especially for 13 accounting periods.</li> </ul> </li> <li>S3 (Screen 3): Collects sequence number (<code>SEQ#</code>) for a transaction.<ul> <li>Validates <code>SEQ#</code> against <code>APPYTR</code> and ensures it\u2019s not marked for deletion (<code>PTDEL='D'</code>).</li> <li>Retrieves transaction details if valid; otherwise, displays an error.</li> </ul> </li> <li>S4 (Screen 4): Collects vendor (<code>VEND</code>), voucher (<code>VO</code>), payment amount (<code>AMT</code>), discount amount (<code>DISC</code>), and other flags (<code>FDIS</code>, <code>PORH</code>, <code>SNGL</code>, <code>MKPP</code>, <code>PPCK</code>, <code>PPDT</code>).<ul> <li>Performs extensive validations (e.g., vendor exists in <code>APVEND</code>, voucher exists in <code>APOPEN</code>, payment amount doesn\u2019t exceed gross amount, correct payment method).</li> <li>Updates or adds the transaction to <code>APPYTR</code>.</li> </ul> </li> <li> <p>S5 (Screen 5): Allows the user to start over by deleting all transactions.</p> <ul> <li>Requires confirmation with the code <code>\"START OVER\"</code>.</li> <li>Deletes all records in <code>APPYTR</code> and resets the program to initial state.</li> </ul> </li> <li> <p>Key Navigation and Modes:</p> </li> <li>The program supports add mode (<code>indicator 17</code>) for new transactions and update mode (<code>indicator 16</code>) for editing existing ones.</li> <li>Function keys control navigation:<ul> <li>KA F2: Rekey without adding/updating.</li> <li>KA F4: Clear selections and start over.</li> <li>KD F3: Delete a transaction.</li> <li>KG F3: End the job.</li> <li>KJ F11: Switch to add mode.</li> <li>KK F12: Switch to update mode.</li> <li>KL: Allow payment from a different bank G/L number than originally assigned.</li> <li>Roll Keys (18/19): Navigate forward/backward through transactions.</li> </ul> </li> <li> <p>The program updates the <code>LSTSEQ</code> (last sequence number) and increments <code>NXTSEQ</code> for new transactions.</p> </li> <li> <p>Data Validation and Editing:</p> </li> <li>The <code>S2EDIT</code>, <code>S4EDIT</code>, and <code>DTEDIT</code> subroutines perform detailed validations:<ul> <li>S2EDIT: Validates bank G/L, check number, dates, force discount code, and accounting period/year.</li> <li>S4EDIT: Validates vendor, voucher, payment amount, discount amount, and payment codes (<code>FDIS</code>, <code>PORH</code>, <code>SNGL</code>, <code>MKPP</code>).</li> <li>DTEDIT: Validates date formats, including leap year checks and month/day ranges.</li> </ul> </li> <li> <p>Errors trigger appropriate indicators (e.g., <code>90</code> for general errors) and display messages from the <code>MSG</code> array.</p> </li> <li> <p>File Updates:</p> </li> <li>Transactions are written to or updated in the <code>APPYTR</code> file (payment transaction file) using the <code>PUTPT</code> subroutine.</li> <li>Deletions are marked with <code>PTDEL='D'</code> in <code>APPYTR</code>.</li> <li> <p>The program updates the CAPTCHA code in <code>GSCONT</code> if needed (<code>CODEUP</code> subroutine).</p> </li> <li> <p>Error Handling and User Feedback:</p> </li> <li>Error messages are displayed on the screen (<code>MSG30</code>, <code>MSGC1</code>, <code>MSGC2</code>) based on validation failures (e.g., \"INVALID VENDOR #\", \"CAN\u2019T PAY MORE THAN -&gt;\").</li> <li> <p>The program uses indicators (e.g., <code>81</code> to <code>90</code>) to control screen display and error states.</p> </li> <li> <p>Cleanup and Termination:</p> </li> <li>The <code>CLEAR</code> subroutine resets input fields for new entries.</li> <li>The <code>STOVER</code> subroutine handles the \"start over\" request.</li> <li>The program terminates when the user presses <code>KG</code> (F3) or completes the transaction entry process.</li> </ol>"},{"location":"accounts-payable/03%20Payment%20Cycle/AP150%20OCL%20Payment%20Selection%20%26%20Rpt/AP150RPG/#business-rules-in-the-ap150-rpg-program","title":"Business Rules in the AP150 RPG Program","text":"<p>The program enforces several business rules to ensure accurate and secure A/P transaction processing. These rules are derived from the validation logic and comments in the code:</p> <ol> <li>Company Validation:</li> <li> <p>The company number (<code>CONO</code>) must exist in the <code>APCONT</code> file. If not, an error (\"INVALID COMPANY #\") is displayed, and the user is prompted to correct it.</p> </li> <li> <p>Bank G/L and Check Number:</p> </li> <li>The bank G/L number (<code>BKGL</code>) must exist in the <code>GLMAST</code> file (\"INVALID BANK G/L #\").</li> <li>The next check number (<code>NXCK</code>) cannot be zero (\"CHECK # CANNOT BE ZERO\").</li> <li> <p>If a different bank G/L is used (<code>KL</code> key), the program allows overriding the original bank G/L assigned to a voucher, with a warning (\"PRESS F12 TO PAY VOUCHER\").</p> </li> <li> <p>Date Validations:</p> </li> <li>The check date (<code>CKDT</code>) and payment date (<code>DATE</code>) must be valid dates, checked via the <code>DTEDIT</code> subroutine.<ul> <li>Invalid dates trigger \"INVALID CHECK DATE\" or \"INVALID DATE TO PAY BY\".</li> <li>Dates must align with the accounting period/year (<code>KYPD</code>, <code>KYPDYY</code>) if 13 accounting periods are used (<code>GX13GL='Y'</code>).</li> <li>Dates are compared against period end dates in <code>GSTABL</code> to ensure they fall within valid ranges (\"DATE INVALID FOR PD/YR KEYED\").</li> </ul> </li> <li> <p>If the check date is not today\u2019s date, a warning is displayed (\"DATE NOT TODAY - F3 IF OK\").</p> </li> <li> <p>Payment Method Selection:</p> </li> <li>The <code>KYHOLD</code> field specifies the payment method: <code>' '</code> (checks), <code>A</code> (ACH), <code>W</code> (wire transfer), <code>E</code> (employee expenses), or <code>U</code> (utility auto-pay).</li> <li>The voucher\u2019s hold code (<code>OPHALT</code> in <code>APOPEN</code>) must match <code>KYHOLD</code>. Mismatches trigger the error \"CAN\u2019T PAY THIS VOUCHER NOW\".</li> <li> <p>For example, a voucher marked for ACH (<code>OPHALT='A'</code>) cannot be paid with a check (<code>KYHOLD=' '</code>).</p> </li> <li> <p>Voucher and Vendor Validation:</p> </li> <li>The vendor number (<code>VEND</code>) must exist in <code>APVEND</code> (\"INVALID VENDOR #\").</li> <li>The voucher number (<code>VO</code>) must exist in <code>APOPEN</code> and match the vendor/company (<code>OPCOVN</code>) (\"VOUCHER IS NOT OPEN\").</li> <li>For one-time vendors (<code>VEND=0</code>), a voucher number must be provided (\"A VOUCHER MUST BE KEYED\").</li> <li> <p>The voucher must not be on hold unless explicitly allowed.</p> </li> <li> <p>Payment and Discount Amounts:</p> </li> <li>The payment amount (<code>AMT</code>) must not exceed the remaining gross amount (<code>OPGRAM - OPPPTD</code>) in <code>APOPEN</code> (\"CAN\u2019T PAY MORE THAN -&gt;\").</li> <li>The discount amount (<code>DISC</code>) must not exceed the gross amount (\"INVALID DISCOUNT AMOUNT\").</li> <li> <p>The force discount code (<code>FDIS</code>) must be <code>' '</code> or <code>'D'</code> (\"FORCE DISCOUNTS MUST BE 'D'\").</p> </li> <li> <p>Pay or Hold and Single Check Codes:</p> </li> <li>The pay/hold code (<code>PORH</code>) must be <code>'P'</code> (pay) or <code>'H'</code> (hold) (\"PAY/HOLD MUST BE 'P'/'H'\").</li> <li> <p>The single check code (<code>SNGL</code>) must be <code>' '</code> or <code>'S'</code> (\"SINGLE CHECK MUST BE 'S'\").</p> </li> <li> <p>Prepaid Check Validation:</p> </li> <li>If the make prepaid code (<code>MKPP</code>) is specified, it must match the payment method:<ul> <li><code>'P'</code> for checks, <code>'A'</code> for ACH, <code>'W'</code> for wire transfers, <code>'E'</code> for employee expenses, or <code>'U'</code> for utility auto-pay.</li> <li>Errors trigger specific messages (e.g., \"MAKE PREPAID MUST BE 'A'\").</li> </ul> </li> <li>If <code>MKPP</code> is set, the prepaid check number (<code>PPCK</code>) and date (<code>PPDT</code>) must be provided and valid (\"PREPAID CHECK # IS MISSING\", \"INVALID PPD CHECK DATE\").</li> <li> <p>If <code>MKPP</code> is not set, <code>PPCK</code> and <code>PPDT</code> must be zero (\"PREPAID CHECK # MUST BE ZERO\", \"PPD CHECK DATE MUST BE ZERO\").</p> </li> <li> <p>Sequence Number Management:</p> </li> <li>The sequence number (<code>SEQ#</code>) must exist in <code>APPYTR</code> and not be marked for deletion (\"INVALID SEQUENCE #\", \"SEQ # WAS PREVIOUSLY DELETED\").</li> <li> <p>New transactions increment the sequence number (<code>NXTSEQ</code>).</p> </li> <li> <p>Start Over Functionality:</p> <ul> <li>Users can delete all transactions by entering <code>\"START OVER\"</code> in the <code>STOVER</code> field (\"REQUEST TO START OVER WAS IGNORED\" if incorrect).</li> <li>This clears <code>APPYTR</code> and resets the program to initial state.</li> </ul> </li> <li> <p>Security and CAPTCHA:</p> <ul> <li>If checks were previously printed (<code>CHKPRT='Y'</code>), a CAPTCHA code (<code>APCODE</code>) must be validated against <code>GSCONT</code> to proceed (\"OVERRIDE CODES DO NOT MATCH\").</li> <li>A new CAPTCHA code is generated and updated in <code>GSCONT</code> after validation (<code>CODEUP</code> subroutine).</li> </ul> </li> <li> <p>Accounting Period Handling:</p> <ul> <li>If 13 accounting periods are used (<code>GX13GL='Y'</code>), the period (<code>KYPD</code>) must be between 1 and 13, and the period/year must align with period end dates in <code>GSTABL</code> (\"INVALID PERIOD/YEAR\").</li> <li>The check date must fall within the specified period\u2019s date range.</li> </ul> </li> <li> <p>Transaction Deletion:</p> <ul> <li>Transactions can be marked for deletion (<code>PTDEL='D'</code>) using the <code>KD</code> key.</li> <li>Deleted transactions are not processed further but remain in <code>APPYTR</code> with the deletion flag.</li> </ul> </li> </ol>"},{"location":"accounts-payable/03%20Payment%20Cycle/AP150%20OCL%20Payment%20Selection%20%26%20Rpt/AP150RPG/#summary","title":"Summary","text":"<p>The <code>AP150</code> RPG program is a critical component of the A/P payment transaction process, providing an interactive interface for entering and editing payment details. It progresses through five screens to collect and validate company, bank, date, vendor, voucher, and payment information. The program enforces strict business rules to ensure data integrity, including validations for company, vendor, voucher, payment amounts, and payment methods. It supports multiple payment types (checks, ACH, wire transfers, employee expenses, utility auto-pay) and handles special cases like prepaid checks and 13 accounting periods. The program interacts with multiple files (<code>APPYTR</code>, <code>APCONT</code>, <code>GLMAST</code>, <code>APVEND</code>, <code>APOPEN</code>, <code>GSCONT</code>, <code>GSTABL</code>) and uses subroutines to modularize validation and processing logic.</p>"},{"location":"accounts-payable/03%20Payment%20Cycle/AP150%20OCL%20Payment%20Selection%20%26%20Rpt/AP151%20RPG/","title":"AP151 RPG","text":"<p>The <code>AP151.rpg36.txt</code> file is an RPG III program called by the <code>AP150.ocl36.txt</code> OCL script, specifically invoked after sorting payment transactions in the <code>APPYTR</code> file. Its primary purpose is to create payment records in the <code>APPAY</code> file and handle discount tracking in the <code>APPYDS</code> file for Accounts Payable (A/P) transactions. Below, I\u2019ll detail the process steps, business rules, tables used, and called programs based on the provided code.</p>"},{"location":"accounts-payable/03%20Payment%20Cycle/AP150%20OCL%20Payment%20Selection%20%26%20Rpt/AP151%20RPG/#process-steps-of-the-ap151-rpg-program","title":"Process Steps of the AP151 RPG Program","text":"<p>The <code>AP151</code> program processes sorted payment transaction records from <code>APPYTR</code> to generate payment records in <code>APPAY</code>, applying logic for payment selection, discount handling, and prepaid vouchers. It operates in two main modes based on the record type in <code>APPYTR</code>: paying by date (<code>EACH01</code>) or paying by vendor/voucher (<code>EACH02</code>). Here\u2019s a step-by-step breakdown:</p> <ol> <li>Read APPYTR Records:</li> <li>The program reads records from the <code>APPYTR</code> file, which contains payment transaction data sorted by company, vendor/voucher, and sequence number.</li> <li> <p>Records are processed in two formats:</p> <ul> <li>Format 01: Header records (pay by date, no specific vendor/voucher).</li> <li>Format 02: Detail records (pay by specific vendor/voucher).</li> </ul> </li> <li> <p>Process Header Records (<code>EACH01</code> Subroutine):</p> </li> <li>Converts check date (<code>PTCKDT</code>) and pay-by date (<code>PTDATE</code>) to 8-digit formats (<code>CKYMD8</code>, <code>PTDAT8</code>) with century handling for Y2K compliance.</li> <li> <p>For each header record:</p> <ul> <li>If the record is not marked for deletion (<code>PTDEL \u2260 'D'</code>), processes all applicable vouchers in <code>APOPEN</code>.</li> <li>Filters <code>APOPEN</code> records based on:</li> <li>Matching company number (<code>OPCONO = PTCONO</code>).</li> <li>Matching bank G/L number (<code>OPBKGL = PTBKGL</code>).</li> <li>Payment method (<code>PTHOLD</code> must match <code>OPHALT</code>: <code>' '</code> for checks, <code>A</code> for ACH, <code>W</code> for wire transfer, <code>E</code> for employee expenses, <code>U</code> for utility auto-pay).</li> <li>Not deleted (<code>OPDEL \u2260 'D'</code>) or on hold (<code>OPHALT \u2260 'H'</code>).</li> <li>For prepaid vouchers (<code>OPPAID = 'P'</code>, <code>'A'</code>, <code>'W'</code>, <code>'E'</code>, or <code>'U'</code>), ensures the payment method matches and processes them directly.</li> <li>For non-prepaid vouchers, checks discount eligibility:</li> <li>If force discount (<code>PTFDIS = 'D'</code>), applies the discount (<code>OPDISC</code>).</li> <li>Otherwise, compares the discount due date (<code>OPDSD8</code>) and due date (<code>DTYMD8</code>) against the check date (<code>CKYMD8</code>) and pay-by date (<code>PTDAT8</code>).</li> <li>If the discount due date is valid (on or after check date and before or on pay-by date), applies the discount.</li> <li>If the discount due date is missed, records the voucher in <code>APPYDS</code> for tracking missed discounts and sets the discount to zero.</li> <li>Calculates the payment amount (<code>OPLPAM = OPGRAM - OPDISC - OPPPTD</code>).</li> <li>For one-time vendors (<code>OPVEND = 0</code>), sets the single check flag (<code>OPSNGL = 'S'</code>).</li> <li>Writes or updates the <code>APPAY</code> record with payment details.</li> </ul> </li> <li> <p>Process Detail Records (<code>EACH02</code> Subroutine):</p> </li> <li> <p>For detail records (specific vendor/voucher):</p> <ul> <li>If marked for deletion (<code>PTDEL = 'D'</code>), skips processing.</li> <li>Filters <code>APOPEN</code> records based on:</li> <li>Matching company number (<code>OPCONO = PTCONO</code>).</li> <li>Matching vendor number (<code>OPVEND = PTVEND</code>).</li> <li>Matching voucher number (<code>OPVONO = PTVO</code>) if paying a specific voucher.</li> <li>Matching bank G/L number (<code>OPBKGL = PTBKGL</code>) if paying the whole vendor.</li> <li>Payment method (<code>PTHOLD</code> matches <code>OPHALT</code>).</li> <li>Not deleted (<code>OPDEL \u2260 'D'</code>).</li> <li>Handles hold status (<code>PTPORH = 'H'</code> to skip, <code>'P'</code> to pay).</li> <li>For prepaid vouchers, ensures the payment method matches (<code>PTMKPP</code> and <code>OPPAID</code>).</li> <li>Applies discounts based on <code>PTDISC</code> if provided, or sets to zero if the header discount is zero or the due date is past.</li> <li>Calculates the payment amount, adjusting for partial payments (<code>PTAMT</code>) if specified.</li> <li>Writes or updates the <code>APPAY</code> record, marking it for deletion if held (<code>PYDEL = 'D'</code>).</li> </ul> </li> <li> <p>Discount Tracking:</p> </li> <li> <p>If a discount is missed (check date past discount due date and no force discount), writes a record to <code>APPYDS</code> to track the missed discount (<code>EXCPTMISDIS</code>).</p> </li> <li> <p>Output to APPAY and APPYDS:</p> </li> <li>Writes payment records to <code>APPAY</code> with fields like payment amount (<code>OPLPAM</code>), discount (<code>OPDISC</code>), check number (<code>OPCKNO</code>), check date (<code>OPCKDT</code>), and payment method (<code>OPPAID</code>).</li> <li> <p>Writes missed discount records to <code>APPYDS</code> with similar fields for tracking purposes.</p> </li> <li> <p>Loop and Termination:</p> </li> <li>Continues processing <code>APPYTR</code> records until all are read.</li> <li>Terminates when no more records are available in <code>APPYTR</code>.</li> </ol>"},{"location":"accounts-payable/03%20Payment%20Cycle/AP150%20OCL%20Payment%20Selection%20%26%20Rpt/AP151%20RPG/#business-rules-in-the-ap151-rpg-program","title":"Business Rules in the AP151 RPG Program","text":"<p>The program enforces several business rules to ensure accurate payment processing and discount handling:</p> <ol> <li>Payment Method Matching:</li> <li> <p>The payment method in <code>APPYTR</code> (<code>PTHOLD</code>) must match the voucher's hold code in <code>APOPEN</code> (<code>OPHALT</code>):</p> <ul> <li><code>' '</code> (checks), <code>A</code> (ACH), <code>W</code> (wire transfer), <code>E</code> (employee expenses), <code>U</code> (utility auto-pay).</li> <li>Mismatches skip the voucher.</li> </ul> </li> <li> <p>Prepaid Voucher Handling:</p> </li> <li>Prepaid vouchers (<code>OPPAID = 'P'</code>, <code>'A'</code>, <code>'W'</code>, <code>'E'</code>, or <code>'U'</code>) are paid only if the payment method matches <code>PTHOLD</code>.</li> <li> <p>Prepaid check number (<code>OPCKNO</code>) and date (<code>OPCKDT</code>) are set to the transaction\u2019s check date (<code>PTCKDT</code>).</p> </li> <li> <p>Discount Eligibility:</p> </li> <li>If force discount is set (<code>PTFDIS = 'D'</code>), the discount (<code>OPDISC</code>) is applied regardless of the discount due date.</li> <li>Otherwise, discounts are applied only if:<ul> <li>The discount due date (<code>OPDSD8</code>) is on or after the check date (<code>CKYMD8</code>) and before or on the pay-by date (<code>PTDAT8</code>).</li> <li>If the discount due date is missed, the discount is set to zero, and a record is written to <code>APPYDS</code>.</li> </ul> </li> <li> <p>If the voucher is partially paid (<code>OPPPTD &gt; 0</code>) or past due, the discount is set to zero unless forced.</p> </li> <li> <p>Due Date Validation:</p> </li> <li> <p>Vouchers are selected for payment only if their due date (<code>DTYMD8</code>) is on or before the pay-by date (<code>PTDAT8</code>), unless force discount is applied.</p> </li> <li> <p>Partial Payments:</p> </li> <li>For detail records with a partial payment amount (<code>PTAMT &gt; 0</code>), the payment amount (<code>OPLPAM</code>) is set to <code>PTAMT</code>, and the discount is adjusted accordingly.</li> <li> <p>If the partial payment amount equals the remaining amount (<code>OPLPAM</code>), the discount is set to zero.</p> </li> <li> <p>One-Time Vendors:</p> </li> <li> <p>For one-time vendors (<code>OPVEND = 0</code>), the single check flag (<code>OPSNGL</code>) is set to <code>'S'</code>.</p> </li> <li> <p>Hold Status:</p> </li> <li>Vouchers on hold (<code>OPHALT = 'H'</code>) are skipped unless explicitly marked to pay (<code>PTPORH = 'P'</code>).</li> <li> <p>Detail records with <code>PTPORH = 'H'</code> are marked for deletion in <code>APPAY</code> (<code>PYDEL = 'D'</code>).</p> </li> <li> <p>Company and Bank G/L Matching:</p> </li> <li> <p>The company number (<code>OPCONO</code>) and bank G/L number (<code>OPBKGL</code>) must match the transaction\u2019s values (<code>PTCONO</code>, <code>PTBKGL</code>).</p> </li> <li> <p>Missed Discount Tracking:</p> </li> <li>If a discount is available but cannot be taken (check date past discount due date), a record is written to <code>APPYDS</code> to track the missed discount.</li> </ol>"},{"location":"accounts-payable/03%20Payment%20Cycle/AP150%20OCL%20Payment%20Selection%20%26%20Rpt/AP151%20RPG/#tables-files-used","title":"Tables (Files) Used","text":"<p>The program interacts with the following files:</p> <ol> <li>APPYTR (<code>IP</code>, Input Primary, 128 bytes):</li> <li>Payment transaction file containing sorted header and detail records.</li> <li> <p>Fields include <code>PTCONO</code> (company), <code>PTVEND</code> (vendor), <code>PTVO</code> (voucher), <code>PTAMT</code> (payment amount), <code>PTDISC</code> (discount), <code>PTFDIS</code> (force discount), <code>PTHOLD</code> (payment method), etc.</p> </li> <li> <p>APOPEN (<code>ID</code>, Input with Disk, 384 bytes):</p> </li> <li>Open A/P file containing voucher details.</li> <li> <p>Fields include <code>OPCONO</code> (company), <code>OPVEND</code> (vendor), <code>OPVONO</code> (voucher), <code>OPGRAM</code> (gross amount), <code>OPDISC</code> (discount), <code>OPDSDT</code> (discount due date), <code>OPDUED</code> (due date), <code>OPHALT</code> (hold code), <code>OPPAID</code> (prepaid code), etc.</p> </li> <li> <p>APPAY (<code>UC</code>, Update/Create, 384 bytes):</p> </li> <li>Output file for payment records.</li> <li> <p>Fields include <code>PYDEL</code> (delete flag), <code>OPLPAM</code> (payment amount), <code>OPDISC</code> (discount), <code>OPCKNO</code> (check number), <code>OPPAID</code> (payment method), <code>OPSNGL</code> (single check), <code>PTSEQ#</code> (sequence number), etc.</p> </li> <li> <p>APPYDS (<code>O</code>, Output, 384 bytes):</p> </li> <li>Output file for tracking missed discounts.</li> <li>Fields mirror <code>APPAY</code>, including <code>OPREC</code>, <code>OPDISC</code>, <code>OPCKNO</code>, <code>OPPAID</code>, <code>OPSNGL</code>, <code>OPBKGL</code>, <code>OPLPAM</code>, <code>PTSEQ#</code>.</li> </ol>"},{"location":"accounts-payable/03%20Payment%20Cycle/AP150%20OCL%20Payment%20Selection%20%26%20Rpt/AP151%20RPG/#called-programs","title":"Called Programs","text":"<p>The <code>AP151</code> program does not explicitly call any external programs. It is a standalone RPG program that processes input from <code>APPYTR</code> and <code>APOPEN</code>, writing output to <code>APPAY</code> and <code>APPYDS</code>. The OCL script (<code>AP150.ocl36.txt</code>) invokes <code>AP151</code> after sorting <code>APPYTR</code> with <code>#GSORT</code>, but no additional programs are called within <code>AP151</code> itself.</p>"},{"location":"accounts-payable/03%20Payment%20Cycle/AP150%20OCL%20Payment%20Selection%20%26%20Rpt/AP151%20RPG/#summary","title":"Summary","text":"<p>The <code>AP151</code> RPG program processes sorted payment transactions from <code>APPYTR</code> to create payment records in <code>APPAY</code> and track missed discounts in <code>APPYDS</code>. It handles two types of transactions: pay-by-date (header) and pay-by-vendor/voucher (detail). The program enforces strict business rules for payment method matching, discount eligibility, due date validation, and prepaid voucher handling. It supports multiple payment methods (checks, ACH, wire transfers, employee expenses, utility auto-pay) and ensures accurate payment calculations while tracking missed discounts for reporting. The program interacts with four files (<code>APPYTR</code>, <code>APOPEN</code>, <code>APPAY</code>, <code>APPYDS</code>) and does not call external programs.</p>"},{"location":"accounts-payable/03%20Payment%20Cycle/AP150%20OCL%20Payment%20Selection%20%26%20Rpt/AP155%20RPG/","title":"AP155 RPG","text":"<p>The <code>AP155.rpg36.txt</code> file is an RPG III program called by the <code>AP150.ocl36.txt</code> OCL script, designed to generate a Cash Requirements Report for Accounts Payable (A/P) transactions. It processes payment records from the <code>APPAY</code> file, updates invoice details in <code>APDETINV</code>, and produces a formatted report in <code>APCSHRQ</code>. Below, I detail the process steps, business rules, tables used, and external programs called based on the provided code.</p>"},{"location":"accounts-payable/03%20Payment%20Cycle/AP150%20OCL%20Payment%20Selection%20%26%20Rpt/AP155%20RPG/#process-steps-of-the-ap155-rpg-program","title":"Process Steps of the AP155 RPG Program","text":"<p>The <code>AP155</code> program generates a cash requirements report by processing payment records from <code>APPAY</code>, aggregating totals, validating checks, and updating invoice details. It handles both prepaid and non-prepaid payments, supports multiple payment methods (checks, ACH, wire transfers, employee expenses, utility auto-pay), and tracks missed discounts. Here\u2019s a step-by-step breakdown:</p> <ol> <li>Initialization (<code>L6DET</code> Subroutine):</li> <li>Initializes variables: sets page number to zero, clears counters (<code>C6CNT</code>, <code>P6CNT</code>, <code>L6CNT</code>, etc.), and prepares the report header.</li> <li>Retrieves the system date and time, formatting the date as an 8-digit value (<code>DATE8</code>) for Y2K compliance.</li> <li>Chains to <code>APCONT</code> to retrieve the company name (<code>ACNAME</code>) and check if pre-numbered checks are used (<code>ACPRE#</code>).</li> <li>Chains to <code>APPYTR</code> to get the next check number (<code>PTNXCK</code>), check date (<code>PTCKDT</code>), pay-by date (<code>PTDATE</code>), force discount flag (<code>PTFDIS</code>), and payment method (<code>PTHOLD</code>).</li> <li>Sets the payment method description (<code>PAYBY</code>) based on <code>PTHOLD</code>:<ul> <li><code>' '</code>: \"PAY BY CHECK\"</li> <li><code>A</code>: \"PAY BY ACH\"</li> <li><code>W</code>: \"PAY BY WIRE TFR\"</li> <li><code>E</code>: \"PAY BY PAYROLL\"</li> <li><code>U</code>: \"PAY BY UTIL AUPY\"</li> </ul> </li> <li> <p>Writes the report header to <code>APCSHRQ</code> with company name, payment method, check date, and other details.</p> </li> <li> <p>Process APPAY Records:</p> </li> <li>Reads records from <code>APPAY</code> (payment file) sorted by company (<code>OPCONO</code>), vendor (<code>OPVEND</code>), and sequence number (<code>OPSEQ#</code>).</li> <li> <p>For each record:</p> <ul> <li>Checks if the record is not deleted (<code>OPDEL \u2260 'D'</code>).</li> <li>Identifies payment type:</li> <li>Prepaid payments: <code>OPPAID = 'P'</code> (check), <code>'A'</code> (ACH), <code>'W'</code> (wire transfer), <code>'E'</code> (employee expenses), <code>'U'</code> (utility auto-pay).</li> <li>Single check: <code>OPSNGL = 'S'</code>.</li> <li>Updates <code>APDETINV</code> to track invoice details:</li> <li>Constructs a key (<code>APKY27</code>) using company (<code>OPCONO</code>), vendor (<code>OPVEND</code>), and invoice number (<code>OPINVN</code>).</li> <li>Chains to <code>APDETINV</code> to check for existing records.</li> <li>If found, adds gross amount (<code>OPGRAM</code>) and discount (<code>OPDISC</code>) to existing totals (<code>APGRAM</code>, <code>APDISC</code>).</li> <li>If not found, creates a new record with invoice details.</li> </ul> </li> <li> <p>Aggregate Totals:</p> </li> <li>Accumulates totals for gross amount (<code>CKGRAM</code>), discount (<code>CKDISC</code>), and payment amount (<code>CKAMT</code>) for each check.</li> <li>Tracks invoice count (<code>COUNT</code>) per check, with a maximum of 36 invoices to avoid stub overflow.</li> <li> <p>Maintains company-level totals:</p> <ul> <li><code>C6CNT</code>, <code>C6GRAM</code>, <code>C6DISC</code>, <code>C6LPAM</code>: Computer checks.</li> <li><code>P6CNT</code>, <code>P6GRAM</code>, <code>P6DISC</code>, <code>P6LPAM</code>: Prepaid payments.</li> <li><code>L6CNT</code>, <code>L6GRAM</code>, <code>L6DISC</code>, <code>L6LPAM</code>: Total checks.</li> </ul> </li> <li> <p>Check Validation (<code>CHECK</code> Subroutine):</p> </li> <li>Determines the check number (<code>THISCK</code>):<ul> <li>For prepaid payments (<code>OPPAID = 'P', 'A', 'W', 'E', 'U'</code>), uses <code>OPCKNO</code>.</li> <li>For non-prepaid, uses the next check number (<code>NXCK</code>) and increments it.</li> </ul> </li> <li>If the payment amount is zero or negative (<code>CKAMT \u2264 0</code>), marks the check as \"CREDIT / NO PAY\" and processes it in the <code>NOPAY</code> subroutine.</li> <li>Checks for missed discounts by chaining to <code>APPYDS</code> with a key (<code>DSKY12</code>) based on company and vendor/voucher. If found, sets indicator <code>50</code> to note \"DISCOUNT NOT TAKEN\" on the report.</li> <li>Validates the check against <code>APCHKR</code>:<ul> <li>For non-void checks (<code>CKAMT &gt; 0</code>), ensures the check does not exist or is not open (<code>AMCODE \u2260 'O'</code>).</li> <li>For void checks (<code>CKAMT &lt; 0</code>), ensures the check exists, is open, and the entire amount is voided (<code>VOIDAM = AMCKAM</code>).</li> </ul> </li> <li> <p>Writes the check record to <code>APPYCK</code> with fields like check number, payment amount, and status (<code>'F'</code> for full stub, <code>'V'</code> for void, <code>'C'</code> for credit/no pay).</p> </li> <li> <p>Handle Credit/No Pay and Full Stubs (<code>NOPAY</code> Subroutine):</p> </li> <li>For checks with zero or negative amounts (<code>CKAMT \u2264 0</code>) or full stubs (36 invoices), marks related <code>APPYCK</code> records as \"CREDIT / NO PAY\" (<code>AXRECD = 'C'</code>, <code>AXCHEK = 0</code>).</li> <li> <p>Adjusts counters (<code>C6CNT</code>, <code>L6CNT</code>) if a full stub was previously written with the same check number.</p> </li> <li> <p>Report Output:</p> </li> <li>Writes detail lines to <code>APCSHRQ</code> for each invoice, including sequence number (<code>OPSEQ#</code>), invoice number (<code>OPINVN</code>), description (<code>OPINDS</code>), gross amount (<code>OPGRAM</code>), discount (<code>OPDISC</code>), paid-to-date (<code>OPPPTD</code>), payment amount (<code>OPLPAM</code>), due date (<code>OPDUED</code>), vendor (<code>OPVEND</code>), and voucher (<code>OPVONO</code>).</li> <li>Writes check totals (<code>CKGRAM</code>, <code>CKDISC</code>, <code>CKAMT</code>) with annotations for prepaid payments, full stubs, or void checks.</li> <li>Writes company totals (<code>C6CNT</code>, <code>C6GRAM</code>, <code>C6DISC</code>, <code>C6LPAM</code>, etc.) at the end of each company group.</li> <li> <p>Includes error messages for invalid checks (e.g., \"CHECK IS ALREADY OPEN\", \"WHOLE CHECK AMOUNT MUST BE VOIDED\").</p> </li> <li> <p>End of Processing:</p> </li> <li>At the end of each company (<code>L6</code>), writes company totals and resets counters.</li> <li>Continues processing until all <code>APPAY</code> records are read, then terminates.</li> </ol>"},{"location":"accounts-payable/03%20Payment%20Cycle/AP150%20OCL%20Payment%20Selection%20%26%20Rpt/AP155%20RPG/#business-rules-in-the-ap155-rpg-program","title":"Business Rules in the AP155 RPG Program","text":"<p>The program enforces the following business rules:</p> <ol> <li>Payment Method Handling:</li> <li>Supports payment methods: checks (<code>' '</code>), ACH (<code>A</code>), wire transfers (<code>W</code>), employee expenses (<code>E</code>), and utility auto-pay (<code>U</code>).</li> <li>Prepaid payments (<code>OPPAID = 'P', 'A', 'W', 'E', 'U'</code>) use the provided check number (<code>OPCKNO</code>) and date (<code>OPCKDT</code>).</li> <li> <p>Non-prepaid payments increment the next check number (<code>NXCK</code>) from <code>APPYTR</code>.</p> </li> <li> <p>Single Check Processing:</p> </li> <li> <p>Vouchers marked as single check (<code>OPSNGL = 'S'</code>) are processed individually, ensuring separate checks for one-time vendors or specific vouchers.</p> </li> <li> <p>Invoice Aggregation:</p> </li> <li> <p>For multiple invoices with the same invoice number for a vendor, aggregates gross (<code>APGRAM</code>) and discount (<code>APDISC</code>) amounts in <code>APDETINV</code> to avoid duplicate entries (per modifications <code>JB03</code> and <code>MG04</code>).</p> </li> <li> <p>Check Validation:</p> </li> <li>Non-void checks must not already exist in <code>APCHKR</code> or must not be open (<code>AMCODE \u2260 'O'</code>).</li> <li>Void checks must exist, be open, and have the entire amount voided.</li> <li> <p>Zero or negative payment amounts (<code>CKAMT \u2264 0</code>) are marked as \"CREDIT / NO PAY\" and not paid.</p> </li> <li> <p>Stub Limits:</p> </li> <li> <p>A maximum of 36 invoices per check is enforced to prevent stub overflow. If exceeded, the check is marked as a full stub (<code>'F'</code> or <code>'V'</code>), and processing continues with a new check number.</p> </li> <li> <p>Missed Discount Reporting:</p> </li> <li> <p>If a record exists in <code>APPYDS</code> for a voucher, indicates a missed discount on the report (\"DISCOUNT NOT TAKEN\").</p> </li> <li> <p>Company and Vendor Validation:</p> </li> <li>Chains to <code>APCONT</code> to validate company number and retrieve company name.</li> <li> <p>Chains to <code>APVEND</code> or <code>APOPEN</code> to retrieve vendor name (<code>VNNAME</code>) and sort abbreviation (<code>VNSORT</code>) for reporting.</p> </li> <li> <p>Report Formatting:</p> </li> <li>The report includes headers with company name, payment method, bank G/L, next check number, and dates.</li> <li>Detail lines include invoice details, and totals are provided for computer checks, prepaid payments, and overall checks per company.</li> </ol>"},{"location":"accounts-payable/03%20Payment%20Cycle/AP150%20OCL%20Payment%20Selection%20%26%20Rpt/AP155%20RPG/#tables-files-used","title":"Tables (Files) Used","text":"<p>The program interacts with the following files:</p> <ol> <li>APPAY (<code>UP</code>, Update Primary, 384 bytes):</li> <li>Payment file containing records to be reported.</li> <li> <p>Fields: <code>OPDEL</code> (delete flag), <code>OPCONO</code> (company), <code>OPVEND</code> (vendor), <code>OPVONO</code> (voucher), <code>OPGRAM</code> (gross amount), <code>OPDISC</code> (discount), <code>OPPPTD</code> (partial paid), <code>OPINVN</code> (invoice number), <code>OPLPAM</code> (payment amount), <code>OPPAID</code> (prepaid code), <code>OPSNGL</code> (single check), <code>OPCKNO</code> (check number), <code>OPCKDT</code> (check date).</p> </li> <li> <p>AP155S (<code>IR</code>, Input Random, 3 bytes):</p> </li> <li> <p>Input file for report sequencing (likely a control or sort file).</p> </li> <li> <p>APCONT (<code>IC</code>, Input with Chain, 256 bytes):</p> </li> <li>A/P control file for company details.</li> <li> <p>Fields: <code>ACNAME</code> (company name), <code>ACPRE#</code> (pre-numbered checks flag).</p> </li> <li> <p>APPYTR (<code>IC</code>, Input with Chain, 128 bytes):</p> </li> <li>Payment transaction file for header information.</li> <li> <p>Fields: <code>PTBKGL</code> (bank G/L), <code>PTNXCK</code> (next check number), <code>PTCKDT</code> (check date), <code>PTDATE</code> (pay-by date), <code>PTFDIS</code> (force discount), <code>PTHOLD</code> (payment method).</p> </li> <li> <p>APVEND (<code>IC</code>, Input with Chain, 579 bytes):</p> </li> <li>Vendor file for vendor details.</li> <li> <p>Fields: <code>VNNAME</code> (vendor name), <code>VNSORT</code> (sort abbreviation).</p> </li> <li> <p>APOPEN (<code>IC</code>, Input with Chain, 384 bytes):</p> </li> <li>Open A/P file for voucher details.</li> <li> <p>Fields: <code>VNNAME</code> (vendor name), <code>VNSORT</code> (sort abbreviation).</p> </li> <li> <p>APCHKR (<code>IC</code>, Input with Chain, 128 bytes):</p> </li> <li>Check register file for validating check status.</li> <li> <p>Fields: <code>AMCODE</code> (status: D, O, R, V), <code>AMCKAM</code> (check amount).</p> </li> <li> <p>APPYCK (<code>UC</code>, Update/Create, 96 bytes):</p> </li> <li>Check file for recording check details.</li> <li> <p>Fields: <code>AXRECD</code> (record code: ' ', F, V, C, P, A, W, E, U), <code>AXCHEK</code> (check number), <code>CKAMT</code> (payment amount), <code>PTCKDT</code> (check date).</p> </li> <li> <p>APDETINV (<code>UF</code>, Update with File, 256 bytes):</p> </li> <li>Invoice detail file for tracking invoice totals.</li> <li> <p>Fields: <code>APDEL</code> (delete flag), <code>APCONO</code> (company), <code>APVEND</code> (vendor), <code>APINVN</code> (invoice number), <code>APGRAM</code> (gross amount), <code>APDISC</code> (discount), <code>OPPPTD</code> (partial paid), <code>OPINDS</code> (description), <code>OPDUED</code> (due date), <code>OPVONO</code> (voucher).</p> </li> <li> <p>APPYDS (<code>IF</code>, Input with File, 384 bytes):</p> <ul> <li>Missed discount file for identifying discounts not taken.</li> <li>Fields: <code>DSDEL</code> (delete flag), <code>DSCONO</code> (company), <code>DSVEND</code> (vendor), <code>DSVONO</code> (voucher), <code>DSDISC</code> (discount), <code>DSDSDT</code> (discount due date).</li> </ul> </li> <li> <p>APCSHRQ (<code>O</code>, Output, 142 bytes):</p> <ul> <li>Printer file for the cash requirements report.</li> <li>Outputs headers, detail lines, check totals, and company totals.</li> </ul> </li> </ol>"},{"location":"accounts-payable/03%20Payment%20Cycle/AP150%20OCL%20Payment%20Selection%20%26%20Rpt/AP155%20RPG/#external-programs-called","title":"External Programs Called","text":"<p>The <code>AP155</code> program does not explicitly call any external programs. It is a standalone RPG program invoked by the <code>AP150.ocl36.txt</code> OCL script after <code>AP151</code> and sorting operations. All processing is handled internally through subroutines (<code>L6DET</code>, <code>L4DET</code>, <code>CHECK</code>, <code>NOPAY</code>, <code>EDITCK</code>).</p>"},{"location":"accounts-payable/03%20Payment%20Cycle/AP150%20OCL%20Payment%20Selection%20%26%20Rpt/AP155%20RPG/#summary","title":"Summary","text":"<p>The <code>AP155</code> RPG program generates a Cash Requirements Report by processing <code>APPAY</code> records, updating <code>APDETINV</code> for invoice tracking, and validating checks against <code>APCHKR</code>. It supports multiple payment methods (checks, ACH, wire transfers, employee expenses, utility auto-pay) and enforces rules for check validation, stub limits (36 invoices), and missed discount reporting. The program interacts with 11 files (<code>APPAY</code>, <code>AP155S</code>, <code>APCONT</code>, <code>APPYTR</code>, <code>APVEND</code>, <code>APOPEN</code>, <code>APCHKR</code>, <code>APPYCK</code>, <code>APDETINV</code>, <code>APPYDS</code>, <code>APCSHRQ</code>) and produces a detailed report in <code>APCSHRQ</code> with invoice details, check totals, and company summaries. No external programs are called, as all logic is self-contained.</p>"},{"location":"accounts-payable/03%20Payment%20Cycle/AP150%20OCL%20Payment%20Selection%20%26%20Rpt/AP156%20RPG/","title":"AP156 RPG","text":"<p>Below, I provide a detailed analysis of the AP156.ocl36.txt OCL script and the AP156.rpg36.txt RPG program, which are part of the Accounts Payable (A/P) payment processing system. The OCL script invokes the <code>AP156</code> RPG program to create a National Automated Clearing House Association (NACHA) file for ACH payments to PNC Bank. I will outline the process steps, business rules, tables used, and external programs called for both the OCL and RPG components.</p>"},{"location":"accounts-payable/03%20Payment%20Cycle/AP150%20OCL%20Payment%20Selection%20%26%20Rpt/AP156%20RPG/#ap156ocl36txt-ocl-script","title":"AP156.ocl36.txt (OCL Script)","text":""},{"location":"accounts-payable/03%20Payment%20Cycle/AP150%20OCL%20Payment%20Selection%20%26%20Rpt/AP156%20RPG/#process-steps","title":"Process Steps","text":"<p>The <code>AP156.ocl36.txt</code> OCL script is responsible for initiating the creation of a NACHA file for ACH payments. The steps are as follows:</p> <ol> <li>Conditional Execution Check:</li> <li>Checks if the payment run is for ACH payments by examining position 400 of the Local Data Area (LDA). The value must be <code>'A'</code>, set by the <code>AP155</code> program if ACH payments (<code>OPPAID = 'A'</code>) are detected in <code>APPAY</code>.</li> <li> <p>If the LDA position 400 does not contain <code>'A'</code>, the script jumps to the <code>END</code> tag, skipping execution of the <code>AP156</code> program.</p> </li> <li> <p>Clear ACH File:</p> </li> <li> <p>Executes the <code>CLRPFM</code> command to clear the physical file <code>ACHFIL</code> (labeled <code>?9?ACHFIL</code>), ensuring no residual data from previous runs.</p> </li> <li> <p>Load and Run AP156 Program:</p> </li> <li>Loads the <code>AP156</code> RPG program using the <code>LOAD AP156</code> command.</li> <li>Specifies input and output files:<ul> <li><code>APPYCK</code>: Check file, labeled <code>?9?APPC?WS?</code>, shared access (<code>DISP-SHR</code>).</li> <li><code>APCONT</code>: A/P control file, labeled <code>?9?APCONT</code>, shared access.</li> <li><code>APVEND</code>: Vendor file, labeled <code>?9?APVEND</code>, shared access.</li> <li><code>ACHFILE</code>: Output NACHA file, labeled <code>?9?ACHFIL</code>, shared access.</li> </ul> </li> <li> <p>Executes the program using the <code>RUN</code> command.</p> </li> <li> <p>Termination:</p> </li> <li>If the ACH condition is not met, the script terminates at the <code>END</code> tag without running <code>AP156</code>.</li> </ol>"},{"location":"accounts-payable/03%20Payment%20Cycle/AP150%20OCL%20Payment%20Selection%20%26%20Rpt/AP156%20RPG/#business-rules","title":"Business Rules","text":"<ol> <li>ACH Payment Requirement:</li> <li>The script only proceeds if the payment run includes ACH payments (<code>LDA position 400 = 'A'</code>).</li> <li> <p>If no ACH payments are present, the script skips execution to avoid unnecessary processing.</p> </li> <li> <p>File Preparation:</p> </li> <li> <p>The <code>ACHFIL</code> file must be cleared before processing to ensure a clean slate for the NACHA file output.</p> </li> <li> <p>Shared File Access:</p> </li> <li>All files (<code>APPYCK</code>, <code>APCONT</code>, <code>APVEND</code>, <code>ACHFILE</code>) are opened with shared access (<code>DISP-SHR</code>) to allow concurrent access by other programs or processes.</li> </ol>"},{"location":"accounts-payable/03%20Payment%20Cycle/AP150%20OCL%20Payment%20Selection%20%26%20Rpt/AP156%20RPG/#tables-files-used","title":"Tables (Files) Used","text":"<ol> <li>APPYCK (<code>?9?APPC?WS?</code>):</li> <li>Check file containing payment records.</li> <li>APCONT (<code>?9?APCONT</code>):</li> <li>A/P control file with company details.</li> <li>APVEND (<code>?9?APVEND</code>):</li> <li>Vendor file with vendor details, including ACH information.</li> <li>ACHFILE (<code>?9?ACHFIL</code>):</li> <li>Output file for the NACHA-formatted ACH payment data.</li> </ol>"},{"location":"accounts-payable/03%20Payment%20Cycle/AP150%20OCL%20Payment%20Selection%20%26%20Rpt/AP156%20RPG/#external-programs-called","title":"External Programs Called","text":"<ul> <li>AP156: The RPG program loaded and executed to create the NACHA file.</li> </ul>"},{"location":"accounts-payable/03%20Payment%20Cycle/AP150%20OCL%20Payment%20Selection%20%26%20Rpt/AP156%20RPG/#ap156rpg36txt-rpg-program","title":"AP156.rpg36.txt (RPG Program)","text":""},{"location":"accounts-payable/03%20Payment%20Cycle/AP150%20OCL%20Payment%20Selection%20%26%20Rpt/AP156%20RPG/#process-steps_1","title":"Process Steps","text":"<p>The <code>AP156</code> RPG program generates a NACHA-formatted file (<code>ACHFILE</code>) for ACH payments to PNC Bank, processing records from <code>APPYCK</code> and retrieving additional data from <code>APCONT</code> and <code>APVEND</code>. The program produces a structured file with specific record types (1, 5, 6, 8, 9) as required by NACHA standards. Here are the steps:</p> <ol> <li>Initialization (<code>ONETIM</code> Subroutine):</li> <li> <p>Executes once (<code>ONCE = 1</code>) to set up the environment:</p> <ul> <li>Retrieves system date and time (<code>SYTMDT</code>) and formats the date for NACHA records.</li> <li>Initializes counters: <code>BATCH#</code> (batch number), <code>TRACE#</code> (trace number), <code>LRCNT</code> (entry count), <code>LRHASH</code> (hash total), <code>LRDR</code> (debit total), <code>LRCR</code> (credit total), <code>RECCNT</code> (record count).</li> <li>Writes the File Header Record (Type 1) to <code>ACHFILE</code> with fields like priority code, ABA numbers, transmission date/time, and company names.</li> </ul> </li> <li> <p>Process APPYCK Records:</p> </li> <li>Reads <code>APPYCK</code> records (check file) sorted by company (<code>PYCONO</code>) and vendor (<code>PYVEND</code>).</li> <li> <p>For each record:</p> <ul> <li>Validates that the record is not a detail record (<code>NS 01</code>) and has a valid status (<code>PYSTAT = 'A'</code> for ACH payments).</li> <li>Chains to <code>APCONT</code> to retrieve company details (e.g., <code>ACNAME</code>, <code>ACBKGL</code>) using <code>PYCONO</code>.</li> <li>Chains to <code>APVEND</code> to retrieve vendor ACH details (e.g., <code>VNARTE</code>, <code>VNABK#</code>, <code>VNACOS</code>, <code>PYNAME</code>) using <code>PYVEND</code>.</li> </ul> </li> <li> <p>Write Batch Header (<code>L2DET</code> Subroutine):</p> </li> <li>On the first record for a new company (<code>L1, N84</code>), writes a Batch Header Record (Type 5) to <code>ACHFILE</code>.</li> <li>Includes fields like service class code (<code>200</code> for credits), company name, tax ID, and effective entry date (<code>CKYMD</code> from <code>PYCKDT</code>).</li> <li> <p>Initializes batch counters (<code>L2CNT</code>, <code>L2HASH</code>, <code>L2DR</code>, <code>L2CR</code>).</p> </li> <li> <p>Write Entry Detail (<code>EACH</code> Subroutine):</p> </li> <li> <p>For each <code>APPYCK</code> record:</p> <ul> <li>Determines the transaction code (<code>TRNCDE</code>): <code>'22'</code> for checking accounts (<code>VNACOS = 'C'</code>) or <code>'32'</code> for savings accounts.</li> <li>Sets the payment amount (<code>AMOUNT = PYCKAM</code>).</li> <li>Updates counters: increments <code>TRACE#</code>, <code>L2CNT</code>, <code>LRCNT</code>, <code>RECCNT</code>, and adds <code>VNARTE</code> to <code>L2HASH</code> and <code>LRHASH</code>, and <code>AMOUNT</code> to <code>L2CR</code> and <code>LRCR</code>.</li> <li>Writes an Entry Detail Record (Type 6) to <code>ACHFILE</code> with vendor bank routing code (<code>VNARTE</code>), account number (<code>VNABK#</code>), amount, vendor ID, and name.</li> </ul> </li> <li> <p>Write Batch Control (<code>L2TOT</code> Subroutine):</p> </li> <li>At the end of each company (<code>L2, 84</code>), writes a Batch Control Record (Type 8) to <code>ACHFILE</code>.</li> <li> <p>Includes batch entry count (<code>L2CNT</code>), hash total (<code>L2HASH</code>), credit total (<code>L2CR</code>), and batch number (<code>BATCH#</code>).</p> </li> <li> <p>Write File Control and Filler (<code>LRTOT</code> Subroutine):</p> </li> <li>At the end of processing (<code>LR, 10</code>), writes a File Control Record (Type 9) to <code>ACHFILE</code> with batch count (<code>LRBCNT</code>), block count (<code>LRBLOK</code>), entry count (<code>LRCNT</code>), hash total (<code>LRHASH</code>), and credit total (<code>LRCR</code>).</li> <li> <p>Calculates the number of blocks (<code>LRBLOK = RECCNT / 10</code>, rounded up) and fills remaining block space with filler records containing <code>'999999999999999999999999'</code>.</p> </li> <li> <p>Report Output:</p> </li> <li> <p>Outputs a report to <code>REPORT</code> (printer file) for logging or verification, though specific details are not defined in the code.</p> </li> <li> <p>Termination:</p> </li> <li>Completes after processing all <code>APPYCK</code> records and writing the necessary NACHA records.</li> </ol>"},{"location":"accounts-payable/03%20Payment%20Cycle/AP150%20OCL%20Payment%20Selection%20%26%20Rpt/AP156%20RPG/#business-rules_1","title":"Business Rules","text":"<ol> <li>ACH Payment Validation:</li> <li> <p>Only processes <code>APPYCK</code> records with <code>PYSTAT = 'A'</code> (ACH payments), as confirmed by the OCL script\u2019s LDA check.</p> </li> <li> <p>NACHA Record Structure:</p> </li> <li>Adheres to NACHA file format standards:<ul> <li>Type 1 (File Header): Includes fixed ABA numbers (<code>043000096</code>, <code>1222318612</code>), transmission date/time, and company names.</li> <li>Type 5 (Batch Header): Uses service class code <code>200</code> (credits only), company tax ID (<code>1222318612</code>), and effective entry date.</li> <li>Type 6 (Entry Detail): Uses transaction codes (<code>22</code> for checking, <code>32</code> for savings), vendor bank details, and payment amount.</li> <li>Type 8 (Batch Control): Summarizes batch entries and totals.</li> <li>Type 9 (File Control): Summarizes file-level counts and totals.</li> </ul> </li> <li> <p>Filler records pad blocks to multiples of 10.</p> </li> <li> <p>Vendor ACH Details:</p> </li> <li>Requires valid ACH data in <code>APVEND</code> (<code>VNARTE</code>, <code>VNABK#</code>, <code>VNACOS</code>).</li> <li> <p>Transaction code is set based on account type (<code>VNACOS = 'C'</code> for checking, otherwise savings).</p> </li> <li> <p>Counter and Hash Management:</p> </li> <li>Maintains accurate counts for batches (<code>L2CNT</code>), entries (<code>LRCNT</code>), blocks (<code>LRBLOK</code>), and hash totals (<code>L2HASH</code>, <code>LRHASH</code>) for NACHA compliance.</li> <li> <p>Credit totals (<code>L2CR</code>, <code>LRCR</code>) reflect payment amounts.</p> </li> <li> <p>Company and Vendor Validation:</p> </li> <li>Chains to <code>APCONT</code> to ensure valid company number (<code>PYCONO</code>).</li> <li>Chains to <code>APVEND</code> to ensure valid vendor number (<code>PYVEND</code>) and retrieve ACH-specific fields.</li> </ol>"},{"location":"accounts-payable/03%20Payment%20Cycle/AP150%20OCL%20Payment%20Selection%20%26%20Rpt/AP156%20RPG/#tables-files-used_1","title":"Tables (Files) Used","text":"<ol> <li>APPYCK (<code>IP</code>, Input Primary, 96 bytes):</li> <li>Check file containing ACH payment records.</li> <li> <p>Fields: <code>PYSTAT</code> (status), <code>PYCONO</code> (company), <code>PYBKGL</code> (bank G/L), <code>PYCHK#</code> (check number), <code>PYVEND</code> (vendor), <code>PYCKAM</code> (check amount), <code>PYCKDT</code> (check date), <code>PYNAME</code> (vendor name), <code>PYSEQ#</code> (sequence), <code>PYCNTR</code> (count).</p> </li> <li> <p>APCONT (<code>IC</code>, Input with Chain, 256 bytes):</p> </li> <li>A/P control file for company details.</li> <li> <p>Fields: <code>ACNAME</code> (company name), <code>ACCONO</code> (company number), <code>ACBKGL</code> (bank G/L), <code>ACPRE#</code> (pre-numbered checks flag).</p> </li> <li> <p>APVEND (<code>IC</code>, Input with Chain, 579 bytes):</p> </li> <li>Vendor file for ACH payment details.</li> <li> <p>Fields: <code>VNNAME</code> (vendor name), <code>VNARTE</code> (ACH bank routing code), <code>VNABK#</code> (ACH bank account number), <code>VNACOS</code> (checking/savings), <code>VNVEND</code> (vendor number).</p> </li> <li> <p>ACHFILE (<code>O</code>, Output, 94 bytes):</p> </li> <li>Output file for NACHA-formatted ACH payment data.</li> <li> <p>Record types: 1 (file header), 5 (batch header), 6 (entry detail), 8 (batch control), 9 (file control), filler.</p> </li> <li> <p>REPORT (<code>O</code>, Output, 132 bytes):</p> </li> <li>Printer file for logging or reporting (details not specified in code).</li> </ol>"},{"location":"accounts-payable/03%20Payment%20Cycle/AP150%20OCL%20Payment%20Selection%20%26%20Rpt/AP156%20RPG/#external-programs-called_1","title":"External Programs Called","text":"<ul> <li>The <code>AP156</code> RPG program does not call any external programs. It is a standalone program invoked by the <code>AP156.ocl36.txt</code> script, processing input files and producing output files internally.</li> </ul>"},{"location":"accounts-payable/03%20Payment%20Cycle/AP150%20OCL%20Payment%20Selection%20%26%20Rpt/AP156%20RPG/#summary","title":"Summary","text":"<p>The <code>AP156.ocl36.txt</code> OCL script conditionally invokes the <code>AP156</code> RPG program to create a NACHA file for ACH payments if <code>LDA position 400 = 'A'</code>. It clears the <code>ACHFIL</code> file and loads <code>AP156</code> with access to <code>APPYCK</code>, <code>APCONT</code>, <code>APVEND</code>, and <code>ACHFILE</code>. The <code>AP156</code> RPG program processes <code>APPYCK</code> records to generate a NACHA-compliant file with file header, batch header, entry detail, batch control, and file control records, adhering to strict formatting rules. It uses vendor ACH details from <code>APVEND</code> and company data from <code>APCONT</code>, maintaining counters and hash totals for compliance. The program interacts with five files and does not call external programs, completing the ACH payment file creation process for PNC Bank.</p>"},{"location":"accounts-payable/03%20Payment%20Cycle/AP160%20OCL%20Print%20Checks/AP160%20Print%20Checks%20Summary/","title":"AP160 Print Checks Summary","text":""},{"location":"accounts-payable/03%20Payment%20Cycle/AP160%20OCL%20Print%20Checks/AP160%20Print%20Checks%20Summary/#list-of-use-cases-implemented-by-the-ap160-program","title":"List of Use Cases Implemented by the AP160 Program","text":"<p>Based on the provided OCL (<code>AP160.ocl36.txt</code>) and RPG (<code>AP160.rpg36.txt</code>) programs, the primary use case implemented is:</p> <ol> <li>Print Accounts Payable Checks for Vendor Payments:</li> <li>This use case involves processing selected vendor payments, generating physical checks (and copies) with detailed invoice information, and handling special cases like void checks or non-printed payments (e.g., ACH, wire transfers). The program retrieves data from various files, validates payment types, calculates totals, formats check output, and sends it to designated printers.</li> </ol> <p>No additional distinct use cases are explicitly implemented in the provided code, as the program's focus is solely on check printing for Accounts Payable.</p>"},{"location":"accounts-payable/03%20Payment%20Cycle/AP160%20OCL%20Print%20Checks/AP160%20Print%20Checks%20Summary/#functional-requirements-document","title":"Functional Requirements Document","text":""},{"location":"accounts-payable/03%20Payment%20Cycle/AP160%20OCL%20Print%20Checks/AP160%20Print%20Checks%20Summary/#functional-requirements-accounts-payable-check-printing","title":"Functional Requirements: Accounts Payable Check Printing","text":""},{"location":"accounts-payable/03%20Payment%20Cycle/AP160%20OCL%20Print%20Checks/AP160%20Print%20Checks%20Summary/#overview","title":"Overview","text":"<p>The Accounts Payable (A/P) Check Printing function automates the generation and printing of checks for vendor payments, ensuring accurate payment processing, proper formatting, and compliance with business rules. It processes input data from payment, vendor, and control files to produce checks and copies, handling various payment types and exceptions.</p>"},{"location":"accounts-payable/03%20Payment%20Cycle/AP160%20OCL%20Print%20Checks/AP160%20Print%20Checks%20Summary/#inputs","title":"Inputs","text":"<ul> <li>Payment Data: Invoice details (vendor number, invoice number, gross amount, discount, payment amount, invoice date, sequence number).</li> <li>Vendor Data: Vendor name, address (up to four lines), and sort code.</li> <li>Control Data: Company name and code.</li> <li>Transaction Data: Check date.</li> <li>Check Data: Check number and payment type (e.g., normal, prepaid, ACH, wire transfer, void).</li> <li>Environment Parameter: Indicator for production (<code>G</code>) or test (<code>Z</code>) environment to determine output queues.</li> </ul>"},{"location":"accounts-payable/03%20Payment%20Cycle/AP160%20OCL%20Print%20Checks/AP160%20Print%20Checks%20Summary/#process-steps","title":"Process Steps","text":"<ol> <li>Retrieve Input Data: Collect payment, vendor, control, transaction, and check data from respective input sources.</li> <li>Validate Payment Type: Identify payment type to determine if a physical check is required:</li> <li>Skip printing for prepaid (<code>P</code>), ACH (<code>A</code>), wire transfer (<code>W</code>), employee expense (<code>E</code>), or credit/no pay (<code>C</code>) payments.</li> <li>Process normal payments or void checks (<code>F</code>, <code>V</code>) for printing.</li> <li>Calculate Check Totals: Aggregate gross amount, discount, and net payment amount for each vendor\u2019s invoices.</li> <li>Assign Check Number: Use a valid check number, incrementing for voided checks (<code>V</code>) to avoid duplicates.</li> <li>Format Check Output:</li> <li>Include company name (except for company code <code>01</code>), vendor name, address, check date, and check number.</li> <li>List invoice details (date, number, description, gross amount, discount, payment amount).</li> <li>Convert net payment amount to words (e.g., \"ONE HUNDRED DOLLARS AND 50/100\") for the check\u2019s written line.</li> <li>Mark void checks with \" VOID * VOID * VOID \".</li> <li>Print Checks and Copies:</li> <li>Send primary check to the production (<code>APCHECKS</code>) or test (<code>TESTOUTQ</code>) queue.</li> <li>Send check copy to the production (<code>APCHKCPY</code>) or test (<code>TESTOUTQ</code>) queue.</li> <li>Create Temporary File (if needed): Generate a temporary file for check processing data if specified.</li> <li>Reset Accumulators: Clear totals after each check to prepare for the next vendor.</li> </ol>"},{"location":"accounts-payable/03%20Payment%20Cycle/AP160%20OCL%20Print%20Checks/AP160%20Print%20Checks%20Summary/#business-rules","title":"Business Rules","text":"<ol> <li>Selective Printing: Print checks only for normal payments or void checks (<code>F</code>, <code>V</code>); skip prepaid, ACH, wire transfer, employee expense, or credit/no pay payments.</li> <li>Void Check Handling:</li> <li>Print \"VOID\" on checks marked <code>F</code> (reuse check number) or <code>V</code> (use next check number).</li> <li>Company Name Exclusion: Omit company name on checks for company code <code>01</code>.</li> <li>Amount Formatting: Convert amounts to words, removing excess spaces to fit 10 CPI check layout; handle amounts over $999,999.99 correctly.</li> <li>Vendor Data Fallback: Use vendor details from open payables if missing from vendor master; blank fields if unavailable.</li> <li>Check Number Integrity: Skip voided check numbers to ensure valid, sequential issuance.</li> <li>Output Separation: Print checks and copies to separate queues for record-keeping.</li> <li>Invoice Aggregation: Combine multiple invoices for a vendor into one check with summarized totals.</li> <li>Date Consistency: Use transaction file\u2019s check date for all checks in a batch.</li> <li>Printer Configuration: Apply 6 lines per inch, 12 characters per inch, and standard quality for check printing.</li> </ol>"},{"location":"accounts-payable/03%20Payment%20Cycle/AP160%20OCL%20Print%20Checks/AP160%20Print%20Checks%20Summary/#outputs","title":"Outputs","text":"<ul> <li>Primary Check: Formatted check with vendor details, invoice data, totals, and written amount, sent to the designated output queue.</li> <li>Check Copy: Duplicate of the check for record-keeping, sent to a separate output queue.</li> <li>Temporary File (optional): Temporary data file for processing, if required.</li> </ul>"},{"location":"accounts-payable/03%20Payment%20Cycle/AP160%20OCL%20Print%20Checks/AP160%20Print%20Checks%20Summary/#constraints","title":"Constraints","text":"<ul> <li>Must handle large payment amounts without formatting errors.</li> <li>Must align with standard check printing formats (10 CPI).</li> <li>Must support production and test environments via output queue configuration.</li> </ul>"},{"location":"accounts-payable/03%20Payment%20Cycle/AP160%20OCL%20Print%20Checks/AP160OCL/","title":"AP160OCL","text":"<p>The provided document is an OCL (Operation Control Language) program, <code>AP160.ocl36.txt</code>, used on IBM midrange systems like the AS/400 (now IBM i) to manage Accounts Payable (A/P) check printing. Below, I\u2019ll explain the process steps of the program, list any external programs called, and identify tables or files created, destroyed, or read from.</p>"},{"location":"accounts-payable/03%20Payment%20Cycle/AP160%20OCL%20Print%20Checks/AP160OCL/#process-steps-of-the-ap160-ocl-program","title":"Process Steps of the AP160 OCL Program","text":"<p>The OCL program automates the printing of A/P checks, interacting with various files and printer configurations. Here\u2019s a step-by-step breakdown of the process:</p> <ol> <li>Initialization and Conditional Execution Check:</li> <li>The program checks if the parameter <code>?2?</code> is set to <code>AUTO</code>. If true, it jumps to the <code>AP160</code> tag, indicating it was called automatically by another procedure (likely <code>AP200</code>).</li> <li> <p>If not running in <code>AUTO</code> mode, the program proceeds with manual execution.</p> </li> <li> <p>User Interaction (Pause for Confirmation):</p> </li> <li>A commented-out <code>PAUSE</code> statement (not currently active) would prompt the user to either cancel the process (by pressing ATTN, 2, ENTER) or continue (by pressing 0, ENTER).</li> <li> <p>The <code>ATTR INQUIRY-YES,CANCEL-NO</code> suggests an inquiry screen for user confirmation, but it\u2019s not explicitly active in the provided code.</p> </li> <li> <p>Program Load and File Definitions (TAG AP160):</p> </li> <li>The program reaches the <code>AP160</code> tag and loads the <code>AP160</code> program (likely an RPG or CL program responsible for the core logic).</li> <li>It defines several files with specific labels and attributes:<ul> <li><code>APPAY</code> (labeled <code>?9?APPY?WS?</code>): Likely the payment file.</li> <li><code>AP160S</code> (labeled <code>?9?APPS?WS?</code>): Possibly a selection or summary file.</li> <li><code>APCONT</code> (labeled <code>?9?APCONT</code>, <code>DISP-SHR</code>): A control file, shared access.</li> <li><code>APPYTR</code> (labeled <code>?9?APPT?WS?</code>): A transaction file.</li> <li><code>APVEND</code> (labeled <code>?9?APVEND</code>, <code>DISP-SHR</code>): Vendor master file, shared access.</li> <li><code>APOPEN</code> (labeled <code>?9?APOPEN</code>, <code>DISP-SHR</code>): Open payables file, shared access.</li> <li><code>APPYCK</code> (labeled <code>?9?APPC?WS?</code>): Check file.</li> </ul> </li> <li> <p>The <code>?9?</code> and <code>?WS?</code> are placeholders for environment-specific prefixes or suffixes (e.g., library or workspace identifiers).</p> </li> <li> <p>Printer File Overrides:</p> </li> <li>The program configures printer output for two files: <code>APCHECK</code> (main check output) and <code>CHECKCPY</code> (check copy output).</li> <li>Conditional overrides are applied based on the value of <code>?9?</code>:<ul> <li>If <code>?9?</code> is <code>G</code> (likely production environment):</li> <li><code>APCHECK</code> is directed to the <code>QUSRSYS/APCHECKS</code> output queue.</li> <li><code>CHECKCPY</code> is directed to the <code>QUSRSYS/APCHKCPY</code> output queue.</li> <li>Both use device type <code>*SCS</code>, 6 lines per inch (LPI), 12 characters per inch (CPI), standard print quality, form type <code>APCK</code>, and are saved after printing.</li> <li>If <code>?9?</code> is <code>Z</code> (likely test environment):</li> <li>Both <code>APCHECK</code> and <code>CHECKCPY</code> are directed to the <code>QUSRSYS/TESTOUTQ</code> output queue with the same settings.</li> </ul> </li> <li> <p>These overrides ensure checks are printed to the correct printer based on the environment.</p> </li> <li> <p>Program Execution:</p> </li> <li>The <code>RUN</code> command executes the <code>AP160</code> program, which processes the defined files and generates check output.</li> <li> <p>The RPG program (AP160) likely reads from the vendor, open payables, and payment files, performs calculations (e.g., payment amounts), and writes check data to the <code>APPYCK</code> file and printer files.</p> </li> <li> <p>Temporary File Creation (Conditional):</p> </li> <li>If a file named <code>?9?APPO?WS?</code> exists in the <code>DATAF1</code> parameter, the program builds a temporary file with the same name using the <code>BLDFILE</code> command.</li> <li>The file is created with:<ul> <li><code>S</code> (sequential organization).</li> <li><code>RECORDS</code> (populated with records).</li> <li>Parameters <code>1,10</code> (possibly record length or block size).</li> </ul> </li> <li> <p>This temporary file is likely used to store intermediate check printing data, as indicated by the comment <code>--TEMPORARY FILE TO ALLOW CHECK P</code>.</p> </li> <li> <p>Completion:</p> </li> <li>After the <code>AP160</code> program completes, the OCL script ends. Any printed checks are sent to the configured output queues, and temporary files (if created) may persist until explicitly cleared.</li> </ol>"},{"location":"accounts-payable/03%20Payment%20Cycle/AP160%20OCL%20Print%20Checks/AP160OCL/#list-of-external-programs-called","title":"List of External Programs Called","text":"<ul> <li>AP160: The main program loaded and executed by the OCL script. It\u2019s likely an RPG or CL program that handles the core logic for printing A/P checks.</li> <li>AP200 (implied): The comment suggests <code>AP200</code> may call <code>AP160</code> in <code>AUTO</code> mode, but it\u2019s not directly called within this script.</li> </ul> <p>No other external programs are explicitly called in the provided OCL code.</p>"},{"location":"accounts-payable/03%20Payment%20Cycle/AP160%20OCL%20Print%20Checks/AP160OCL/#tables-or-files-created-destroyed-or-read-from","title":"Tables or Files Created, Destroyed, or Read From","text":"<p>The OCL program interacts with several files, either by reading, writing, or creating them. Below is a categorized list based on the code and typical A/P check printing processes:</p>"},{"location":"accounts-payable/03%20Payment%20Cycle/AP160%20OCL%20Print%20Checks/AP160OCL/#files-read-from","title":"Files Read From:","text":"<ul> <li>APCONT (<code>?9?APCONT</code>, <code>DISP-SHR</code>): Control file, likely containing configuration or control data for A/P processing (e.g., bank account details).</li> <li>APVEND (<code>?9?APVEND</code>, <code>DISP-SHR</code>): Vendor master file, containing vendor details (e.g., name, address, payment terms).</li> <li>APOPEN (<code>?9?APOPEN</code>, <code>DISP-SHR</code>): Open payables file, listing outstanding invoices to be paid.</li> </ul>"},{"location":"accounts-payable/03%20Payment%20Cycle/AP160%20OCL%20Print%20Checks/AP160OCL/#files-read-from-or-written-to","title":"Files Read From or Written To:","text":"<ul> <li>APPAY (<code>?9?APPY?WS?</code>): Payment file, likely containing selected payments to be processed into checks.</li> <li>AP160S (<code>?9?APPS?WS?</code>): Selection or summary file, possibly used to store temporary data during processing.</li> <li>APPYTR (<code>?9?APPT?WS?</code>): Transaction file, likely used to log payment transactions.</li> <li>APPYCK (<code>?9?APPC?WS?</code>): Check file, where check details (e.g., check number, amounts) are written.</li> </ul>"},{"location":"accounts-payable/03%20Payment%20Cycle/AP160%20OCL%20Print%20Checks/AP160OCL/#files-created","title":"Files Created:","text":"<ul> <li><code>?9?APPO?WS?</code> (conditional): A temporary file is created if <code>BLDFILE</code> is triggered for <code>?9?APPO?WS?</code>. This file is used for check processing and is marked as temporary.</li> </ul>"},{"location":"accounts-payable/03%20Payment%20Cycle/AP160%20OCL%20Print%20Checks/AP160OCL/#files-destroyed","title":"Files Destroyed:","text":"<ul> <li>No files are destroyed in the provided code. Temporary files like <code>?9?APPO?WS?</code> may be cleared by other processes outside this script, but this isn\u2019t explicitly shown.</li> </ul>"},{"location":"accounts-payable/03%20Payment%20Cycle/AP160%20OCL%20Print%20Checks/AP160OCL/#printer-output-files","title":"Printer Output Files:","text":"<ul> <li>APCHECK: Printer file for main checks, directed to an output queue (<code>APCHECKS</code> or <code>TESTOUTQ</code>).</li> <li>CHECKCPY: Printer file for check copies, directed to an output queue (<code>APCHKCPY</code> or <code>TESTOUTQ</code>).</li> </ul>"},{"location":"accounts-payable/03%20Payment%20Cycle/AP160%20OCL%20Print%20Checks/AP160OCL/#notes-and-assumptions","title":"Notes and Assumptions","text":"<ul> <li>Placeholders: The <code>?9?</code> and <code>?WS?</code> are variables resolved at runtime, representing library names, typically representing names, company codes, or workspace identifiers. Without specific values, I\u2019ve described their general purpose.</li> <li>Commented Code: The commented-out code (e.g., <code>PAUSE</code>, initial display) suggests optional user interaction, which may be enabled in certain conditions or older versions.</li> <li>RPG Logic: The actual check printing logic (e.g., calculations, formatting) is in <code>AP160</code>, which isn\u2019t provided. My analysis focuses on the OCL orchestration.</li> <li>Temporary File Scope: The <code>BLDFILE</code> creates a temporary file, but its lifecycle (e.g., deletion) isn\u2019t shown here. It\u2019s likely cleared by a cleanup job.</li> </ul> <p>If you have the <code>AP160</code> RPG source or additional context (e.g., file schemas, specific <code>?9?</code> values), I can provide deeper insights into the data flow or logic. Let me know if you\u2019d like me to analyze related content or search for more information!</p>"},{"location":"accounts-payable/03%20Payment%20Cycle/AP160%20OCL%20Print%20Checks/AP160RPG/","title":"AP160RPG","text":"<p>The RPG program <code>AP160.rpg36.txt</code> is designed to handle the business process of printing Accounts Payable (A/P) checks for vendor payments in an IBM midrange environment (e.g., AS/400 or IBM i). Below, I\u2019ll explain the process steps and business rules from a business perspective, focusing on the purpose, functionality, and rules governing the check printing process, rather than the technical RPG details.</p>"},{"location":"accounts-payable/03%20Payment%20Cycle/AP160%20OCL%20Print%20Checks/AP160RPG/#process-steps-of-the-ap160-program","title":"Process Steps of the AP160 Program","text":"<p>The <code>AP160</code> program orchestrates the generation and printing of A/P checks, ensuring payments to vendors are accurately processed, formatted, and recorded. Here\u2019s a step-by-step breakdown of the process from a business viewpoint:</p> <ol> <li>Retrieve Payment and Vendor Information:</li> <li>The program starts by accessing payment data from the payment file (<code>APPAY</code>), which contains details about invoices selected for payment, such as vendor numbers, invoice numbers, gross amounts, discounts, and payment amounts.</li> <li> <p>It cross-references this with:</p> <ul> <li>The vendor master file (<code>APVEND</code>) for vendor details like name and address.</li> <li>The open payables file (<code>APOPEN</code>) for additional invoice-related data.</li> <li>The control file (<code>APCONT</code>) for company-specific information, such as the company name for check printing.</li> <li>The transaction file (<code>APPYTR</code>) for check-related data, like the check date.</li> <li>The check file (<code>APPYCK</code>) for check numbers and statuses.</li> </ul> </li> <li> <p>Validate Payment Type and Check Eligibility:</p> </li> <li>For each payment record, the program checks the payment type (stored in the <code>AXRECD</code> field of <code>APPYCK</code>):<ul> <li>Prepaid (<code>P</code>), ACH (<code>A</code>), Wire Transfer (<code>W</code>), Employee Expense (<code>E</code>), Credit/No Pay (<code>C</code>): These payments are not printed as physical checks. They are either already paid (e.g., prepaid checks) or processed via electronic methods (e.g., ACH, wire transfer), so the program skips printing.</li> <li>Full Stub/Void Check (<code>F</code>, <code>V</code>): These indicate voided checks, which are printed with a \"VOID\" label. For <code>F</code>, the same check number is reused for the next stub; for <code>V</code>, the next check number is used.</li> <li>Normal Payments: Payments not flagged as <code>P</code>, <code>A</code>, <code>W</code>, <code>E</code>, <code>C</code>, <code>F</code>, or <code>V</code> are processed for check printing.</li> </ul> </li> <li> <p>This step ensures only valid, non-electronic payments result in printed checks, aligning with payment method policies.</p> </li> <li> <p>Calculate Check Totals:</p> </li> <li>For each invoice, the program aggregates:<ul> <li>Gross Amount: The total invoice amount before discounts.</li> <li>Discount Amount: Any applicable vendor discounts (e.g., early payment discounts).</li> <li>Net Payment Amount: The actual amount to be paid (gross minus discount).</li> </ul> </li> <li> <p>These amounts are accumulated to calculate the total check amount (<code>CKAMT</code>), ensuring the check reflects all invoices paid to a vendor in a single transaction.</p> </li> <li> <p>Assign and Validate Check Numbers:</p> </li> <li>The program retrieves a check number from the check file (<code>APPYCK</code>) using a sequence number (<code>SEQ#</code>).</li> <li> <p>If the check number is marked as void (<code>V</code>), the program increments the sequence number to assign a new check number, ensuring only valid check numbers are used for printing.</p> </li> <li> <p>Format Check Information:</p> </li> <li>The program prepares the check for printing by pulling together:<ul> <li>Company Information: The company name from <code>APCONT</code> is printed at the top of the check (except for company code <code>01</code>, which skips this per a business rule).</li> <li>Vendor Information: Vendor name and address (up to four address lines) from <code>APVEND</code> or <code>APOPEN</code> are formatted for the check payee section.</li> <li>Payment Details: Invoice number, invoice date, description, gross amount, discount, and payment amount are included for each invoice.</li> <li>Check Date: Retrieved from <code>APPYTR</code> and formatted for the check.</li> <li>Check Amount: The total payment amount is printed in both numeric and written form (e.g., \"ONE HUNDRED TWENTY-THREE THOUSAND FOUR HUNDRED FIFTY-SIX AND 78/100 DOLLARS\").</li> </ul> </li> <li> <p>For amounts exceeding $999,999.99, special handling ensures proper formatting, and for zero or invalid amounts, the program adjusts to avoid errors.</p> </li> <li> <p>Convert Numeric Amount to Words:</p> </li> <li>The program converts the check amount\u2019s dollar portion into words for the check\u2019s written amount line (e.g., 123456.78 becomes \"ONE HUNDRED TWENTY-THREE THOUSAND FOUR HUNDRED FIFTY-SIX\").</li> <li>The cents are appended as a fraction (e.g., \"78/100\"), and the word \"DOLLARS\" is added.</li> <li> <p>The conversion eliminates excess spaces to fit within a standard check\u2019s 10 CPI (characters per inch) layout, ensuring readability and compliance with check printing standards.</p> </li> <li> <p>Print Checks and Copies:</p> </li> <li>The program generates output for two printer files:<ul> <li>APCHECK: The primary check output, sent to the designated output queue (e.g., <code>APCHECKS</code> for production or <code>TESTOUTQ</code> for testing, as set in the OCL).</li> <li>CHECKCPY: A copy of the check, sent to a separate output queue (e.g., <code>APCHKCPY</code> or <code>TESTOUTQ</code>).</li> </ul> </li> <li>Each check includes:<ul> <li>Header: Company name (if applicable), vendor name, check date, and check number.</li> <li>Detail Lines: Invoice details (date, number, description, gross amount, discount, payment amount).</li> <li>Totals: Summarized gross amount, discount, and net payment amount.</li> <li>Written Amount: The check amount in words, with an asterisk (*) at the end for security.</li> </ul> </li> <li>Void checks are marked with \" VOID * VOID * VOID \" across the check to prevent misuse.</li> <li> <p>The program ensures proper alignment and formatting for both the check and its copy, adhering to printer settings (6 LPI, 12 CPI, standard quality).</p> </li> <li> <p>Handle Void Checks:</p> </li> <li> <p>For voided checks (<code>F</code> or <code>V</code>), the program prints the check with a \"VOID\" label and may either reuse the check number (<code>F</code>) or assign a new one (<code>V</code>), depending on the business need to track voided transactions.</p> </li> <li> <p>Clear Accumulators:</p> </li> <li> <p>After printing a check, the program resets the accumulated gross amount, discount, and payment totals to zero, preparing for the next vendor\u2019s check.</p> </li> <li> <p>Completion:</p> <ul> <li>The program continues processing until all selected payments are handled, generating checks and copies as needed. The output is sent to the configured printers, and the process ends.</li> </ul> </li> </ol>"},{"location":"accounts-payable/03%20Payment%20Cycle/AP160%20OCL%20Print%20Checks/AP160RPG/#business-rules","title":"Business Rules","text":"<p>The program enforces several business rules to ensure accurate, compliant, and efficient check printing:</p> <ol> <li>Selective Check Printing:</li> <li> <p>Checks are only printed for payments not flagged as prepaid (<code>P</code>), ACH (<code>A</code>), wire transfer (<code>W</code>), employee expense (<code>E</code>), or credit/no pay (<code>C</code>). This ensures physical checks are issued only for standard payment methods, while electronic or prepaid payments are processed separately.</p> </li> <li> <p>Void Check Handling:</p> </li> <li>Void checks (<code>F</code> or <code>V</code>) are printed with clear \"VOID\" markings to prevent fraudulent use.</li> <li>For <code>F</code> (full stub, same check number), the check number is reused for the next stub, useful for multi-part check forms.</li> <li> <p>For <code>V</code> (void, next check number), a new check number is assigned, ensuring accurate tracking of voided checks.</p> </li> <li> <p>Company Name Exclusion:</p> </li> <li> <p>The company name is printed at the top of checks unless the company code is <code>01</code> (e.g., A.R.G.), likely due to specific branding or legal requirements for that company.</p> </li> <li> <p>Amount Formatting:</p> </li> <li>The check amount is printed in both numeric and written forms, with the written form adhering to a compact format to fit standard check layouts (10 CPI).</li> <li>Amounts exceeding $999,999.99 are handled to prevent formatting errors, ensuring reliability for large payments.</li> <li> <p>Zero or invalid amounts are processed to avoid printing blank or incorrect checks.</p> </li> <li> <p>Vendor Information Validation:</p> </li> <li> <p>If vendor details (e.g., name, address) are missing from the vendor file (<code>APVEND</code>), the program falls back to the open payables file (<code>APOPEN</code>) or blanks the fields, ensuring checks are still printed without errors.</p> </li> <li> <p>Check Number Management:</p> </li> <li> <p>The program ensures valid check numbers by skipping voided ones (<code>V</code>), preventing duplicate or invalid check numbers in the payment process.</p> </li> <li> <p>Invoice Detail Inclusion:</p> </li> <li> <p>Each check includes detailed invoice information (date, number, description, amounts) to provide transparency to vendors and support accounting reconciliation.</p> </li> <li> <p>Printer Output Separation:</p> </li> <li> <p>Checks and their copies are sent to separate output queues, allowing businesses to maintain distinct records for primary checks and copies for auditing or filing purposes.</p> </li> <li> <p>Payment Aggregation:</p> </li> <li> <p>Multiple invoices for a single vendor are aggregated into one check, with totals for gross amount, discount, and net payment, streamlining payment processing and reducing check issuance costs.</p> </li> <li> <p>Date and Check Number Consistency:</p> <ul> <li>The check date is sourced from the transaction file (<code>APPYTR</code>), ensuring consistency with the payment batch.</li> <li>Check numbers are tracked via the check file (<code>APPYCK</code>), maintaining sequential and accurate check issuance.</li> </ul> </li> </ol>"},{"location":"accounts-payable/03%20Payment%20Cycle/AP160%20OCL%20Print%20Checks/AP160RPG/#summary","title":"Summary","text":"<p>From a business perspective, the <code>AP160</code> program automates the critical process of printing A/P checks, ensuring payments to vendors are accurately calculated, formatted, and printed according to strict business rules. It handles vendor payments by aggregating invoices, validating payment types, assigning check numbers, and producing both primary checks and copies for record-keeping. The program supports various payment scenarios (e.g., void checks, electronic payments) and enforces rules like excluding certain company names or formatting amounts for compliance. By integrating data from multiple files (payment, vendor, open payables, etc.), it ensures accuracy and transparency, making it a vital component of the A/P workflow.</p> <p>If you need further clarification, additional analysis (e.g., specific file layouts), or related information, let me know!</p>"},{"location":"accounts-payable/03%20Payment%20Cycle/AP250%20OCL%20Check%20Register/AP250%20Summary%20Check%20Register/","title":"AP250 Summary Check Register","text":"<p>The <code>AP250.OCL36</code> procedure orchestrates a series of RPG programs (<code>AP251.RPG36</code>, <code>AP255.RPG36</code>, <code>AP256A.RPG</code>, and <code>AP256.RPG36</code>) to process Accounts Payable (A/P) payments, update commission records, generate a cash disbursements journal, and produce vendor payment detail reports for ACH vendors. Below, I identify the use cases implemented by this call stack and provide a Function Requirement Document for the primary use case, structured as a large function that processes inputs to complete the A/P payment notification and reporting process.</p>"},{"location":"accounts-payable/03%20Payment%20Cycle/AP250%20OCL%20Check%20Register/AP250%20Summary%20Check%20Register/#use-cases-implemented-by-ap250-ocl-call-stack","title":"Use Cases Implemented by AP250 OCL Call Stack","text":"<p>The <code>AP250.OCL36</code> call stack implements a single cohesive use case:</p> <ol> <li>Process Accounts Payable Payments and Generate ACH Vendor Payment Notifications with Journal Reporting:</li> <li>Description: This use case processes A/P payment records to update commission records, generate a summarized cash disbursements journal for general ledger integration, and produce detailed payment reports for ACH vendors, which are emailed via spoolflex. It involves preprocessing to count email addresses, updating commission tables, summarizing transactions, and generating vendor-specific reports with tailored messaging for crude and normal vendors.</li> <li>Components:<ul> <li><code>AP251.RPG36</code>: Updates the commission table (<code>APTORCY</code>) with payment details from the payment file (<code>APPAY</code>).</li> <li><code>AP255.RPG36</code>: Generates a cash disbursements journal report and updates a general ledger file (<code>TEMGEN</code>) with summarized A/P transactions.</li> <li><code>AP256A.RPG</code>: Preprocesses payment records to count valid ACH email addresses per vendor and populates the <code>APDTWSC</code> file.</li> <li><code>AP256.RPG36</code>: Generates up to four payment detail reports per ACH vendor, formatted for spoolflex emailing, with distinct messaging for crude and normal vendors.</li> </ul> </li> </ol> <p>This single use case encapsulates the entire A/P payment processing and reporting workflow, integrating multiple steps to ensure accurate financial updates and vendor notifications.</p>"},{"location":"accounts-payable/03%20Payment%20Cycle/AP250%20OCL%20Check%20Register/AP250%20Summary%20Check%20Register/#function-requirement-document","title":"Function Requirement Document","text":""},{"location":"accounts-payable/03%20Payment%20Cycle/AP250%20OCL%20Check%20Register/AP250%20Summary%20Check%20Register/#function-requirement-document-process-accounts-payable-payments-and-generate-ach-vendor-notifications","title":"Function Requirement Document: Process Accounts Payable Payments and Generate ACH Vendor Notifications","text":""},{"location":"accounts-payable/03%20Payment%20Cycle/AP250%20OCL%20Check%20Register/AP250%20Summary%20Check%20Register/#function-name","title":"Function Name","text":"<p><code>ProcessAPPaymentsAndNotifications</code></p>"},{"location":"accounts-payable/03%20Payment%20Cycle/AP250%20OCL%20Check%20Register/AP250%20Summary%20Check%20Register/#purpose","title":"Purpose","text":"<p>To process Accounts Payable (A/P) payment records, update commission records, generate a summarized cash disbursements journal for general ledger integration, and produce detailed payment reports for ACH vendors, emailed to up to four addresses per vendor with tailored messaging for crude and normal vendors.</p>"},{"location":"accounts-payable/03%20Payment%20Cycle/AP250%20OCL%20Check%20Register/AP250%20Summary%20Check%20Register/#inputs","title":"Inputs","text":"<ul> <li>Payment Records (<code>APPAY</code> equivalent):</li> <li>Company number (<code>CONO</code>, 2 chars)</li> <li>Vendor number (<code>VEND</code>, 5 chars)</li> <li>Invoice description (<code>OPIN20</code>, 20 chars)</li> <li>Gross amount (<code>OPGRAM</code>, packed, 6 digits)</li> <li>Check number (<code>OPCKNO</code>, 6 chars)</li> <li>Check date (<code>AXCKDT</code>, 6 chars, MMDDYY)</li> <li>ACH Payment Records (<code>APDTWS</code> equivalent):</li> <li>Company number (<code>ADCO</code>, 2 chars)</li> <li>Vendor number (<code>ADVEND</code>, 5 chars)</li> <li>Company/vendor key (<code>ADCOVN</code>, 7 chars)</li> <li>Invoice number (<code>ADINVN</code>, 20 chars)</li> <li>Invoice amount (<code>ADINV$</code>, packed, 6 digits)</li> <li>Discount (<code>ADDISC</code>, packed, 5 digits)</li> <li>Payment amount (<code>ADLPAM</code>, packed, 6 digits)</li> <li>Check date (<code>ADDATE</code>, 6 chars, MMDDYY)</li> <li>Check number (<code>ADVCH#</code>, 5 chars)</li> <li>Vendor Master (<code>APVEND</code> equivalent):</li> <li>Company number (<code>VNCO</code>, 2 chars)</li> <li>Vendor number (<code>VNVEND</code>, 5 chars)</li> <li>Vendor name (<code>VNNAME</code>, 30 chars)</li> <li>Address lines (<code>VNADD1</code>\u2013<code>VNADD4</code>, 30 chars each)</li> <li>Vendor category (<code>VNCATG</code>, 6 chars, e.g., <code>CRDACT</code> for crude)</li> <li>Vendor Email/Fax Details (<code>APVNFMX</code> equivalent):</li> <li>Company number (<code>AMCONO</code>, 2 chars)</li> <li>Vendor number (<code>AMCVEN</code>, 5 chars)</li> <li>Company/vendor key (<code>AMCOVN</code>, 7 chars)</li> <li>Form type (<code>AMFMTY</code>, 4 chars, must be <code>ACHE</code>)</li> <li>Email address (<code>AMEMLA</code>, 60 chars)</li> <li>Send original flag (<code>AMFMYN</code>, 1 char, <code>Y</code> for valid)</li> <li>Delete code (<code>AMDEL</code>, 1 char, <code>D</code> for deleted)</li> <li>Company Master (<code>APCONT</code> equivalent):</li> <li>Company number (<code>ACCONO</code>, 2 chars)</li> <li>Company name (<code>ACNAME</code>, 30 chars)</li> <li>Cash Disbursements Journal Records (<code>APCDJR</code> equivalent):</li> <li>Company number (<code>CDCONO</code>, 2 chars)</li> <li>Journal number (<code>CDJRNL</code>, 4 chars)</li> <li>Credit/debit code (<code>CDCORD</code>, 1 char, <code>C</code> or <code>D</code>)</li> <li>G/L number (<code>CDGLNO</code>, 8 chars)</li> <li>Check number (<code>CDCHEK</code>, 6 chars)</li> <li>Description (<code>CDDESC</code>, 24 chars)</li> <li>Check date (<code>CDCKDT</code>, 6 chars, MMDDYY)</li> <li>Amount (<code>CDAMT</code>, packed, 6 digits)</li> <li>Vendor name (<code>CDNAME</code>, 30 chars)</li> <li>Sequence number (<code>CDSEQ#</code>, 9 chars)</li> <li>Transaction type (<code>CDTYPE</code>, 10 chars, e.g., <code>AP</code>)</li> <li>Year/period (<code>CDYYPD</code>, 4 chars)</li> </ul>"},{"location":"accounts-payable/03%20Payment%20Cycle/AP250%20OCL%20Check%20Register/AP250%20Summary%20Check%20Register/#outputs","title":"Outputs","text":"<ul> <li>Updated Commission Table (<code>APTORCY</code> equivalent):</li> <li>Invoice number (<code>ATINV</code>, 20 chars)</li> <li>Payment amount (<code>ATAPMT</code>, packed, 5 digits)</li> <li>Payment status (<code>ATSTAT</code>, 1 char, set to <code>P</code>)</li> <li>Check number (<code>ATCHK#</code>, 6 chars)</li> <li>General Ledger File (<code>TEMGEN</code> equivalent):</li> <li>Company number (<code>CDCONO</code>, 2 chars)</li> <li>G/L number (<code>CDGLNO</code>, 8 chars)</li> <li>Journal number (<code>CDJRNL</code>, 4 chars)</li> <li>Journal reference number (<code>JRREF#</code>, 4 digits)</li> <li>Credit/debit code (<code>CORD</code>, 1 char)</li> <li>Check number (<code>CDCHEK</code>, 6 chars) or check date (<code>CDCKDT</code>, 6 chars, summarized)</li> <li>Description (<code>CDDESC</code>, 24 chars, or <code>-SUMMARIZED A/P</code>)</li> <li>Amount (<code>JRAMT</code>, packed, 11 digits)</li> <li>Vendor name (<code>CDNAME</code>, 30 chars)</li> <li>Formatted check date (<code>CYMD</code>, 8 chars, YYYYMMDD)</li> <li>Cash Disbursements Journal Report (<code>APPRINT</code> equivalent):</li> <li>Printed report with company name, journal totals (debit/credit), and detailed/summarized A/P entries.</li> <li>ACH Vendor Payment Reports (<code>REPORT1</code>\u2013<code>REPORT4</code> equivalent):</li> <li>Up to four reports per vendor, each emailed to a unique address, containing:<ul> <li>Vendor name and address</li> <li>Payment details (invoice number, invoice amount, discount, payment amount)</li> <li>Totals per vendor</li> <li>Tailored messages (crude vs. normal vendors)</li> </ul> </li> <li>ACH Vendor Control File (<code>APDTWSC</code> equivalent):</li> <li>Company/vendor key (<code>ADCOVN</code>, 7 chars)</li> <li>Email address count (<code>ACECNT</code>, packed, 2 digits)</li> </ul>"},{"location":"accounts-payable/03%20Payment%20Cycle/AP250%20OCL%20Check%20Register/AP250%20Summary%20Check%20Register/#process-steps","title":"Process Steps","text":"<ol> <li>Count ACH Email Addresses:</li> <li>Read ACH payment records and vendor email details.</li> <li>Count valid email addresses (<code>AMFMYN = 'Y'</code>, <code>AMDEL \u2260 'D'</code>, <code>AMFMTY = 'ACHE'</code>) per vendor.</li> <li> <p>Write/update <code>APDTWSC</code> with company/vendor key and email count (<code>ACECNT</code>).</p> </li> <li> <p>Update Commission Table:</p> </li> <li>Read payment records.</li> <li>Match records to commission table using company number, vendor number, and invoice description.</li> <li> <p>Update matching records with invoice number, gross amount, payment status (<code>P</code>), and check number.</p> </li> <li> <p>Generate Cash Disbursements Journal:</p> </li> <li>Read journal records, identifying A/P transactions (<code>CDTYPE = 'AP      '</code>) and debit entries (<code>CDCORD = 'D'</code>).</li> <li>Accumulate amounts per vendor; switch negative amounts to positive with adjusted credit/debit code.</li> <li>Write detailed and summarized entries to general ledger file.</li> <li> <p>Produce a printed report with company name, journal number, debit/credit totals, and period/year (if applicable).</p> </li> <li> <p>Generate ACH Vendor Payment Reports:</p> </li> <li>Read ACH payment records and vendor master data.</li> <li>Retrieve email count from <code>APDTWSC</code> and up to four email addresses from <code>APVNFMX</code>.</li> <li>Calculate payment amount as invoice amount minus discount.</li> <li>Generate up to four reports per vendor, each including:<ul> <li>Vendor name, address, and check date.</li> <li>Invoice details (number, amount, discount, payment).</li> <li>Vendor-level totals.</li> <li>Messages: normal vendors use standard messages; crude vendors (<code>VNCATG = 'CRDACT'</code>) use specific messages referencing <code>crudestatements@amref.com</code>.</li> </ul> </li> <li>Output reports to spoolflex queues for emailing.</li> </ol>"},{"location":"accounts-payable/03%20Payment%20Cycle/AP250%20OCL%20Check%20Register/AP250%20Summary%20Check%20Register/#business-rules","title":"Business Rules","text":"<ol> <li>Commission Updates:</li> <li>Update commission records only for matching company, vendor, and invoice description.</li> <li> <p>Set payment status to <code>P</code> and record gross amount and check number.</p> </li> <li> <p>Journal Processing:</p> </li> <li>Process only A/P transactions (<code>CDTYPE = 'AP      '</code>) for summarization.</li> <li>Convert check dates to YYYYMMDD format with Y2K compliance (century <code>19</code> or <code>20</code> based on year \u2265 80).</li> <li> <p>Summarize amounts at the vendor level; switch negative amounts to positive with appropriate credit/debit code.</p> </li> <li> <p>ACH Vendor Notifications:</p> </li> <li>Generate 1\u20134 reports per vendor based on email count (<code>ACECNT</code> from <code>APDTWSC</code>).</li> <li>Include only valid email addresses (<code>AMFMYN = 'Y'</code>, <code>AMDEL \u2260 'D'</code>, <code>AMFMTY = 'ACHE'</code>).</li> <li>Use crude-specific messages for vendors with <code>VNCATG = 'CRDACT'</code>; otherwise, use standard messages.</li> <li>Payment amount = invoice amount - discount.</li> <li> <p>Paginate reports if exceeding 62 lines.</p> </li> <li> <p>Error Handling:</p> </li> <li>Skip non-matching or invalid records without logging errors.</li> <li>Handle missing records (vendor, company, email) gracefully, proceeding with available data.</li> </ol>"},{"location":"accounts-payable/03%20Payment%20Cycle/AP250%20OCL%20Check%20Register/AP250%20Summary%20Check%20Register/#calculations","title":"Calculations","text":"<ul> <li>Payment Amount: <code>ADPYM$ = ADINV$ - ADDISC</code> (ACH payment reports).</li> <li>Journal Amount: Accumulate <code>CDAMT</code> per vendor; if negative, switch sign and adjust credit/debit code (<code>CORD</code>).</li> <li>Email Count: Count <code>APVNFMX</code> records where <code>ADCOVN = AMCOVN</code>, <code>AMFMTY = 'ACHE'</code>, <code>AMDEL \u2260 'D'</code>, <code>AMFMYN = 'Y'</code>, up to 4.</li> <li>Date Formatting: Convert MMDDYY to YYYYMMDD (prefix <code>19</code> or <code>20</code> based on year comparison with <code>80</code>).</li> </ul>"},{"location":"accounts-payable/03%20Payment%20Cycle/AP250%20OCL%20Check%20Register/AP250%20Summary%20Check%20Register/#assumptions","title":"Assumptions","text":"<ul> <li>Input files are pre-sorted by company and vendor.</li> <li><code>APDTWSC</code> is populated by preprocessing step (<code>AP256A</code>).</li> <li>Spoolflex system handles email delivery from output queues (<code>QUSRSYS/APACHOUTQ</code> or <code>QUSRSYS/TESTOUTQ</code>).</li> <li>Y2K compliance uses century <code>19</code> or <code>20</code> based on year threshold (<code>80</code>).</li> </ul>"},{"location":"accounts-payable/03%20Payment%20Cycle/AP250%20OCL%20Check%20Register/AP250%20Summary%20Check%20Register/#notes","title":"Notes","text":"<ul> <li>Single Use Case: The <code>AP250.OCL36</code> call stack integrates multiple programs to perform a unified A/P payment processing and notification function, treated as a single use case due to its cohesive workflow.</li> <li>OCL Context: The OCL sets up files (<code>APDTWSC</code>) and output queues, ensuring proper data flow and report distribution.</li> <li>Modifications:</li> <li><code>AP256.RPG36</code>: Added support for four email addresses (5-13-19) and crude-specific messaging (5-01-24).</li> <li>Error Handling: The programs rely on indicators to skip invalid records, ensuring robust processing without detailed error logging.</li> <li>Business Context: The function supports ACH vendor payments with automated notifications, tailored for crude and normal vendors, and integrates with general ledger systems via journal reporting.</li> </ul> <p>This document concisely captures the business requirements, process steps, and calculations for the <code>AP250.OCL36</code> call stack, structured as a single function. Let me know if you need further clarification or additional details!</p>"},{"location":"accounts-payable/03%20Payment%20Cycle/AP250%20OCL%20Check%20Register/AP250OCL%20GROK/","title":"AP250OCL GROK","text":"<p>The RPG OCL program <code>AP250.OCL36</code> is an Accounts Payable (A/P) Check Register process that handles check printing, journal updates, and file maintenance. Below is a detailed breakdown of the process steps, external programs called, and tables/files used as requested.</p>"},{"location":"accounts-payable/03%20Payment%20Cycle/AP250%20OCL%20Check%20Register/AP250OCL%20GROK/#process-steps","title":"Process Steps","text":"<p>The OCL program follows a structured sequence of steps, primarily focused on generating an A/P check register, updating related files, and producing a cash disbursements journal. The steps are derived from the OCL code and are listed in execution order:</p> <ol> <li>Initialization:</li> <li>Calls the procedure <code>STRPCOCLP</code> to set up the processing environment.</li> <li> <p>Conditionally sets a local variable at offset 198 to indicate a wire transfer (<code>WT*** WIRE TRANSFER ***</code>) if parameter <code>?3?</code> is <code>/WT</code>, otherwise clears it.</p> </li> <li> <p>Check for Auto-Run and Workstation Lock:</p> </li> <li>If parameter <code>?2?</code> is <code>/AUTO</code>, skips to the <code>AP250</code> tag to proceed with processing.</li> <li> <p>If the workstation is locked for check posting (<code>DATAF1-?9?APPO?WS?</code>), displays a warning message indicating that checks cannot be posted until printed via Option 11 of <code>APMENU</code>. The job pauses, allowing cancellation (press 0, Enter to cancel), and jumps to the <code>END</code> tag if cancelled.</p> </li> <li> <p>Prompt User to Continue or Cancel:</p> </li> <li> <p>Displays a message: <code>'A/P CHECK REGISTER, JOURNAL, AND UPDATE FILES'</code> and pauses, allowing the user to cancel (press ATTN, 2, Enter) or continue (press 0, Enter).</p> </li> <li> <p>File Preparation:</p> </li> <li>Deletes the temporary file <code>APCD?WS?</code> if it exists.</li> <li> <p>Creates a new file <code>?9?APCD?WS?</code> with a sequential organization, 999,000 records, and a record length of 128 bytes.</p> </li> <li> <p>Main Check Register Processing (AP250):</p> </li> <li>Displays the message: <code>'CHECK REGISTER, UPDATE FILES EXECUTING'</code>.</li> <li>Loads and runs the program <code>AP250</code> with multiple file assignments:<ul> <li><code>APPYCK</code> \u2192 <code>?9?APPC?WS?</code></li> <li><code>APPAY</code> \u2192 <code>?9?APPY?WS?</code></li> <li><code>AP250S</code> \u2192 <code>?9?APPS?WS?</code></li> <li><code>APPYTR</code> \u2192 <code>?9?APPT?WS?</code></li> <li><code>APCONT</code>, <code>APVEND</code>, <code>APVEND2</code>, <code>APCHKR</code>, <code>APPYDS</code>, <code>APOPEN</code>, <code>APOPENH</code>, <code>APOPEND</code>, <code>APOPENV</code>, <code>APHISTH</code>, <code>APHISTD</code>, <code>APHISTV</code>, <code>FRCINH</code>, <code>FRCFBH</code> \u2192 Shared files with respective labels.</li> <li><code>APCDJR</code> \u2192 <code>?9?APCD?WS?</code> with an extension of 100 records.</li> <li><code>APDSMS</code> \u2192 Shared file.</li> </ul> </li> <li> <p>Overrides printer files <code>APPNCF</code> and <code>APPRINT</code> to specific output queues (<code>QUSRSYS/PRTPNC</code>, <code>QUSRSYS/APPOST</code>, or <code>QUSRSYS/TESTOUTQ</code>) if <code>?9?</code> is <code>/G</code>.</p> </li> <li> <p>Update Commission Table (AP251):</p> </li> <li>Loads and runs the program <code>AP251</code> to update the commission table with payment data.</li> <li> <p>Uses files:</p> <ul> <li><code>APPAY</code> \u2192 <code>?9?APPY?WS?</code> (shared).</li> <li><code>APTORCY</code> \u2192 <code>?9?APTORCY</code> (shared).</li> </ul> </li> <li> <p>Sort Cash Disbursements Journal Data:</p> </li> <li>Displays the message: <code>'CASH DISBURSMENTS JOURNAL EXECUTING'</code>.</li> <li>Loads and runs the program <code>#GSORT</code> to sort the <code>APCD?WS?</code> file into <code>?9?APCS?WS?</code>.</li> <li> <p>Sorting parameters:</p> <ul> <li>Sort key: 30 bytes ascending, starting at position 3.</li> <li>Include records where position 1 is not equal to 'C' or 'D'.</li> <li>Fields included in sort:</li> <li>Company (positions 2\u20133)</li> <li>C,D (position 12)</li> <li>AP,CASH,DISC (positions 106\u2013115)</li> <li>G/L # (positions 13\u201320)</li> <li>SEQ # (positions 97\u2013105).</li> </ul> </li> <li> <p>Generate Cash Disbursements Journal (AP255):</p> </li> <li>Loads and runs the program <code>AP255</code> to process the sorted data.</li> <li>Uses files:<ul> <li><code>APCDJR</code> \u2192 <code>?9?APCD?WS?</code></li> <li><code>AP255S</code> \u2192 <code>?9?APCS?WS?</code></li> <li><code>APCONT</code> \u2192 Shared.</li> <li><code>TEMGEN</code> \u2192 Shared.</li> </ul> </li> <li> <p>Overrides printer file <code>APPRINT</code> to output queues (<code>QUSRSYS/APPOST</code> or <code>QUSRSYS/TESTOUTQ</code>) if <code>?9?</code> is <code>/G</code>.</p> </li> <li> <p>Optional Wire Transfer Processing:</p> </li> <li>Checks if the file <code>?9?APDT?WS?</code> has a non-zero record count (<code>/000000</code>).</li> <li> <p>If records exist:</p> <ul> <li>Creates a new file <code>?9?APDT?WS?C</code> with indexed organization, 500 records, and a record length of 10 bytes.</li> <li>Loads and runs <code>AP256A</code> with files:</li> <li><code>APDTWS</code> \u2192 <code>?9?APDT?WS?</code></li> <li><code>APDTWSC</code> \u2192 <code>?9?APDT?WS?C</code> (retained as temporary, 50 records).</li> <li><code>APVNFMX</code> \u2192 Shared.</li> <li>Loads and runs <code>AP256</code> with files:</li> <li><code>APDTWS</code> \u2192 <code>?9?APDT?WS?</code></li> <li><code>APDTWSC</code> \u2192 <code>?9?APDT?WS?C</code> (shared).</li> <li><code>APVEND</code>, <code>APCONT</code>, <code>APVNFMX</code> \u2192 Shared.</li> <li>Overrides printer files <code>REPORT1</code>, <code>REPORT2</code>, <code>REPORT3</code>, <code>REPORT4</code> to output queues (<code>QUSRSYS/APACHOUTQ</code> or <code>QUSRSYS/TESTOUTQ</code>) if <code>?9?</code> is <code>/G</code>.</li> </ul> </li> <li> <p>Cleanup:</p> <ul> <li>Deletes temporary files: <code>APPT?WS?</code>, <code>APPY?WS?</code>, <code>APPS?WS?</code>, <code>APPC?WS?</code>, <code>APDS?WS?</code>, <code>APPO?WS?</code>, <code>APCD?WS?</code>, <code>APCS?WS?</code>, <code>APDT?WS?</code>, <code>APDT?WS?C</code>.</li> <li>If in auto mode (<code>?2?</code> is <code>/AUTO</code>), clears all local variables.</li> </ul> </li> <li> <p>End Processing:</p> <ul> <li>Jumps to the <code>END</code> tag to terminate the job.</li> </ul> </li> </ol>"},{"location":"accounts-payable/03%20Payment%20Cycle/AP250%20OCL%20Check%20Register/AP250OCL%20GROK/#external-programs-called","title":"External Programs Called","text":"<p>The OCL program invokes the following external programs:</p> <ol> <li>STRPCOCLP: Initializes the processing environment (likely a system or custom procedure).</li> <li>AP250: Main program for generating the A/P check register and updating files.</li> <li>AP251: Updates the commission table with payment data.</li> <li>#GSORT: Sorts the cash disbursements journal data.</li> <li>AP255: Generates the cash disbursements journal.</li> <li>AP256A: Processes wire transfer data (first phase).</li> <li>AP256: Processes wire transfer data (second phase).</li> </ol>"},{"location":"accounts-payable/03%20Payment%20Cycle/AP250%20OCL%20Check%20Register/AP250OCL%20GROK/#tablesfiles-used","title":"Tables/Files Used","text":"<p>The program interacts with multiple files, some temporary (workstation-specific) and others permanent (shared). The files are listed below with their logical names, labels, and usage context:</p> Logical Name Label Usage Disposition APPYCK ?9?APPC?WS? Check-related data (temporary). Exclusive APPAY ?9?APPY?WS? Payment data (temporary, used in AP250 and AP251). Exclusive AP250S ?9?APPS?WS? Supporting data for AP250 (temporary). Exclusive APPYTR ?9?APPT?WS? Transaction data (temporary). Exclusive APCONT ?9?APCONT A/P control file (used in AP250, AP255, AP256). Shared APVEND ?9?APVEND Vendor master file (used in AP250, AP256). Shared APVEND2 ?9?APVEND Secondary vendor file (used in AP250). Shared APCHKR ?9?APCHKR Check register file (used in AP250). Shared APPYDS ?9?APDS?WS? Payment distribution file (temporary, shared in AP250). Shared APOPEN ?9?APOPEN Open A/P file (used in AP250). Shared APOPENH ?9?APOPNH Open A/P header file (used in AP250). Shared APOPEND ?9?APOPND Open A/P detail file (used in AP250). Shared APOPENV ?9?APOPNV Open A/P vendor file (used in AP250). Shared APHISTH ?9?APHSTH A/P history header file (used in AP250). Shared APHISTD ?9?APHSTD A/P history detail file (used in AP250). Shared APHISTV ?9?APHSTV A/P history vendor file (used in AP250). Shared FRCINH ?9?FRCINH Financial control invoice header (used in AP250). Shared FRCFBH ?9?FRCFBH Financial control freight bill header (used in AP250). Shared APCDJR ?9?APCD?WS? Cash disbursements journal file (temporary, used in AP250, AP255). Exclusive APDSMS ?9?APDSMS Distribution master file (used in AP250). Shared APTORCY ?9?APTORCY Commission table file (used in AP251). Shared AP255S ?9?APCS?WS? Sorted cash disbursements data (temporary, used in AP255). Exclusive TEMGEN ?9?TEMGEN Temporary general ledger file (used in AP255). Shared APDTWS ?9?APDT?WS? Wire transfer data (temporary, used in AP256A, AP256). Exclusive APDTWSC ?9?APDT?WS?C Wire transfer control data (temporary, used in AP256A, AP256). Exclusive/Shared APVNFMX ?9?APVNFMX Vendor file matrix (used in AP256A, AP256). Shared"},{"location":"accounts-payable/03%20Payment%20Cycle/AP250%20OCL%20Check%20Register/AP250OCL%20GROK/#notes","title":"Notes","text":"<ul> <li>Temporary Files: Files with <code>?WS?</code> in their labels are workstation-specific and deleted at the end of the job.</li> <li>Shared Files: Permanent files (e.g., <code>APCONT</code>, <code>APVEND</code>) are accessed in shared mode, indicating they are used across multiple processes.</li> <li>Printer Overrides: The program conditionally redirects output to different queues based on the <code>?9?</code> parameter (<code>/G</code> for production, otherwise test queues).</li> <li>Wire Transfer Processing: The <code>AP256A</code> and <code>AP256</code> steps are conditional, only executed if wire transfer data exists in <code>?9?APDT?WS?</code>.</li> </ul> <p>This summary provides a comprehensive overview of the <code>AP250.OCL36</code> program's functionality, external dependencies, and data interactions. Let me know if you need further clarification or analysis!</p>"},{"location":"accounts-payable/03%20Payment%20Cycle/AP250%20OCL%20Check%20Register/AP250RPG%20GROK/","title":"AP250RPG GROK","text":"<p>The RPG program <code>AP250.RPG36</code> is a core component of the Accounts Payable (A/P) Check Register process, invoked by the OCL procedure <code>AP250.OCL36</code>. It handles the generation of the check register, updates master files, and processes payment-related data, including support for ACH, wire transfers, and employee expenses. Below is a detailed breakdown of the process steps, business rules, tables/files used, and external programs called as requested.</p>"},{"location":"accounts-payable/03%20Payment%20Cycle/AP250%20OCL%20Check%20Register/AP250RPG%20GROK/#process-steps","title":"Process Steps","text":"<p>The <code>AP250.RPG36</code> program is structured around a series of subroutines that process input records, update files, and generate output for the check register and related journals. The steps are derived from the RPG source code and are organized by the main processing flow and subroutine execution:</p> <ol> <li>Initialization (L4DET Subroutine):</li> <li>Retrieves the current system time and date, formatting them for output (e.g., <code>TIMDAT</code>, <code>DATYMD</code>, <code>DATE8</code>).</li> <li>Initializes counters and accumulators (e.g., <code>PAGE</code>, <code>ZERO6</code>, <code>ZERO9</code>).</li> <li>Sets a separator field (<code>SEP</code>) to <code>'* '</code>.</li> <li>Retrieves the check date from <code>APPYTR</code> (chain to <code>PTCKDT</code>, convert to <code>CDYMD8</code> with century adjustment using <code>Y2KCEN</code> and <code>Y2KCMP</code>).</li> <li>Chains to <code>APCONT</code> to retrieve company details (e.g., <code>ACNAME</code>, <code>ACDSGL</code>, <code>ACCDJR</code>, <code>ACCKNO</code>).</li> <li>Determines the journal ID (<code>JRNID</code>) based on whether a wire transfer is indicated (<code>WIRE = 'WT'</code> sets <code>JRNID</code> to <code>'WD'</code>, otherwise <code>'CD'</code>; additional logic for ACH, wire transfer, or employee expenses sets <code>JRNID</code> to <code>'AD'</code>, <code>'WD'</code>, or <code>'ED'</code> respectively).</li> <li> <p>Sets indicator <code>50</code> for wire transfers, ACH, or employee expenses to skip writing to <code>APCHKR</code>.</p> </li> <li> <p>Process Each Check Record (EACH01 Subroutine):</p> </li> <li>Processes records from <code>APPYCK</code> (check file).</li> <li>Converts the check date (<code>AXCKDT</code>) to a formatted date (<code>AXYMD8</code>).</li> <li>Copies the check number (<code>AXCHEK</code>) to the PNC check number field (<code>PNCCHK</code>) for positive pay format.</li> <li>Evaluates the record code (<code>AXRECD</code>):<ul> <li><code>'C'</code>: Credit/no pay, skip processing (indicator <code>19</code>).</li> <li><code>'F'</code>: Full stub, void check, continue to next stub with same check number (indicator <code>12</code>).</li> <li><code>'V'</code>: Full stub, void check, use next check number (indicator <code>13</code>).</li> <li><code>'P'</code>, <code>'A'</code>, <code>'W'</code>, <code>'E'</code>: Prepaid check, ACH, wire transfer, or employee expense, respectively (indicators <code>25</code>, <code>26</code>, <code>27</code>, <code>28</code> set indicator <code>11</code>).</li> </ul> </li> <li>Updates the A/P check reconciliation file (<code>APCHKR</code>):<ul> <li>Chains to <code>APCHKR</code> using a key constructed from <code>CONO</code>, <code>BKGL</code>, and <code>AXCHEK</code>.</li> <li>If not found (<code>90</code> on), initializes fields (<code>AMCODE</code>, <code>AMCKAM</code>, <code>AMCLDT</code>, <code>AMOCAM</code>).</li> <li>For voided checks (<code>13</code> on), sets <code>AMCKAM</code> to 0 and <code>AMCODE</code> to <code>'V'</code>, updates clear date (<code>AMCLDT</code>, <code>CLDT8</code>).</li> <li>For non-voided checks, sets <code>AMCODE</code> to <code>'O'</code> and updates <code>AMCKAM</code> with <code>AXAMT</code>.</li> <li>Formats the date for PNC positive pay (<code>PNCDT8</code>) and sets <code>PNCCOD</code> to <code>'V'</code> for voided checks or <code>'I'</code> otherwise.</li> </ul> </li> <li>Updates counters and accumulators:<ul> <li>Increments <code>C3CNT</code> and adds <code>AXAMT</code> to <code>C3AMT</code> for computer checks (non-prepaid, non-void).</li> <li>Increments <code>P3CNT</code>, <code>A3CNT</code>, <code>W3CNT</code>, or <code>E3CNT</code> and adds <code>AXAMT</code> to respective accumulators (<code>P3AMT</code>, <code>A3AMT</code>, <code>W3AMT</code>, <code>E3AMT</code>) for prepaid, ACH, wire transfer, or employee expense records.</li> <li>Increments <code>L3CNT</code> and adds <code>AXAMT</code> to <code>L3AMT</code> and <code>L2PAID</code> for non-voided checks.</li> </ul> </li> <li> <p>Stores the check number (<code>AXCHEK</code>) in <code>L4CHEK</code> for updating <code>APCONT</code>.</p> </li> <li> <p>Process Payment Records (EACH02 Subroutine):</p> </li> <li>Processes records from <code>APPAY</code> (payment file).</li> <li>Accumulates discount taken (<code>OPDISC</code>) into <code>OPDSTK</code> and <code>CDDISC</code>.</li> <li>Updates vendor totals for <code>APVEND</code>:<ul> <li>Adds <code>OPGRAM</code> to <code>L2GRAM</code> (gross amount).</li> <li>Adds <code>OPDISC</code> to <code>L2DISC</code> (discount).</li> <li>Adds <code>OPPPTD</code> to <code>L2PPTD</code> (partial paid to date).</li> <li>Adds <code>OPLPAM</code> to <code>L2AMT</code> (payment amount).</li> </ul> </li> <li>Calculates the A/P reduction (<code>OPPAY = OPDISC + OPLPAM</code>) and open amount (<code>OPOPEN = OPGRAM - OPPPTD - OPPAY</code>).</li> <li>If <code>OPOPEN = 0</code>, marks the record as fully paid (indicator <code>20</code>).</li> <li>Updates <code>OPPPTD</code> by adding <code>OPLPAM</code>.</li> <li>Processes <code>APOPEN</code> records:<ul> <li>Sets the lower limit (<code>SETLL</code>) on <code>APOPEN</code> using <code>OPKEY</code>.</li> <li>Reads <code>APOPEN</code> records, comparing <code>OPKY1</code> with <code>COVNVO</code> to ensure matching vouchers.</li> <li>Chains to <code>APOPENH</code>, <code>APOPEND</code>, or <code>APOPENV</code> based on record type (indicators <code>04</code>, <code>05</code>, <code>06</code>).</li> </ul> </li> <li>Updates freight-related files (<code>FRCFBH</code>, <code>FRCINH</code>):<ul> <li>Constructs a key (<code>FRCKEY</code>, <code>FRCK39</code>) using <code>CONO</code>, <code>OPCAID</code>, <code>OPINVN</code>, and <code>OPSORN</code>.</li> <li>Chains to <code>FRCFBH</code> (freight bill header) first; if found and <code>FRAPST = 'Y'</code>, writes an exception record (<code>APFBST</code>).</li> <li>If not found, chains to <code>FRCINH</code> (invoice header) and writes an exception record (<code>APINST</code>).</li> </ul> </li> <li> <p>Updates the discount missed table (<code>APPYDS</code>):</p> <ul> <li>Chains to <code>APPYDS</code> using <code>OPKY1</code>.</li> <li>Writes an exception record to <code>APPYDS</code> (indicator <code>70</code>).</li> </ul> </li> <li> <p>Vendor Totals Update (L2TOT Subroutine):</p> </li> <li>Chains to <code>APVEND</code> using a key (<code>VNKEY</code>) constructed from <code>CONO</code> and <code>VEND</code>.</li> <li> <p>If found (<code>92</code> off):</p> <ul> <li>Updates <code>VNLPAY</code> with <code>L2AMT</code> (last payment amount).</li> <li>Updates <code>VNLPDT</code> and <code>VNLPD8</code> with <code>AXCKDT</code> (last payment date).</li> <li>Adds <code>L2DISC</code> to <code>VNDMTD</code> and <code>VNDYTD</code> (month-to-date and year-to-date discounts).</li> <li>Adds <code>L2AMT</code> and <code>L2DISC</code> to <code>VNPAY</code> (month-to-date payments).</li> <li>Subtracts <code>L2AMT</code> and <code>L2DISC</code> from <code>VNCBAL</code> (current balance).</li> <li>Adds <code>L2PAID</code> to <code>VNTYDP</code> (year-to-date paid).</li> </ul> </li> <li> <p>Final Totals and Updates (L4TOT Subroutine):</p> </li> <li>Checks if <code>L4CHEK</code> is non-zero and compares it with <code>ACCKNO</code> (next check number).</li> <li>If equal, increments <code>ACCKNO</code> and <code>ACCDJR</code> (next cash disbursements journal number).</li> <li> <p>Updates <code>APCONT</code> with the new <code>ACCKNO</code> and <code>ACCDJR</code>.</p> </li> <li> <p>Output Generation:</p> </li> <li>Writes to <code>APCHKR</code> (check reconciliation) for non-prepaid, non-voided records (<code>01</code>, <code>N90</code>, <code>N50</code>, <code>N12</code>, <code>N19</code>):<ul> <li>Updates or adds records with fields like <code>AMCODE</code>, <code>AMCKAM</code>, <code>AMCLDT</code>, <code>CLDT8</code>, <code>AMOCAM</code>.</li> </ul> </li> <li>Writes to <code>APOPENH</code>, <code>APOPEND</code>, <code>APOPENV</code> (header, detail, one-time vendor) for fully paid records (<code>70</code>, <code>04</code>/<code>05</code>/<code>06</code>, <code>20</code>):<ul> <li>Marks records as deleted (<code>'D'</code>) and updates fields like <code>OPPPTD</code>, <code>OPCKNO</code>, <code>AXYMD</code>, <code>CDYMD</code>, <code>OPLPAM</code>, <code>OPDSTK</code>.</li> </ul> </li> <li>Writes to <code>APHISTH</code>, <code>APHISTD</code>, <code>APHISTV</code> (history files) for fully paid records:<ul> <li>Adds records with payment details, including <code>OPDISC</code>, <code>OPLPAM</code>, <code>AXYMD</code>, <code>CKDT8</code>, <code>OPCAID</code>, <code>OPINVN</code>.</li> </ul> </li> <li>Writes to <code>APPYDS</code> (discount missed table) for header records (<code>70</code>, <code>04</code>, <code>N97</code>):<ul> <li>Includes fields like <code>DSDEL</code>, <code>DSREC1</code>, <code>DSREC2</code>, <code>OPCKNO</code>, <code>OPPAID</code>, <code>OPLPAM</code>, <code>OPDISC</code>, <code>DSINVN</code>, <code>VNNAME</code>.</li> </ul> </li> <li>Writes to <code>FRCINH</code> and <code>FRCFBH</code> (freight-related files) for applicable vouchers:<ul> <li>Updates with payment status (<code>'P'</code>), vendor, check number, and amount.</li> </ul> </li> <li>Writes to <code>APCDJR</code> (cash disbursements journal) for payment records (<code>02</code>, <code>N19</code>):<ul> <li>Outputs cash (<code>'C'</code>), discount (<code>'D'</code>), and A/P (<code>'AP'</code>) entries with fields like <code>CONO</code>, <code>JRNID</code>, <code>BKGL</code>, <code>AXCHEK</code>, <code>OPLPAM</code>, <code>CDDISC</code>, <code>OPPAY</code>.</li> </ul> </li> <li>Writes to <code>APPNCF</code> (PNC positive pay file) for non-prepaid, non-voided records (<code>01</code>, <code>N19</code>, <code>N12</code>, <code>N28</code>):<ul> <li>Outputs bank account, check number, date, amount, vendor name, and status code.</li> </ul> </li> <li>Writes to <code>APPRINT</code> (printer file) for the check register report:<ul> <li>Outputs headers with company name, bank G/L, wire transfer indicator, date, time, and journal ID.</li> <li>Outputs detail lines with check number, vendor number, name, date, and amount.</li> <li>Outputs totals for computer checks, prepaid checks, ACH payments, wire transfers, employee expenses, and overall totals.</li> </ul> </li> </ol>"},{"location":"accounts-payable/03%20Payment%20Cycle/AP250%20OCL%20Check%20Register/AP250RPG%20GROK/#business-rules","title":"Business Rules","text":"<p>The program enforces several business rules, primarily related to payment processing, file updates, and reporting:</p> <ol> <li>Check Record Processing:</li> <li>Skips processing for credit/no-pay records (<code>AXRECD = 'C'</code>).</li> <li>Handles voided checks differently based on <code>AXRECD</code> (<code>'F'</code> for same check number, <code>'V'</code> for next check number).</li> <li> <p>Supports multiple payment types: prepaid checks (<code>'P'</code>), ACH (<code>'A'</code>), wire transfers (<code>'W'</code>), and employee expenses (<code>'E'</code>).</p> </li> <li> <p>Date Handling:</p> </li> <li>Adjusts check dates for century (<code>Y2KCEN</code>, <code>Y2KCMP</code>) to handle Y2K compliance (e.g., <code>PTCKYY &gt;= Y2KCMP</code> uses <code>Y2KCEN</code>, otherwise adds 1 to century).</li> <li> <p>Formats dates for PNC positive pay (<code>PNCDT8</code>) in MMDDYYYY format.</p> </li> <li> <p>Journal and Check Number Management:</p> </li> <li>Assigns journal ID (<code>JRNID</code>) as <code>'CD'</code> (check), <code>'WD'</code> (wire transfer), <code>'AD'</code> (ACH), or <code>'ED'</code> (employee expenses).</li> <li> <p>Increments <code>ACCKNO</code> (next check number) and <code>ACCDJR</code> (next journal number) only if a valid check number is processed.</p> </li> <li> <p>Vendor and Payment Updates:</p> </li> <li>Accumulates gross amount, discount, and payment amounts for each vendor (<code>L2GRAM</code>, <code>L2DISC</code>, <code>L2AMT</code>, <code>L2PAID</code>).</li> <li>Updates vendor balances (<code>VNCBAL</code>), payments (<code>VNPAY</code>, <code>VNTYDP</code>), and discounts (<code>VNDMTD</code>, <code>VNDYTD</code>) in <code>APVEND</code>.</li> <li> <p>Marks fully paid vouchers as deleted (<code>'D'</code>) in <code>APOPENH</code>, <code>APOPEND</code>, <code>APOPENV</code>.</p> </li> <li> <p>Freight Invoice Processing:</p> </li> <li>Checks <code>FRCFBH</code> (freight bill header) before <code>FRCINH</code> (invoice header) for vouchers with a carrier ID (<code>OPCAID</code>).</li> <li> <p>Updates payment status (<code>FRAPST = 'P'</code>) in the appropriate freight file.</p> </li> <li> <p>Discount Missed Tracking:</p> </li> <li> <p>Writes to <code>APPYDS</code> for header records to track missed discounts, including invoice and vendor details.</p> </li> <li> <p>Check Reconciliation:</p> </li> <li>Updates <code>APCHKR</code> only for non-wire transfer, non-ACH, non-employee expense records (<code>N50</code>).</li> <li> <p>Sets <code>AMCODE</code> to <code>'O'</code> (open) or <code>'V'</code> (voided) and updates amounts and dates accordingly.</p> </li> <li> <p>Reporting:</p> </li> <li>Generates a detailed check register (<code>APPRINT</code>) with headers, detail lines, and totals by payment type.</li> <li>Produces a PNC positive pay file (<code>APPNCF</code>) for bank reconciliation, including void status.</li> </ol>"},{"location":"accounts-payable/03%20Payment%20Cycle/AP250%20OCL%20Check%20Register/AP250RPG%20GROK/#tablesfiles-used","title":"Tables/Files Used","text":"<p>The program interacts with multiple files for input, update, and output. The files are listed below with their logical names, labels, usage, and disposition:</p> Logical Name Label Usage Disposition Record Length APPYCK ?9?APPC?WS? Input: Check data (check number, amount, date, vendor). Input (IP) 96 APPAY ?9?APPY?WS? Input/Update: Payment data (voucher, gross amount, discount, check number). Input/Update (IS) 384 AP250S ?9?APPS?WS? Input: Supporting data (used for array <code>SEP</code>). Input (IR) 3 APPYTR ?9?APPT?WS? Input: Transaction data (check date, year/period). Input (IC) 128 APCONT ?9?APCONT Update: A/P control (company name, next check/journal numbers). Update (UC) 256 APVEND ?9?APVEND Update: Vendor master (name, balance, payments, discounts). Update (UC) 579 APVEND2 ?9?APVEND Input: Vendor master (address, name overflow). Input (IC) 579 APCHKR ?9?APCHKR Update: Check reconciliation (check amount, clear date, status). Update (UC) 128 APOPEN ?9?APOPEN Input: Open A/P file (voucher data). Input (ID) 384 APOPENH ?9?APOPNH Update: Open A/P header (voucher header data). Update (UC) 384 APOPEND ?9?APOPND Update: Open A/P detail (voucher detail data). Update (UC) 384 APOPENV ?9?APOPNV Update: Open A/P one-time vendor data. Update (UC) 384 FRCINH ?9?FRCINH Update: Freight invoice header (carrier, payment status). Update (UF) 206 FRCFBH ?9?FRCFBH Update: Freight bill header (similar to FRCINH). Update (UF) 206 APPYDS ?9?APDS?WS? Input: Discount missed table (voucher, discount data). Input (IF) 384 APHISTH ?9?APHSTH Output: A/P history header (payment history). Output (O) 384 APHISTD ?9?APHSTD Output: A/P history detail (payment details). Output (O) 384 APHISTV ?9?APHSTV Output: A/P history one-time vendor (payment history). Output (O) 384 APCDJR ?9?APCD?WS? Output: Cash disbursements journal (cash, discount, A/P entries). Output (O) 128 APPRINT ?9?APPRINT Output: Check register report (printer file). Output (O) 132 APPNCF ?9?APPNCF Output: PNC positive pay file (bank reconciliation). Output (O) 155 APDSMS ?9?APDSMS Output: Discount missed table (missed discount records). Output (O) 384"},{"location":"accounts-payable/03%20Payment%20Cycle/AP250%20OCL%20Check%20Register/AP250RPG%20GROK/#external-programs-called","title":"External Programs Called","text":"<p>The <code>AP250.RPG36</code> program does not explicitly call any external programs. All processing is handled within the program through its subroutines (<code>L4DET</code>, <code>EACH01</code>, <code>EACH02</code>, <code>L2TOT</code>, <code>L4TOT</code>). The program is self-contained and relies on file operations and internal logic to complete its tasks.</p>"},{"location":"accounts-payable/03%20Payment%20Cycle/AP250%20OCL%20Check%20Register/AP250RPG%20GROK/#notes","title":"Notes","text":"<ul> <li>File Dispositions:</li> <li><code>IP</code> (Primary Input): <code>APPYCK</code> for check records.</li> <li><code>IS</code> (Secondary Input/Update): <code>APPAY</code> for payment processing.</li> <li><code>IR</code>/<code>IC</code> (Input): Temporary or control files (<code>AP250S</code>, <code>APPYTR</code>, <code>APVEND2</code>).</li> <li><code>UC</code>/<code>UF</code> (Update): Master files (<code>APCONT</code>, <code>APVEND</code>, <code>APCHKR</code>, <code>APOPEN*</code>, <code>FRC*</code>).</li> <li><code>ID</code> (Input for Deletion): <code>APOPEN</code> for reading vouchers.</li> <li><code>O</code> (Output): History, journal, and report files (<code>APHIST*</code>, <code>APCDJR</code>, <code>APPRINT</code>, <code>APPNCF</code>, <code>APDSMS</code>).</li> <li>Modifications:</li> <li><code>JB01</code> (2012): Added support for ACH (<code>A</code>), wire transfers (<code>W</code>), and employee expenses (<code>E</code>) in <code>PTHOLD</code> and <code>AXRECD</code>.</li> <li><code>JB02</code> (2018): Added <code>FRCFBH</code> processing before <code>FRCINH</code> and increased <code>APPAY</code> record length to 384 to match <code>APOPEN</code>.</li> <li><code>MG03</code> (2022): Added <code>APPYDS</code> and <code>APDSMS</code> for tracking missed discounts.</li> <li>Y2K Compliance: The program handles century adjustments for dates to ensure correct processing of check and payment dates.</li> <li>Output Formats:</li> <li>The check register (<code>APPRINT</code>) includes detailed headers and totals by payment type.</li> <li>The PNC positive pay file (<code>APPNCF</code>) is formatted for bank reconciliation, including void status.</li> </ul> <p>This summary provides a comprehensive overview of the <code>AP250.RPG36</code> program's functionality, business logic, file interactions, and lack of external program calls. Let me know if you need further clarification or additional analysis!</p>"},{"location":"accounts-payable/03%20Payment%20Cycle/AP250%20OCL%20Check%20Register/AP251%20RPG/","title":"AP251 RPG","text":"<p>The RPG program <code>AP251.RPG36</code> is invoked by the OCL procedure <code>AP251.OCL36</code> as part of the Accounts Payable (A/P) Check Register process, specifically to update the commission table (<code>APTORCY</code>) with payment information from the payment file (<code>APPAY</code>). Below is a detailed explanation of the process steps, business rules, tables/files used, and external programs called, as requested.</p>"},{"location":"accounts-payable/03%20Payment%20Cycle/AP250%20OCL%20Check%20Register/AP251%20RPG/#process-steps","title":"Process Steps","text":"<p>The <code>AP251.RPG36</code> program is a straightforward RPG program designed to update the commission table (<code>APTORCY</code>) based on payment records from the <code>APPAY</code> file. The processing is structured around two subroutines: <code>ONETIM</code> for initialization and <code>EACH01</code> for processing each payment record. The steps are as follows:</p> <ol> <li>Initialization (ONETIM Subroutine):</li> <li>Executes once at the start of the program (<code>N09</code> condition ensures it runs only if indicator <code>09</code> is off).</li> <li>Retrieves the current system time and date using the <code>TIME</code> operation, storing them in <code>TIMDAT</code> (12 digits).</li> <li>Splits <code>TIMDAT</code> into <code>TIME</code> (6 digits, time) and <code>DATE</code> (6 digits, date).</li> <li>Converts the date to a year-month-day format (<code>DATYMD</code>) by multiplying <code>DATE</code> by 10000.01.</li> <li>Formats the date into an 8-digit format (<code>DATE8</code>) by prefixing the century (<code>20</code>) and appending <code>DATYMD</code>.</li> <li> <p>Sets indicator <code>09</code> to prevent re-execution of the subroutine.</p> </li> <li> <p>Process Each Payment Record (EACH01 Subroutine):</p> </li> <li>Executes for each record in the <code>APPAY</code> file (triggered by record indicator <code>01</code>).</li> <li>Constructs a key (<code>KEY27</code>, 27 bytes) for chaining to the <code>APTORCY</code> file:<ul> <li>Copies the company number (<code>CONO</code>) to <code>KEY27</code>.</li> <li>Copies the vendor number (<code>VEND</code>) to a temporary key (<code>KEY25</code>).</li> <li>Copies the invoice description (<code>OPIN20</code>, positions 35\u201354) to a temporary key (<code>KEY20</code>).</li> <li>Combines <code>KEY20</code> into <code>KEY25</code> and then into <code>KEY27</code> to form the full key.</li> </ul> </li> <li>Chains to the <code>APTORCY</code> file using <code>KEY27</code> to locate the corresponding commission record (sets indicator <code>99</code> if not found).</li> <li> <p>If the record is found (<code>N99</code>):</p> <ul> <li>Converts the check date (<code>AXCKDT</code>) to a year-month-day format (<code>AXYMD</code>) by multiplying by 10000.01.</li> <li>Formats the check date into an 8-digit format (<code>AXYMD8</code>) by prefixing the century (<code>20</code>) and appending <code>AXYMD</code>.</li> <li>Sets the amount field (<code>AMT92</code>) to the gross amount (<code>OPGRAM</code>) from the <code>APPAY</code> record.</li> <li>Writes an exception record to <code>APTORCY</code> via the <code>UPDATE</code> output specification.</li> </ul> </li> <li> <p>Update Commission Table (APTORCY):</p> </li> <li>For each matching record in <code>APTORCY</code>, updates the following fields:<ul> <li><code>OPINV#</code> (A/P invoice number, positions 207\u2013226 from <code>APPAY</code>) to <code>ATINV</code> (positions 84\u2013103).</li> <li><code>AMT92</code> (gross amount from <code>OPGRAM</code>) to <code>ATAPMT</code> (positions 104\u2013108, packed).</li> <li>Sets <code>ATSTAT</code> (position 109) to <code>'P'</code> to indicate the payment status.</li> <li><code>ATCHK#</code> (check number, positions 91\u201396 from <code>APPAY</code> as <code>OPCKNO</code>) to <code>ATCHK#</code> (positions 110\u2013115).</li> </ul> </li> </ol>"},{"location":"accounts-payable/03%20Payment%20Cycle/AP250%20OCL%20Check%20Register/AP251%20RPG/#business-rules","title":"Business Rules","text":"<p>The program enforces the following business rules, which govern the updating of the commission table:</p> <ol> <li>Key Matching for Commission Records:</li> <li>The program matches <code>APPAY</code> records to <code>APTORCY</code> records using a composite key (<code>KEY27</code>) built from:<ul> <li>Company number (<code>CONO</code>, positions 2\u20133 in <code>APPAY</code>, <code>ATCO</code> in <code>APTORCY</code>).</li> <li>Vendor number (<code>VEND</code>, positions 4\u20138 in <code>APPAY</code>, <code>ATVEND</code> in <code>APTORCY</code>).</li> <li>Invoice description (<code>OPIN20</code>, positions 35\u201354 in <code>APPAY</code>, corresponding to <code>ATINV</code> in <code>APTORCY</code>).</li> </ul> </li> <li> <p>If no matching record is found in <code>APTORCY</code> (indicator <code>99</code> on), the program skips the update for that payment record.</p> </li> <li> <p>Payment Status Update:</p> </li> <li>Updates the commission table only when a matching record is found.</li> <li>Sets the payment status (<code>ATSTAT</code>) to <code>'P'</code> (paid) for matched records.</li> <li> <p>Records the gross amount (<code>OPGRAM</code>) as the payment amount (<code>ATAPMT</code>) and the check number (<code>OPCKNO</code>) in <code>ATCHK#</code>.</p> </li> <li> <p>Date Handling:</p> </li> <li>Uses the check date (<code>AXCKDT</code>, positions 434\u2013439 in the User Data Structure) and formats it into an 8-digit year-month-day format (<code>AXYMD8</code>) with a century prefix (<code>20</code>).</li> <li> <p>Includes Y2K compliance fields (<code>Y2KCEN = 19</code>, <code>Y2KCMP = 80</code>) in the User Data Structure (UDS), though they are not explicitly used in date calculations in this program (likely inherited from a standard template).</p> </li> <li> <p>No Output Reports:</p> </li> <li> <p>The program does not generate printed reports or additional output files; it solely updates the <code>APTORCY</code> file.</p> </li> <li> <p>Single-Pass Processing:</p> </li> <li>Processes each <code>APPAY</code> record once, with no accumulation or totaling across records.</li> <li>Updates are performed immediately for each matched record via exception output (<code>EXCPTUPDATE</code>).</li> </ol>"},{"location":"accounts-payable/03%20Payment%20Cycle/AP250%20OCL%20Check%20Register/AP251%20RPG/#tablesfiles-used","title":"Tables/Files Used","text":"<p>The program interacts with two files, as defined in the OCL and RPG source:</p> Logical Name Label Usage Disposition Record Length APPAY ?9?APPY?WS? Input: Payment data (company, vendor, invoice, gross amount, check number). Input (IP) 384 APTORCY ?9?APTORCY Update: Commission table (vendor, invoice, payment amount, status). Update (UF) 211 <p>Key Fields in APPAY: - <code>CONO</code> (Company Number, positions 2\u20133) - <code>VEND</code> (Vendor Number, positions 4\u20138) - <code>OPIN20</code> (Invoice Description, positions 35\u201354) - <code>OPGRAM</code> (Gross Amount, packed, positions 18\u201323) - <code>OPCKNO</code> (Check Number for Prepay, positions 91\u201396) - <code>AXCKDT</code> (Check Date, positions 434\u2013439 in UDS)</p> <p>Key Fields in APTORCY: - <code>ATCO</code> (Company Number, positions 2\u20133) - <code>ATVEND</code> (Vendor Number, positions 59\u201363) - <code>ATINV</code> (Invoice Number, positions 84\u2013103) - <code>ATAPMT</code> (A/P Payment Amount, packed, positions 104\u2013108) - <code>ATSTAT</code> (Payment Status, position 109) - <code>ATCHK#</code> (Check Number, positions 110\u2013115)</p>"},{"location":"accounts-payable/03%20Payment%20Cycle/AP250%20OCL%20Check%20Register/AP251%20RPG/#external-programs-called","title":"External Programs Called","text":"<p>The <code>AP251.RPG36</code> program does not explicitly call any external programs. All processing is handled within the program through its subroutines (<code>ONETIM</code> and <code>EACH01</code>). The program is self-contained, relying solely on file operations and internal logic to update the commission table.</p>"},{"location":"accounts-payable/03%20Payment%20Cycle/AP250%20OCL%20Check%20Register/AP251%20RPG/#notes","title":"Notes","text":"<ul> <li>File Dispositions:</li> <li><code>APPAY</code> is the primary input file (<code>IP</code>), read sequentially to process payment records.</li> <li><code>APTORCY</code> is an update file (<code>UF</code>) with an external key (<code>EXTK</code>), allowing updates to specific records based on the constructed key (<code>KEY27</code>).</li> <li>Modifications:</li> <li><code>JB01</code>: Added support for prepaid vouchers (<code>OPPAID</code>, position 97).</li> <li><code>JB02</code>: Added sales order number (<code>OPSORN</code>, positions 281\u2013286) and modified invoice handling to use <code>OPIN20</code> instead of <code>HANDTK</code> for key construction.</li> <li>Y2K Compliance: The program includes fields for century handling (<code>Y2KCEN</code>, <code>Y2KCMP</code>) in the User Data Structure, but they are not used in this specific logic, suggesting a standard template inclusion.</li> <li>Error Handling: If a matching <code>APTORCY</code> record is not found (<code>99</code> on), the program skips the update without logging errors or generating output, ensuring silent continuation.</li> <li>Purpose: The program is narrowly focused on updating the commission table with payment details, likely used to track commissions owed or paid to vendors based on invoice payments.</li> </ul> <p>This summary provides a comprehensive overview of the <code>AP251.RPG36</code> program's functionality, business logic, file interactions, and lack of external program calls. Let me know if you need further clarification or additional analysis!</p>"},{"location":"accounts-payable/03%20Payment%20Cycle/AP250%20OCL%20Check%20Register/AP255%20RPG/","title":"AP255 RPG","text":"<p>The RPG program <code>AP255.RPG36</code> is invoked by the OCL procedure <code>AP250.OCL36</code> as part of the Accounts Payable (A/P) Check Register process, specifically to generate the Cash Disbursements Journal and summarize A/P transactions. Below is a detailed explanation of the process steps, business rules, tables/files used, and external programs called, as requested.</p>"},{"location":"accounts-payable/03%20Payment%20Cycle/AP250%20OCL%20Check%20Register/AP255%20RPG/#process-steps","title":"Process Steps","text":"<p>The <code>AP255.RPG36</code> program processes sorted records from the cash disbursements journal file (<code>APCDJR</code>) to produce a summarized journal report and update a general ledger file (<code>TEMGEN</code>). The processing is structured around a main program flow and a single subroutine (<code>JRNL</code>). The steps are as follows:</p> <ol> <li>Initialization (Level 4 Break - L4):</li> <li>Executes at the start of the program (triggered by level break <code>L4</code>).</li> <li>Retrieves the current system time and date using the <code>TIME</code> operation, storing them in <code>TIMDAT</code> (12 digits).</li> <li>Splits <code>TIMDAT</code> into <code>TIME</code> (6 digits, time) and <code>DATE</code> (6 digits, date).</li> <li>Converts the date to a year-month-day format (<code>DATYMD</code>) by multiplying <code>DATE</code> by 10000.01.</li> <li>Formats the date into an 8-digit format (<code>DATE8</code>) by prefixing the century (<code>20</code>) and appending <code>DATYMD</code>.</li> <li>Initializes the page counter (<code>PAGE</code>) to 0.</li> <li>Sets a separator field (<code>SEP</code>) to <code>'* '</code>.</li> <li>Chains to the <code>APCONT</code> file using the company number (<code>CDCONO</code>) to retrieve the company name (<code>ACNAME</code>).</li> <li> <p>Initializes debit and credit accumulators (<code>L4DR</code>, <code>L4CR</code>) to 0.</p> </li> <li> <p>Check Year/Period for Printing:</p> </li> <li>Compares the year/period field (<code>CDYYPD</code>, positions 116\u2013119) to 0.</li> <li> <p>If <code>CDYYPD</code> is non-zero (<code>N99</code>), sets indicator <code>98</code> to print the period and year on the journal report; otherwise, sets indicator <code>99</code>.</p> </li> <li> <p>Process Each Journal Record:</p> </li> <li>Reads records from <code>APCDJR</code> (primary input file, indicator <code>01</code>).</li> <li>Checks the credit/debit code (<code>CDCORD</code>, position 12) to identify debit entries (<code>'D'</code>, sets indicator <code>30</code>).</li> <li>Checks the transaction type (<code>CDTYPE</code>, positions 106\u2013115) to identify A/P transactions (<code>'AP      '</code>, sets indicator <code>20</code> for summarization).</li> <li>Accumulates the transaction amount (<code>CDAMT</code>) into <code>L1AMT</code> (level 1 accumulator).</li> <li>Converts the check date (<code>CDCKDT</code>, positions 51\u201356) to a year-month-day format (<code>YMD</code>) by multiplying by 10000.01.</li> <li> <p>Handles Y2K compliance for the check date:</p> <ul> <li>Extracts the year (<code>YY</code>) from <code>YMD</code>.</li> <li>If <code>YY</code> is greater than or equal to <code>Y2KCMP</code> (80), sets the century (<code>CN</code>) to <code>Y2KCEN</code> (19); otherwise, increments <code>Y2KCEN</code> by 1.</li> <li>Formats the date into an 8-digit format (<code>CYMD</code>) by combining <code>CN</code> and <code>YMD</code>.</li> </ul> </li> <li> <p>Write Journal Entries (JRNL Subroutine):</p> </li> <li>Executes for non-summarized records (<code>N20</code>) or summarized A/P records at level 1 break (<code>L1</code> and <code>20</code>).</li> <li>Increments the journal reference number (<code>JRREF#</code>) by 1.</li> <li>Determines the credit/debit code (<code>CORD</code>):<ul> <li>Copies <code>CDCORD</code> to <code>CORD</code>.</li> <li>If <code>L1AMT</code> is negative (indicator <code>10</code>):</li> <li>Switches the sign of <code>L1AMT</code> using <code>Z-SUB</code>.</li> <li>Sets <code>CORD</code> to <code>'C'</code> if <code>CDCORD</code> is <code>'D'</code> (indicator <code>30</code>), or <code>'D'</code> otherwise.</li> </ul> </li> <li>Accumulates amounts:<ul> <li>If <code>CORD</code> is <code>'D'</code> (indicator <code>11</code>), adds <code>L1AMT</code> to <code>L4DR</code> (debit total).</li> <li>Otherwise, adds <code>L1AMT</code> to <code>L4CR</code> (credit total).</li> </ul> </li> <li>Sets <code>JRAMT</code> to <code>L1AMT</code> and resets <code>L1AMT</code> to 0.</li> <li> <p>Writes to the general ledger file (<code>TEMGEN</code>):</p> <ul> <li>For non-summarized records (<code>01</code>, <code>N20</code>):</li> <li>Writes a detail record with fields like <code>CDCONO</code>, <code>CDGLNO</code>, <code>CDJRNL</code>, <code>JRREF#</code>, <code>CORD</code>, <code>CDCHEK</code>, <code>CDDESC</code>, <code>YMD</code>, <code>JRAMT</code>, <code>CDNAME</code>, <code>CYMD</code>.</li> <li>For summarized A/P records (<code>L1</code>, <code>20</code>):</li> <li>Writes a summarized record with a fixed description (<code>'-SUMMARIZED A/P         '</code>), using <code>CDCKDT</code> instead of <code>CDCHEK</code>.</li> </ul> </li> <li> <p>Generate Cash Disbursements Journal Report (APPRINT):</p> </li> <li>Outputs a report to the printer file (<code>APPRINT</code>) with headers, detail lines, and totals:<ul> <li>Headers (level 4 break, <code>L4</code> or <code>OFNL4</code>):</li> <li>Company name (<code>ACNAME</code>), page number (<code>PAGE</code>), date (<code>DATE</code>, formatted as <code>Y</code>), time (<code>TIME</code>), wire transfer description (<code>WIREDS</code>), and journal title.</li> <li>Includes period/year (<code>CDPD</code>, <code>CDPDYY</code>) if <code>CDYYPD</code> is non-zero (indicator <code>98</code>).</li> <li>Column headers for journal reference, paycheck, description, vendor name, G/L number, debit amount, and credit amount.</li> <li>Detail Lines (non-summarized, <code>01</code>, <code>N20</code>):</li> <li>Outputs <code>CDJRNL</code>, <code>JRREF#</code>, check number (<code>CDCHEK</code>), description (<code>CDDESC</code>), vendor name (<code>CDNAME</code>), G/L number (<code>CDGLNO</code>), and amount (<code>JRAMT</code>) as debit (<code>11</code>) or credit (<code>N11</code>).</li> <li>Summarized Lines (level 1 break, <code>L1</code>, <code>20</code>):</li> <li>Outputs <code>CDJRNL</code>, <code>JRREF#</code>, check date (<code>CDCKDTY</code>), fixed description (<code>'-SUMMARIZED A/P         '</code>), G/L number (<code>CDGLNO</code>), and amount (<code>JRAMT</code>) as debit or credit.</li> <li>Totals (level 4 break, <code>T 2</code>, <code>L4</code>):</li> <li>Outputs journal totals with debit (<code>L4DR</code>) and credit (`L audition for free, but I need to log in to view this.</li> </ul> </li> </ol>"},{"location":"accounts-payable/03%20Payment%20Cycle/AP250%20OCL%20Check%20Register/AP256%20RPG/","title":"AP256 RPG","text":"<p>The RPG program <code>AP256.RPG36</code> is invoked by the OCL procedure <code>AP256.OCL36</code>, which is called from the main OCL as part of the Accounts Payable (A/P) Check Register process. This program generates vendor payment detail reports for ACH (Automated Clearing House) vendors, with output spoolflexed to up to four email addresses per vendor. The preprocessing program <code>AP256A.RPG</code> creates the <code>APDTWSC</code> file, which provides the count of email addresses per vendor. Below is a detailed explanation of the process steps, business rules, tables/files used, and external programs called for <code>AP256.RPG36</code>, incorporating the context of <code>AP256A.RPG</code>.</p>"},{"location":"accounts-payable/03%20Payment%20Cycle/AP250%20OCL%20Check%20Register/AP256%20RPG/#process-steps","title":"Process Steps","text":"<p>The <code>AP256.RPG36</code> program processes payment records from the <code>APDTWS</code> file, retrieves vendor and company information, and generates up to four payment detail reports (<code>REPORT1</code> to <code>REPORT4</code>) for emailing to ACH vendors. The processing is structured around three subroutines: <code>ONETIM</code>, <code>APVEND</code>, and <code>TRANS</code>, with calculations and output handled at level breaks. The steps are as follows:</p> <ol> <li>Initialization (ONETIM Subroutine):</li> <li>Executes once at the start of the program (<code>N98</code> condition ensures it runs only if indicator <code>98</code> is off).</li> <li>Sets indicator <code>98</code> to prevent re-execution.</li> <li> <p>Initializes a zero field (<code>ZERO9</code>) to 0 (not used elsewhere in the provided code).</p> </li> <li> <p>Company-Level Processing (Level 2 Break - L2):</p> </li> <li>Executes for each company (<code>ADCO</code>, level break <code>L2</code>).</li> <li>Chains to the <code>APCONT</code> file using the company number (<code>ADCO</code>) to retrieve the company name (<code>ACNAME</code>).<ul> <li>Sets indicator <code>95</code> if the record is not found.</li> </ul> </li> <li> <p>Clears indicators <code>61</code>, <code>62</code>, <code>63</code>, and <code>64</code> (not used elsewhere in the provided code).</p> </li> <li> <p>Vendor-Level Processing (APVEND Subroutine):</p> </li> <li>Executes at level 1 break (<code>L1</code>) for each vendor (<code>ADVEND</code>).</li> <li>Chains to the <code>APVEND</code> file using the company/vendor key (<code>ADCOVN</code>, positions 2\u20138 from <code>APDTWS</code>) to retrieve vendor details (e.g., <code>VNNAME</code>, <code>VNADD1</code>\u2013<code>VNADD4</code>).<ul> <li>Sets indicator <code>99</code> if the vendor record is not found.</li> </ul> </li> <li>Chains to the <code>APDTWSC</code> file (populated by <code>AP256A.RPG</code>) using <code>ADCOVN</code> to retrieve the email account count (<code>ACECNT</code>, positions 9\u201310).<ul> <li>Sets indicator <code>98</code> if the record is not found.</li> </ul> </li> <li>Based on the email account count (<code>ACECNT</code>):<ul> <li>If <code>ACECNT = 4</code>, sets indicators <code>50</code>, <code>51</code>, <code>52</code>, <code>53</code> (all four reports: <code>REPORT1</code>\u2013<code>REPORT4</code>).</li> <li>If <code>ACECNT = 3</code>, sets indicators <code>50</code>, <code>51</code>, <code>52</code> (three reports).</li> <li>If <code>ACECNT = 2</code>, sets indicators <code>50</code>, <code>51</code> (two reports).</li> <li>If <code>ACECNT = 1</code>, sets indicator <code>50</code> (one report).</li> </ul> </li> <li>Checks the vendor category (<code>VNCATG</code>) for <code>'CRDACT'</code> (crude account):<ul> <li>If true, sets indicator <code>60</code> to use crude-specific messages (<code>MSG,4</code>\u2013<code>MSG,6</code>); otherwise, uses standard messages (<code>MSG,1</code>\u2013<code>MSG,3</code>).</li> </ul> </li> <li> <p>Initializes vendor-level accumulators (<code>L1INV$</code>, <code>L1DIS$</code>, <code>L1PYM$</code>) to zero at each <code>L1</code> break.</p> </li> <li> <p>Process Payment Transactions (TRANS Subroutine):</p> </li> <li>Executes for each <code>APDTWS</code> record (indicator <code>01</code>).</li> <li>Calculates payment amounts:<ul> <li>Adds invoice amount (<code>ADINV$</code>, positions 54\u201359, packed) to total printed amount (<code>TOTPRT</code>) and level 1 invoice total (<code>L1INV$</code>).</li> <li>Calculates payment amount (<code>ADPYM$</code>) as <code>ADINV$</code> minus discount (<code>ADDISC</code>, positions 60\u201364, packed).</li> <li>Adds discount (<code>ADDISC</code>) to level 1 discount total (<code>L1DIS$</code>).</li> <li>Adds payment amount (<code>ADPYM$</code>) to level 1 payment total (<code>L1PYM$</code>).</li> </ul> </li> <li> <p>Retrieves email addresses from <code>APVNFMX</code>:</p> <ul> <li>Constructs a key (<code>KEY20</code>, 20 bytes) using <code>ADCOVN</code> (company/vendor) and <code>'ACHE'</code> (form type).</li> <li>Sets the lower limit (<code>SETLL</code>) on <code>APVNFMX</code> using <code>KEY20</code>.</li> <li>Reads <code>APVNFMX</code> records sequentially, looping until end-of-file (<code>10</code>) or all email addresses are retrieved:</li> <li>Skips records with mismatched company/vendor (<code>ADCOVN \u2260 AMCOVN</code>).</li> <li>Skips deleted records (<code>AMDEL = 'D'</code>).</li> <li>Skips records not marked for original sending (<code>AMFMYN \u2260 'Y'</code>).</li> <li>Skips records with incorrect form type (<code>AMFMTY \u2260 'ACHE'</code>).</li> <li>Assigns email addresses (<code>AMEMLA</code>, positions 72\u2013131) to <code>EMALP1</code>\u2013<code>EMALP4</code> based on a counter (<code>COUNT</code>):<ul> <li><code>COUNT = 1</code>: <code>EMALP1</code></li> <li><code>COUNT = 2</code>: <code>EMALP2</code></li> <li><code>COUNT = 3</code>: <code>EMALP3</code></li> <li><code>COUNT = 4</code>: <code>EMALP4</code> (stops after fourth email).</li> </ul> </li> </ul> </li> <li> <p>Level 1 Calculations (L1CALC Subroutine):</p> </li> <li>Executes at level 1 break (<code>L1</code>) for each vendor.</li> <li> <p>Triggers an exception output (<code>EXCPT</code>) to write report data to <code>REPORT1</code>\u2013<code>REPORT4</code> based on indicators <code>50</code>\u2013<code>53</code>.</p> </li> <li> <p>Generate Vendor Payment Reports (REPORT1\u2013REPORT4):</p> </li> <li>Outputs up to four reports (<code>REPORT1</code>, <code>REPORT2</code>, <code>REPORT3</code>, <code>REPORT4</code>) based on indicators <code>50</code>, <code>51</code>, <code>52</code>, <code>53</code>, respectively, sent to output queues (<code>QUSRSYS/APACHOUTQ</code> or <code>QUSRSYS/TESTOUTQ</code>) for spoolflex emailing.</li> <li>Each report includes:<ul> <li>Headers (level 1 break, <code>L1</code>, indicators <code>50</code>\u2013<code>53</code>):</li> <li>Date (<code>UDATE</code>, formatted as <code>Y</code>, position 99).</li> <li>Company number (<code>ADCO</code>, position 9) and vendor number (<code>ADVEND</code>, position 15).</li> <li>Vendor name (<code>VNNAME</code>, position 35) and address (<code>VNADD1</code>\u2013<code>VNADD4</code>, positions 35).</li> <li>Check date (<code>KYCKDTY</code>, position 73, from User Data Structure, positions 434\u2013439).</li> <li>Messages (<code>MSG,1</code>\u2013<code>MSG,3</code> for normal vendors, <code>MSG,4</code>\u2013<code>MSG,6</code> for crude vendors, position 89).</li> <li>Email address (<code>EMALP1</code>\u2013<code>EMALP4</code>, position 62, specific to each report).</li> <li>Detail Lines (indicator <code>01</code>, indicators <code>50</code>\u2013<code>53</code>, lines 31\u201333):</li> <li>Check date (<code>KYCKDTY</code>, position 16), invoice number (<code>ADINVN</code>, position 41).</li> <li>Invoice amount (<code>ADINV$M</code>, position 58), discount (<code>ADDISCM</code>, position 80), payment amount (<code>ADPYM$M</code>, position 116).</li> <li>Totals (level 1 break, <code>L1</code>, indicators <code>50</code>\u2013<code>53</code>, line 3):</li> <li>Total invoice amount (<code>L1INV$M</code>, position 58), total discount (<code>L1DIS$M</code>, position 80), total payment (<code>L1PYM$M</code>, position 116).</li> <li>Continued Message (if line count exceeds 62):</li> <li>Outputs <code>'CONTINUED ON NEXT PAGE'</code> (position 22).</li> </ul> </li> </ol>"},{"location":"accounts-payable/03%20Payment%20Cycle/AP250%20OCL%20Check%20Register/AP256%20RPG/#business-rules","title":"Business Rules","text":"<p>The program enforces the following business rules:</p> <ol> <li>Vendor-Specific Reporting:</li> <li>Processes payment records for ACH vendors only, as indicated by the <code>APDTWS</code> file and <code>APVNFMX</code> form type (<code>AMFMTY = 'ACHE'</code>).</li> <li> <p>Generates up to four reports per vendor, based on the email account count (<code>ACECNT</code>) from <code>APDTWSC</code> (populated by <code>AP256A.RPG</code>).</p> </li> <li> <p>Email Address Retrieval:</p> </li> <li>Retrieves only valid email addresses from <code>APVNFMX</code> where:<ul> <li>Company/vendor key matches (<code>ADCOVN = AMCOVN</code>).</li> <li>Form type is <code>'ACHE'</code>.</li> <li>Record is not deleted (<code>AMDEL \u2260 'D'</code>).</li> <li>Record is marked for original sending (<code>AMFMYN = 'Y'</code>).</li> </ul> </li> <li> <p>Limits to a maximum of four email addresses per vendor (<code>EMALP1</code>\u2013<code>EMALP4</code>).</p> </li> <li> <p>Crude vs. Normal Vendors:</p> </li> <li>Identifies crude vendors by checking <code>VNCATG = 'CRDACT'</code> in <code>APVEND</code>.</li> <li>Uses distinct message sets:<ul> <li>Normal vendors (<code>N60</code>): <code>MSG,1</code>\u2013<code>MSG,3</code> (e.g., \"THE INVOICES LISTED BELOW WERE PAID BY ARG THROUGH ACH ON MM/DD/YY.\").</li> <li>Crude vendors (<code>60</code>): <code>MSG,4</code>\u2013<code>MSG,6</code> (e.g., \"THIS EMAIL IS NOTIFICATION THAT A DEPOSIT WILL BE MADE INTO YOUR ACCOUNT.\" with a reference to <code>crudestatements@amref.com</code>).</li> </ul> </li> <li> <p>Added on 5-01-24 by Marty Greenberg to differentiate messaging.</p> </li> <li> <p>Payment Calculations:</p> </li> <li>Calculates payment amount (<code>ADPYM$</code>) as invoice amount (<code>ADINV$</code>) minus discount (<code>ADDISC</code>).</li> <li> <p>Accumulates totals at the vendor level (<code>L1INV$</code>, <code>L1DIS$</code>, <code>L1PYM$</code>) for reporting.</p> </li> <li> <p>Report Output:</p> </li> <li>Generates up to four reports per vendor, each sent to a different email address (<code>EMALP1</code>\u2013<code>EMALP4</code>) via spoolflex.</li> <li>Includes vendor details (name, address), payment details (invoice, amounts), and totals.</li> <li>Handles pagination by including a continuation message if the report exceeds 62 lines.</li> <li> <p>Added support for four email addresses on 5-13-19 by Marty Greenberg (previously two).</p> </li> <li> <p>Error Handling:</p> </li> <li>Skips invalid <code>APVNFMX</code> records (deleted, non-ACH, or non-original).</li> <li> <p>Proceeds without error logging if vendor (<code>APVEND</code>), control (<code>APDTWSC</code>), or company (<code>APCONT</code>) records are not found, relying on indicators (<code>95</code>, <code>98</code>, <code>99</code>).</p> </li> <li> <p>Preprocessing Dependency:</p> </li> <li>Relies on <code>AP256A.RPG</code> to populate <code>APDTWSC</code> with the email account count (<code>ACECNT</code>) for each vendor, ensuring the correct number of reports is generated.</li> </ol>"},{"location":"accounts-payable/03%20Payment%20Cycle/AP250%20OCL%20Check%20Register/AP256%20RPG/#tablesfiles-used","title":"Tables/Files Used","text":"<p>The program interacts with the following files, as defined in the OCL and RPG source:</p>"},{"location":"accounts-payable/03%20Payment%20Cycle/AP250%20OCL%20Check%20Register/AP256%20RPG/#ap256-file-summary","title":"AP256 File Summary","text":"Logical Name Label Usage Disposition Record Length APDTWS ?9?APDT?WS? Input: ACH payment data (company, vendor, invoice, amounts, check date). Input (IP) 256 APDTWSC ?9?APDT?WS?C Input: ACH vendor control (email account count, populated by AP256A). Input (IF) 10 APVEND ?9?APVEND Input: Vendor master (name, address, category, ACH details). Input (IF) 579 APVNFMX ?9?APVNFMX Input: Vendor email/fax details (email addresses, form type). Input (IF) 266 APCONT ?9?APCONT Input: A/P control (company name). Input (IF) 256 REPORT1 N/A Output: Payment detail report for first email address. Output (O) 132 REPORT2 N/A Output: Payment detail report for second email address. Output (O) 132 REPORT3 N/A Output: Payment detail report for third email address. Output (O) 132 REPORT4 N/A Output: Payment detail report for fourth email address. Output (O) 132"},{"location":"accounts-payable/03%20Payment%20Cycle/AP250%20OCL%20Check%20Register/AP256%20RPG/#key-fields","title":"Key Fields","text":"<ul> <li>APDTWS:</li> <li><code>ADCO</code> (company number, positions 2\u20133, level 2 break)</li> <li><code>ADVEND</code> (vendor number, positions 4\u20138, level 1 break)</li> <li><code>ADCOVN</code> (company/vendor key, positions 2\u20138)</li> <li><code>ADINVN</code> (invoice number, positions 9\u201328)</li> <li><code>ADINV$</code> (invoice amount, packed, positions 54\u201359)</li> <li><code>ADDISC</code> (discount, packed, positions 60\u201364)</li> <li><code>ADLPAM</code> (payment amount, packed, positions 65\u201370)</li> <li><code>ADDATE</code> (date, positions 71\u201376)</li> <li><code>ADVCH#</code> (check number, positions 77\u201381)</li> <li>APDTWSC:</li> <li><code>ACCO</code> (company number, positions 2\u20133)</li> <li><code>ACVEND</code> (vendor number, positions 4\u20138)</li> <li><code>ACECNT</code> (email account count, positions 9\u201310)</li> <li>APVEND:</li> <li><code>VNCO</code> (company number, positions 2\u20133)</li> <li><code>VNVEND</code> (vendor number, positions 4\u20138)</li> <li><code>VNNAME</code> (vendor name, positions 9\u201338)</li> <li><code>VNADD1</code>\u2013<code>VNADD4</code> (address lines, positions 39\u2013158)</li> <li><code>VNCATG</code> (vendor category, positions 495\u2013500)</li> <li>APVNFMX:</li> <li><code>AMCONO</code> (company number, positions 2\u20133)</li> <li><code>AMCVEN</code> (vendor number, positions 4\u20138)</li> <li><code>AMCOVN</code> (company/vendor key, positions 2\u20138)</li> <li><code>AMFMTY</code> (form type, positions 9\u201312, must be <code>'ACHE'</code>)</li> <li><code>AMEMLA</code> (email address, positions 72\u2013131)</li> <li><code>AMFMYN</code> (send original flag, position 152)</li> <li>APCONT:</li> <li><code>ACCONO</code> (company number, positions 2\u20133)</li> <li><code>ACNAME</code> (company name, positions 4\u201333)</li> <li>User Data Structure (UDS):</li> <li><code>KYCKDT</code> (check date, positions 434\u2013439)</li> </ul>"},{"location":"accounts-payable/03%20Payment%20Cycle/AP250%20OCL%20Check%20Register/AP256%20RPG/#external-programs-called","title":"External Programs Called","text":"<p>The <code>AP256.RPG36</code> program does not explicitly call any external programs within its code. However, it relies on the preprocessing program <code>AP256A.RPG</code>, which is executed by the OCL procedure <code>AP256A</code> to populate the <code>APDTWSC</code> file with the email account count (<code>ACECNT</code>) for each vendor. The <code>AP256A.RPG</code> program is critical for ensuring that <code>AP256.RPG36</code> generates the correct number of reports based on the number of email addresses.</p>"},{"location":"accounts-payable/03%20Payment%20Cycle/AP250%20OCL%20Check%20Register/AP256%20RPG/#notes","title":"Notes","text":"<ul> <li>OCL Context:</li> <li>The OCL procedure <code>AP256A</code> creates the <code>APDTWSC</code> file with a capacity of 50 records and a record length of 10 bytes, using the <code>BLDFILE</code> command.</li> <li>The OCL procedure <code>AP256</code> loads <code>AP256.RPG36</code> and configures output queues (<code>QUSRSYS/APACHOUTQ</code> or <code>QUSRSYS/TESTOUTQ</code>) for the report files (<code>REPORT1</code>\u2013<code>REPORT4</code>) to support spoolflex emailing.</li> <li>Modifications:</li> <li>5-13-19 (Marty Greenberg): Increased email accounts from two to four, adding support for <code>REPORT3</code> and <code>REPORT4</code>.</li> <li>5-01-24 (Marty Greenberg): Updated messages to differentiate between crude (<code>CRDACT</code>) and normal vendors, with specific email instructions for crude vendors (e.g., referencing <code>crudestatements@amref.com</code>).</li> <li>Report Output:</li> <li>Reports are formatted for spoolflex emailing, with each report (<code>REPORT1</code>\u2013<code>REPORT4</code>) sent to a different email address (<code>EMALP1</code>\u2013<code>EMALP4</code>).</li> <li>Includes vendor details, payment details (invoice number, amounts, discounts), and totals, with pagination handling for reports exceeding 62 lines.</li> <li>Preprocessing Dependency:</li> <li>The <code>APDTWSC</code> file, populated by <code>AP256A.RPG</code>, provides the email account count (<code>ACECNT</code>), which determines how many reports (<code>REPORT1</code>\u2013<code>REPORT4</code>) are generated for each vendor.</li> <li>Error Handling:</li> <li>Skips invalid <code>APVNFMX</code> records (deleted, non-ACH, or non-original) and continues processing without logging errors.</li> <li>Handles missing <code>APVEND</code>, <code>APDTWSC</code>, or <code>APCONT</code> records gracefully using indicators (<code>95</code>, <code>98</code>, <code>99</code>).</li> <li>Business Context:</li> <li>Designed for ACH vendors, ensuring payment notifications are emailed efficiently with tailored messaging for crude vendors.</li> <li>Supports up to four email addresses per vendor, reflecting modernized ACH notification processes.</li> </ul> <p>This summary provides a comprehensive overview of the <code>AP256.RPG36</code> program's functionality, business logic, file interactions, and dependency on <code>AP256A.RPG</code>. Let me know if you need further clarification or additional analysis!</p>"},{"location":"accounts-payable/03%20Payment%20Cycle/AP250%20OCL%20Check%20Register/AP256A/","title":"AP256A","text":"<p>The RPG program <code>AP256A.RPG</code> is invoked by the OCL procedure <code>AP256A</code> as a preprocessing step before <code>AP256.RPG36</code> in the Accounts Payable (A/P) Check Register process. Its primary purpose is to create or update the <code>APDTWSC</code> file, which stores the count of email addresses for ACH vendors based on records in the <code>APVNFMX</code> file. This information is used by <code>AP256.RPG36</code> to generate vendor payment detail reports. Below is a detailed explanation of the process steps, business rules, tables/files used, and external programs called, as requested.</p>"},{"location":"accounts-payable/03%20Payment%20Cycle/AP250%20OCL%20Check%20Register/AP256A/#process-steps","title":"Process Steps","text":"<p>The <code>AP256A.RPG</code> program processes payment records from the <code>APDTWS</code> file, retrieves email information from the <code>APVNFMX</code> file, and writes or updates records in the <code>APDTWSC</code> file with the count of valid ACH email addresses for each vendor. The program is structured around a single main processing loop without explicit subroutines. The steps are as follows:</p> <ol> <li>Process Each Payment Record:</li> <li>Reads records from the primary input file <code>APDTWS</code> (indicator <code>01</code>).</li> <li>For each record, constructs a key (<code>KEY20</code>, 20 bytes) to access the <code>APVNFMX</code> file:<ul> <li>Copies the company/vendor key (<code>ADCOVN</code>, positions 2\u20138) to <code>KEY20</code>.</li> <li>Appends the form type <code>'ACHE'</code> (ACH email) to a temporary key (<code>KEY13</code>) and combines it into <code>KEY20</code>.</li> </ul> </li> <li> <p>Sets the lower limit (<code>SETLL</code>) on <code>APVNFMX</code> using <code>KEY20</code> to position the file pointer.</p> </li> <li> <p>Count Valid Email Addresses:</p> </li> <li>Initializes a counter (<code>COUNT</code>) to zero.</li> <li> <p>Reads <code>APVNFMX</code> records sequentially, looping until end-of-file (indicator <code>10</code>) or a mismatch occurs:</p> <ul> <li>Skips records where the company/vendor key (<code>ADCOVN</code>) does not match <code>AMCOVN</code> (from <code>APVNFMX</code>).</li> <li>Skips records where the form type (<code>AMFMTY</code>) is not <code>'ACHE'</code>.</li> <li>Increments <code>COUNT</code> for each valid record (matching <code>ADCOVN</code> and <code>AMFMTY = 'ACHE'</code>).</li> <li>Continues looping (<code>GOTO AGAIN</code>) until all relevant records are processed or a mismatch/end is reached.</li> </ul> </li> <li> <p>Update or Add APDTWSC Record:</p> </li> <li>Chains to the <code>APDTWSC</code> file using <code>ADCOVN</code> to check for an existing record (sets indicator <code>98</code> if not found).</li> <li>Writes or updates a record in <code>APDTWSC</code>:<ul> <li>If no record exists (<code>98</code> on), writes a new record (<code>DADD</code>) with:</li> <li><code>ADCOVN</code> (company/vendor key, positions 2\u20138).</li> <li><code>COUNT</code> (number of valid email addresses, packed, positions 9\u201310).</li> <li>If a record exists (<code>N98</code>), updates the existing record with the new <code>COUNT</code> value.</li> </ul> </li> </ol>"},{"location":"accounts-payable/03%20Payment%20Cycle/AP250%20OCL%20Check%20Register/AP256A/#business-rules","title":"Business Rules","text":"<p>The program enforces the following business rules:</p> <ol> <li>Email Address Counting:</li> <li>Counts only <code>APVNFMX</code> records where:<ul> <li>The company/vendor key matches (<code>ADCOVN = AMCOVN</code>).</li> <li>The form type is <code>'ACHE'</code> (indicating ACH email notifications).</li> </ul> </li> <li> <p>The count (<code>COUNT</code>) represents the number of valid email addresses for the vendor, which will be used by <code>AP256.RPG36</code> to determine how many reports to generate (up to four).</p> </li> <li> <p>Record Matching:</p> </li> <li>Uses <code>ADCOVN</code> (company number + vendor number) as the key to match records between <code>APDTWS</code>, <code>APVNFMX</code>, and <code>APDTWSC</code>.</li> <li> <p>Skips non-matching or irrelevant records in <code>APVNFMX</code> to ensure only ACH-related email addresses are counted.</p> </li> <li> <p>APDTWSC File Maintenance:</p> </li> <li>Creates a new record in <code>APDTWSC</code> if no matching record exists for the company/vendor key (<code>98</code> on).</li> <li>Updates the existing record if found (<code>N98</code>), overwriting the email count (<code>COUNT</code>).</li> <li> <p>Ensures the <code>APDTWSC</code> file contains one record per company/vendor with the correct email address count.</p> </li> <li> <p>No Error Logging:</p> </li> <li> <p>The program does not log errors or generate output reports if records are not found or skipped; it silently continues processing.</p> </li> <li> <p>Single-Pass Processing:</p> </li> <li>Processes each <code>APDTWS</code> record once, calculating the email count and updating <code>APDTWSC</code> immediately.</li> </ol>"},{"location":"accounts-payable/03%20Payment%20Cycle/AP250%20OCL%20Check%20Register/AP256A/#tablesfiles-used","title":"Tables/Files Used","text":"<p>The program interacts with the following files, as defined in the OCL and RPG source:</p> Logical Name Label Usage Disposition Record Length APDTWS ?9?APDT?WS? Input: ACH payment data (company, vendor, invoice, amounts, check date). Input (IP) 256 APVNFMX ?9?APVNFMX Input: Vendor email/fax details (email addresses, form type). Input (IF) 266 APDTWSC ?9?APDT?WS?C Output/Update: ACH vendor control (company/vendor key, email count). Update (UF) 10 <p>Key Fields: - APDTWS:   - <code>ADCO</code> (company number, positions 2\u20133)   - <code>ADVEND</code> (vendor number, positions 4\u20138)   - <code>ADCOVN</code> (company/vendor key, positions 2\u20138) - APVNFMX:   - <code>AMCONO</code> (company number, positions 2\u20133)   - <code>AMCVEN</code> (vendor number, positions 4\u20138)   - <code>AMCOVN</code> (company/vendor key, positions 2\u20138)   - <code>AMFMTY</code> (form type, positions 9\u201312, must be <code>'ACHE'</code>) - APDTWSC:   - <code>ADCOVN</code> (company/vendor key, positions 2\u20138)   - <code>COUNT</code> (email address count, packed, positions 9\u201310)</p>"},{"location":"accounts-payable/03%20Payment%20Cycle/AP250%20OCL%20Check%20Register/AP256A/#external-programs-called","title":"External Programs Called","text":"<p>The <code>AP256A.RPG</code> program does not explicitly call any external programs. All processing is handled internally within the main loop. The program is a preprocessing step for <code>AP256.RPG36</code>, which relies on the <code>APDTWSC</code> file being populated with the correct email address counts.</p>"},{"location":"accounts-payable/03%20Payment%20Cycle/AP250%20OCL%20Check%20Register/AP256A/#notes","title":"Notes","text":"<ul> <li>OCL Context:</li> <li>The OCL procedure <code>AP256A</code> creates the <code>APDTWSC</code> file with a capacity of 50 records and a record length of 10 bytes, using the <code>BLDFILE</code> command.</li> <li>The <code>RETAIN-T</code> parameter ensures the file is temporary, and <code>DISP-SHR</code> allows shared access for <code>APVNFMX</code>.</li> <li>Purpose:</li> <li>The program prepares the <code>APDTWSC</code> file by counting valid ACH email addresses per vendor, enabling <code>AP256.RPG36</code> to generate the appropriate number of payment detail reports (up to four per vendor).</li> <li>Error Handling:</li> <li>Skips non-matching or non-ACH records in <code>APVNFMX</code> without logging errors.</li> <li>Handles missing <code>APDTWSC</code> records by creating new ones (<code>DADD</code>) when necessary.</li> <li>Modifications:</li> <li>No explicit modification history is noted in the provided code, but the program aligns with the <code>AP256.RPG36</code> enhancements (e.g., supporting up to four email addresses, added 5-13-19).</li> <li>Efficiency:</li> <li>Uses <code>SETLL</code> and sequential reads to efficiently count email addresses, minimizing file access overhead.</li> <li>Writes or updates <code>APDTWSC</code> records only once per vendor, reducing I/O operations.</li> </ul> <p>This summary provides a comprehensive overview of the <code>AP256A.RPG</code> program's functionality, business logic, file interactions, and lack of external program calls. Let me know if you need further clarification or additional analysis!</p>"},{"location":"accounts-payable/05%20Clear%20Checks%20%26%20Reconciliation/AP190%20OCL%20Summary/","title":"AP190 OCL Summary","text":""},{"location":"accounts-payable/05%20Clear%20Checks%20%26%20Reconciliation/AP190%20OCL%20Summary/#list-of-use-cases-implemented-by-the-ap190ap195-program-suite","title":"List of Use Cases Implemented by the AP190/AP195 Program Suite","text":"<p>The <code>AP190.ocl36</code>, <code>AP190.rpg36</code>, and <code>AP195.rpg36</code> programs collectively implement a single primary use case for Accounts Payable (A/P) check reconciliation:</p> <ol> <li>A/P Cancelled Check Reconciliation and Reporting:</li> <li>Description: This use case allows users to enter, validate, and store cancelled check reconciliation data (company number, bank G/L number, check number, clear date, and clear amount) and generate a printed report summarizing the reconciled checks, grouped by company and bank G/L account with totals.</li> <li>Components:<ul> <li><code>AP190.ocl36</code>: Orchestrates file setup and program execution (calls <code>AP190</code> and <code>AP195</code>).</li> <li><code>AP190.rpg36</code>: Handles interactive data entry and validation through two screens (<code>AP190S1</code> for company, bank G/L, and check number; <code>AP190S2</code> for clear date and amount), updating the reconciliation transaction file (<code>APCRTR</code>).</li> <li><code>AP195.rpg36</code>: Generates a report listing cancelled checks with totals by bank G/L and company.</li> </ul> </li> </ol>"},{"location":"accounts-payable/05%20Clear%20Checks%20%26%20Reconciliation/AP190%20OCL%20Summary/#function-requirement-document-for-ap-cancelled-check-reconciliation","title":"Function Requirement Document for A/P Cancelled Check Reconciliation","text":""},{"location":"accounts-payable/05%20Clear%20Checks%20%26%20Reconciliation/AP190%20OCL%20Summary/#function-requirement-document-ap-cancelled-check-reconciliation","title":"Function Requirement Document: A/P Cancelled Check Reconciliation","text":""},{"location":"accounts-payable/05%20Clear%20Checks%20%26%20Reconciliation/AP190%20OCL%20Summary/#overview","title":"Overview","text":"<p>The A/P Cancelled Check Reconciliation function processes and validates cancelled check data, storing reconciliation records and generating a summary report grouped by company and bank G/L account.</p>"},{"location":"accounts-payable/05%20Clear%20Checks%20%26%20Reconciliation/AP190%20OCL%20Summary/#inputs","title":"Inputs","text":"<ul> <li>Company Number (<code>CONO</code>, 2 bytes): Identifies the company.</li> <li>Bank G/L Number (<code>BKGL</code>, 8 bytes): Specifies the bank general ledger account.</li> <li>Check Number (<code>CHK#</code>, 6 bytes): Unique identifier for the check.</li> <li>Clear Date (<code>CLDT</code>, 6 digits, MMDDYY): Date the check cleared.</li> <li>Clear Amount (<code>CLAM</code>, 11.2 numeric): Amount cleared for the check.</li> </ul>"},{"location":"accounts-payable/05%20Clear%20Checks%20%26%20Reconciliation/AP190%20OCL%20Summary/#outputs","title":"Outputs","text":"<ul> <li>Reconciliation Records: Stored in <code>APCRTR</code> file with company, bank G/L, check number, clear date, and clear amount.</li> <li>Printed Report: Lists cancelled checks with check number, clear date, clear amount, and totals by bank G/L and company, including company name, date, time, and page number.</li> </ul>"},{"location":"accounts-payable/05%20Clear%20Checks%20%26%20Reconciliation/AP190%20OCL%20Summary/#process-steps","title":"Process Steps","text":"<ol> <li>Validate Inputs:</li> <li>Verify <code>CONO</code> exists in <code>APCONT</code> and is not deleted (<code>ACDEL \u2260 'D'</code>).</li> <li>Verify <code>CONO</code> + <code>BKGL</code> exists in <code>GLMAST</code> and is not deleted (<code>GLDEL \u2260 'D'</code>).</li> <li>Verify <code>CHK#</code> exists in <code>APCHKR</code>, is open (<code>AMCODE = 'O'</code>), and not deleted (<code>D</code>), reconciled (<code>R</code>), or voided (<code>V</code>).</li> <li>Validate <code>CLDT</code> as a valid date (MMDDYY, month 1\u201312, day 1\u201331 based on month/leap year).</li> <li> <p>Ensure <code>CLAM</code> matches the check amount (<code>AMCKAM</code>) from <code>APCHKR</code>.</p> </li> <li> <p>Store Reconciliation Data:</p> </li> <li>Write or update <code>APCRTR</code> with <code>CONO</code>, <code>BKGL</code>, <code>CHK#</code>, <code>CLDT</code>, and <code>CLAM</code>.</li> <li> <p>Support deletion of existing <code>APCRTR</code> records.</p> </li> <li> <p>Generate Report:</p> </li> <li>Read <code>APCRTR</code> records, group by <code>CONO</code> and <code>BKGL</code>.</li> <li>Retrieve company name (<code>ACNAME</code>) from <code>APCONT</code>.</li> <li>Print headers (company name, bank G/L, date, time, page).</li> <li>List check details (<code>CHK#</code>, <code>CLDT</code>, <code>CLAM</code>).</li> <li>Calculate and print totals:<ul> <li>Bank G/L total (<code>L1CLAM</code>): Sum of <code>CLAM</code> for each bank G/L.</li> <li>Company total (<code>L2CLAM</code>): Sum of <code>L1CLAM</code> for each company.</li> </ul> </li> <li>Output after 21 detail lines or at group breaks.</li> </ol>"},{"location":"accounts-payable/05%20Clear%20Checks%20%26%20Reconciliation/AP190%20OCL%20Summary/#business-rules","title":"Business Rules","text":"<ol> <li>Validation:</li> <li>Invalid <code>CONO</code>, <code>BKGL</code>, or <code>CHK#</code> prevents processing.</li> <li><code>CLDT</code> must be a valid date, accounting for leap years (February 28/29, others 30/31 days).</li> <li><code>CLAM</code> must equal <code>AMCKAM</code> from <code>APCHKR</code>.</li> <li>Data Integrity:</li> <li>Only open checks (<code>AMCODE = 'O'</code>) are processed.</li> <li>Deleted records in <code>APCONT</code> or <code>GLMAST</code> are invalid.</li> <li>Reporting:</li> <li>Group by company and bank G/L, with subtotals and company totals.</li> <li>Include company name if available; otherwise, proceed without it.</li> <li>Format dates (MMDDYY) and amounts (11.2 decimal) for readability.</li> <li>Record Management:</li> <li>Allow updates or deletions in <code>APCRTR</code>.</li> <li>Ensure unique keys (<code>CONO</code> + <code>BKGL</code> + <code>CHK#</code>) in <code>APCRTR</code>.</li> </ol>"},{"location":"accounts-payable/05%20Clear%20Checks%20%26%20Reconciliation/AP190%20OCL%20Summary/#calculations","title":"Calculations","text":"<ul> <li>Date Validation:</li> <li>Extract month, day, year from <code>CLDT</code> (MMDDYY).</li> <li>Validate month (1\u201312).</li> <li>Validate day: February (28 or 29 for leap years), April/June/September/November (30), others (31).</li> <li>Leap year: If year divisible by 4 (or by 400 for century years), allow 29 days for February; else, 28.</li> <li>Construct 8-digit date (<code>CLDT8</code>, YYYYMMDD) using century (<code>Y2KCEN</code>) for Y2K compliance.</li> <li>Totals:</li> <li><code>L1CLAM</code> = Sum of <code>CLAM</code> for each bank G/L group.</li> <li><code>L2CLAM</code> = Sum of <code>L1CLAM</code> for each company.</li> </ul>"},{"location":"accounts-payable/05%20Clear%20Checks%20%26%20Reconciliation/AP190%20OCL%20Summary/#data-sources","title":"Data Sources","text":"<ul> <li>APCRTR: Stores reconciliation data (key: <code>CONO</code> + <code>BKGL</code> + <code>CHK#</code>).</li> <li>APCONT: Provides company name (<code>ACNAME</code>) and deletion flag (<code>ACDEL</code>).</li> <li>GLMAST: Validates bank G/L (<code>GLDEL</code>, <code>GLDESC</code>).</li> <li>APCHKR: Provides check details (<code>AMCODE</code>, <code>AMVEN#</code>, <code>AMCKAM</code>, <code>AMCKDT</code>, <code>AMVNNM</code>).</li> </ul>"},{"location":"accounts-payable/05%20Clear%20Checks%20%26%20Reconciliation/AP190%20OCL/","title":"AP190 OCL","text":"<p>The provided document is an Operation Control Language (OCL) program, specifically <code>AP190.ocl36.txt</code>, used for Accounts Payable (A/P) check reconciliation in an IBM System/3x or AS/400 environment. Below, I\u2019ll break down the process steps, identify the external programs called, and list the tables (files) used.</p>"},{"location":"accounts-payable/05%20Clear%20Checks%20%26%20Reconciliation/AP190%20OCL/#process-steps-of-the-ap190-ocl-program","title":"Process Steps of the AP190 OCL Program","text":"<p>OCL is a scripting language used to control job execution, file operations, and program invocation on IBM midrange systems. The program <code>AP190</code> handles A/P check reconciliation, performing file setup, validation, and editing. Here\u2019s a step-by-step explanation of the process:</p> <ol> <li>Initial File Setup (BLDFILE):</li> <li> <p><code>// IFF DATAF1-?9?APCR?WS? BLDFILE ?9?APCR?WS?,I,RECORDS,500,80,,,2,16,DFILE,,50</code></p> <ul> <li>This command checks if the file <code>?9?APCR?WS?</code> (a work file for A/P check reconciliation) exists. If not, it creates it using the <code>BLDFILE</code> operation.</li> <li>Parameters:</li> <li><code>I</code>: Input mode.</li> <li><code>RECORDS,500</code>: Allocates space for 500 records.</li> <li><code>80</code>: Record length of 80 bytes.</li> <li><code>2,16</code>: Likely specifies key field attributes (e.g., key starts at position 2, length 16).</li> <li><code>DFILE,,50</code>: Indicates a disk file with a block size or extent of 50.</li> <li>Purpose: Ensures the work file <code>?9?APCR?WS?</code> is available for processing.</li> </ul> </li> <li> <p>Load and Execute AP190 Program:</p> </li> <li><code>// LOAD AP190</code></li> <li><code>// FILE NAME-APCRTR,LABEL-?9?APCR?WS?,EXTEND-100</code></li> <li><code>// FILE NAME-APCONT,LABEL-?9?APCONT,DISP-SHR</code></li> <li><code>// FILE NAME-GLMAST,LABEL-?9?GLMAST,DISP-SHR</code></li> <li><code>// FILE NAME-APCHKR,LABEL-?9?APCHKR,DISP-SHR</code></li> <li> <p><code>// RUN</code></p> <ul> <li>LOAD AP190: Loads the <code>AP190</code> program (likely an RPG program) into memory.</li> <li>FILE Definitions:</li> <li><code>APCRTR</code> (mapped to <code>?9?APCR?WS?</code>): The work file for check reconciliation transactions, with an extension of 100 records.</li> <li><code>APCONT</code> (mapped to <code>?9?APCONT</code>): A control file, opened in shared mode (<code>DISP-SHR</code>).</li> <li><code>GLMAST</code> (mapped to <code>?9?GLMAST</code>): General Ledger master file, opened in shared mode.</li> <li><code>APCHKR</code> (mapped to <code>?9?APCHKR</code>): A/P check reconciliation file, opened in shared mode.</li> <li>RUN: Executes the <code>AP190</code> program, which processes the check reconciliation data using these files.</li> <li>Purpose: The <code>AP190</code> program likely validates or processes check reconciliation data, updating or reading from the specified files.</li> </ul> </li> <li> <p>Conditional Check for File Existence:</p> </li> <li> <p><code>// IF ?F'A,?9?APCR?WS?'?/00000000 GOTO END</code></p> <ul> <li>This checks if the work file <code>?9?APCR?WS?</code> is empty or has no records (condition <code>?F'A</code> checks file attributes, and <code>/00000000</code> likely indicates zero records).</li> <li>If true, the program jumps to the <code>END</code> tag, skipping further processing.</li> <li>Purpose: Prevents unnecessary execution if there\u2019s no data to process.</li> </ul> </li> <li> <p>Display Message:</p> </li> <li> <p><code>// * 'A/P CHECK RECONCILIATION EDIT EXECUTING'</code></p> <ul> <li>Outputs a message to the console or log indicating that the A/P check reconciliation edit process is running.</li> <li>Purpose: Provides feedback to the operator about the program\u2019s status.</li> </ul> </li> <li> <p>Load and Execute AP195 Program:</p> </li> <li><code>// LOAD AP195</code></li> <li><code>// FILE NAME-APCRTR,LABEL-?9?APCR?WS?</code></li> <li><code>// FILE NAME-APCONT,LABEL-?9?APCONT,DISP-SHR</code></li> <li> <p><code>// RUN</code></p> <ul> <li>LOAD AP195: Loads the <code>AP195</code> program (another RPG program) into memory.</li> <li>FILE Definitions:</li> <li><code>APCRTR</code> (mapped to <code>?9?APCR?WS?</code>): Reuses the work file from the previous step.</li> <li><code>APCONT</code> (mapped to <code>?9?APCONT</code>): Reuses the control file in shared mode.</li> <li>RUN: Executes the <code>AP195</code> program.</li> <li>Purpose: The <code>AP195</code> program likely performs additional processing or validation on the check reconciliation data, such as generating reports or finalizing edits.</li> </ul> </li> <li> <p>End of Program:</p> </li> <li><code>// TAG END</code><ul> <li>Marks the end of the program execution.</li> <li>Purpose: Terminates the OCL script.</li> </ul> </li> </ol>"},{"location":"accounts-payable/05%20Clear%20Checks%20%26%20Reconciliation/AP190%20OCL/#external-programs-called","title":"External Programs Called","text":"<p>The OCL program invokes the following external programs: 1. AP190: The main program for A/P check reconciliation, likely responsible for initial data processing or validation. 2. AP195: A secondary program, possibly for further editing, reporting, or finalizing the reconciliation process.</p>"},{"location":"accounts-payable/05%20Clear%20Checks%20%26%20Reconciliation/AP190%20OCL/#tables-files-used","title":"Tables (Files) Used","text":"<p>The program references the following files (tables): 1. APCRTR (labeled <code>?9?APCR?WS?</code>):    - A work file used for check reconciliation transactions.    - Created or extended as needed. 2. APCONT (labeled <code>?9?APCONT</code>):    - A control file, likely containing configuration or reference data for A/P processing.    - Opened in shared mode (<code>DISP-SHR</code>). 3. GLMAST (labeled <code>?9?GLMAST</code>):    - General Ledger master file, containing financial account data.    - Opened in shared mode (<code>DISP-SHR</code>). 4. APCHKR (labeled <code>?9?APCHKR</code>):    - A/P check reconciliation file, likely storing check details or reconciliation status.    - Opened in shared mode (<code>DISP-SHR</code>).</p>"},{"location":"accounts-payable/05%20Clear%20Checks%20%26%20Reconciliation/AP190%20OCL/#summary","title":"Summary","text":"<p>The <code>AP190</code> OCL program orchestrates an A/P check reconciliation process by: 1. Creating or verifying the work file <code>APCRTR</code>. 2. Running the <code>AP190</code> program to process reconciliation data using <code>APCRTR</code>, <code>APCONT</code>, <code>GLMAST</code>, and <code>APCHKR</code>. 3. Skipping further execution if no data is present in <code>APCRTR</code>. 4. Running the <code>AP195</code> program for additional processing or reporting using <code>APCRTR</code> and <code>APCONT</code>. 5. Displaying status messages for operator feedback.</p> <p>External Programs: <code>AP190</code>, <code>AP195</code>. Files Used: <code>APCRTR</code>, <code>APCONT</code>, <code>GLMAST</code>, <code>APCHKR</code>.</p>"},{"location":"accounts-payable/05%20Clear%20Checks%20%26%20Reconciliation/AP190%20RPG/","title":"AP190 RPG","text":"<p>The provided RPG program, <code>AP190.rpg36</code>, is an RPG II or RPG/400 program designed for Accounts Payable (A/P) cancelled check entry and reconciliation, executed from the <code>AP190.ocl36</code> OCL program. Below, I\u2019ll explain the process steps, business rules, tables (files) used, and external programs called.</p>"},{"location":"accounts-payable/05%20Clear%20Checks%20%26%20Reconciliation/AP190%20RPG/#process-steps-of-the-ap190-rpg-program","title":"Process Steps of the AP190 RPG Program","text":"<p>The program facilitates data entry and validation for cancelled checks through two display formats (<code>AP190S1</code> and <code>AP190S2</code>) on a workstation screen, performing checks against various files and updating the A/P check reconciliation work file (<code>APCRTR</code>). Here\u2019s a detailed breakdown of the process steps:</p> <ol> <li>Program Initialization:</li> <li>Header (H) and File (F) Specifications:<ul> <li>Defines the program (<code>AP190</code>) and files: <code>SCREEN</code> (workstation display), <code>APCRTR</code> (update file), <code>APCONT</code> (control file), <code>GLMAST</code> (general ledger master), and <code>APCHKR</code> (check reconciliation file).</li> <li><code>SCREEN</code> uses <code>KINFSR ROLLKY</code> for handling roll keys (page up/down) and <code>KINFDS INFDS</code> for status information.</li> </ul> </li> <li>Indicator Setup:<ul> <li>Lines 0072\u20130074: Initializes indicators (30\u201334, 81\u201382, 90\u201391) to off, ensuring a clean state.</li> <li>Line 0075: Clears the message field (<code>MSG60</code>) to blanks.</li> </ul> </li> <li> <p>Purpose: Prepares the program environment for processing user input and file operations.</p> </li> <li> <p>Handle Roll Keys:</p> </li> <li>Subroutine ROLLKY (Lines 0357\u20130363):<ul> <li>Checks workstation status codes (<code>STATUS</code>) to detect roll forward (up, code 01122, sets indicator 18) or roll backward (down, code 01123, sets indicator 19).</li> </ul> </li> <li>Subroutine ROLLFW (Roll Forward) (Lines 0365\u20130380):<ul> <li>Reads the next record from <code>APCRTR</code> using <code>SCKEY</code> (search key, company + bank G/L + check number).</li> <li>If a record is found (<code>N60</code>), moves the key (<code>ATKEY</code>) to <code>SCKEY</code>, calls <code>S1</code> to display, and sets indicators.</li> <li>If end-of-file (<code>60</code>), displays message \u201cEND OF FILE HAS BEEN REACHED\u201d and clears fields.</li> </ul> </li> <li>Subroutine ROLLBW (Roll Backward) (Lines 0382\u20130394):<ul> <li>Reads the previous record from <code>APCRTR</code> using <code>SCKEY</code>.</li> <li>Similar logic to <code>ROLLFW</code>, but displays \u201cBEGIN OF FILE HAS BEEN REACHED\u201d if no prior record exists.</li> </ul> </li> <li> <p>Purpose: Allows users to navigate through <code>APCRTR</code> records using roll keys.</p> </li> <li> <p>Process Function Keys:</p> </li> <li>KA (Rekey, No Add/Update) (Lines 0080\u20130085):<ul> <li>Calls <code>CLEAR</code> subroutine to reset fields, sets indicators (32, 81 on; 01, 02, 09 off), and jumps to <code>END</code>.</li> </ul> </li> <li>KD (Delete Record) (Lines 0087\u20130092):<ul> <li>Calls <code>DELETE</code> subroutine to remove a record from <code>APCRTR</code>, sets indicators, and jumps to <code>END</code>.</li> </ul> </li> <li>KG (End of Job) (Lines 0094\u20130099):<ul> <li>Sets the Last Record (<code>LR</code>) indicator to terminate the program, clears indicators, and jumps to <code>END</code>.</li> </ul> </li> <li> <p>Purpose: Handles user commands for rekeying, deleting, or ending the job.</p> </li> <li> <p>Screen 1 Processing (AP190S1, Subroutine S1) (Lines 0114\u20130184):</p> </li> <li>Input Validation:<ul> <li>Reads user input: company number (<code>CONO</code>), bank G/L number (<code>BKGL</code>), and check number (<code>CHK#</code>).</li> <li>Company Validation (Lines 0116\u20130123):</li> <li>Chains to <code>APCONT</code> using <code>CONO</code>. If not found (<code>30</code>) or deleted (<code>ACDEL = 'D'</code>), sets error indicators (81, 90), displays \u201cINVALID COMPANY #\u201d, and exits.</li> <li>Moves company name (<code>ACNAME</code>) to <code>CONONM</code> for display.</li> <li>Bank G/L Validation (Lines 0125\u20130135):</li> <li>Constructs <code>GLKEY</code> from <code>CONO</code> and <code>BKGL</code>, chains to <code>GLMAST</code>. If not found (<code>31</code>) or deleted (<code>GLDEL = 'D'</code>), sets error indicators, displays \u201cINVALID BANK G/L #\u201d, and exits.</li> <li>Moves G/L description (<code>GLDESC</code>) to <code>BKGLNM</code>.</li> <li>Check Validation (Lines 0137\u20130172):</li> <li>Chains to <code>APCHKR</code> using <code>SCKEY</code> (company + bank G/L + check #). If not found (<code>32</code>), sets error indicators, displays \u201cCHECK # NOT FOUND\u201d or other status messages based on <code>AMCODE</code>:<ul> <li><code>D</code>: \u201cCHECK WAS PREVIOUSLY DELETED\u201d.</li> <li><code>R</code>: \u201cCHECK IS ALREADY RECONCILED\u201d.</li> <li><code>V</code>: \u201cCHECK WAS PREVIOUSLY VOIDED\u201d.</li> <li><code>O</code>: Valid open check; moves vendor number (<code>AMVEN#</code>), check amount (<code>AMCKAM</code>), check date (<code>AMCKDT</code>), and vendor name (<code>AMVNNM</code>) to variables.</li> </ul> </li> <li>Chains to <code>APCRTR</code> to check for existing reconciliation record (<code>SCKEY</code>). If found (<code>N92</code>), retrieves clear date (<code>ATCLDT</code>) and amount (<code>ATCLAM</code>); if not, sets indicator 34 for new record.</li> </ul> </li> <li>Display:<ul> <li>Sets indicator 82 to display <code>AP190S2</code> (next screen) if no errors (81 off).</li> <li>Outputs <code>AP190S1</code> with company, bank G/L, check number, and error message (if any).</li> </ul> </li> <li> <p>Purpose: Validates user-entered company, bank G/L, and check number, retrieving associated data for display.</p> </li> <li> <p>Screen 2 Processing (AP190S2, Subroutine S2) (Lines 0186\u20130217):</p> </li> <li>Input Validation:<ul> <li>Reads clear date (<code>CLDT</code>, <code>CLYY</code>) and clear amount (<code>CLAM</code>) from the user.</li> <li>Date Validation (Lines 0188\u20130205):</li> <li>Tests <code>DPCLDT</code> (clear date) for valid numeric format using <code>TESTB</code>. If invalid (<code>99</code>), restores saved date (<code>SVCLDT</code>) and proceeds.</li> <li>Calls subroutine <code>DTEDIT</code> to validate <code>CLDT</code> (MMDDYY format):<ul> <li>Breaks down date into month (<code>$MONTH</code>), day (<code>$DAY</code>), and year (<code>$YR</code>).</li> <li>Validates month (1\u201312) and day based on month and leap year rules (e.g., February 28/29, other months 30/31).</li> <li>Handles Y2K compliance by determining century (<code>Y2KCEN</code>) and constructing an 8-digit date (<code>CLDT8</code>).</li> <li>Sets indicator 79 if the date is invalid, displaying \u201cCLEAR DATE IS INVALID\u201d.</li> </ul> </li> <li>Amount Validation (Lines 0207\u20130210):</li> <li>Compares clear amount (<code>CLAM</code>) to check amount (<code>AMCKAM</code>). If mismatched (<code>34</code>), sets error indicators (82, 90), displays \u201cCLEAR AMOUNT DOES NOT MATCH\u201d, and exits.</li> </ul> </li> <li>Record Update:<ul> <li>If no errors, writes or updates <code>APCRTR</code> with <code>OUTREC</code> (clear amount, date, and key).</li> <li>Calls <code>CLEAR</code> to reset fields and sets indicator 32 for the next entry.</li> </ul> </li> <li>Display:<ul> <li>Outputs <code>AP190S2</code> with company, bank G/L, check number, vendor details, check date/amount, clear date/amount, and error message (if any).</li> </ul> </li> <li> <p>Purpose: Validates and stores the clear date and amount, updating the reconciliation file.</p> </li> <li> <p>Clear Subroutine (Lines 0334\u20130347):</p> </li> <li>Resets fields: <code>CHK#</code>, <code>CLDT</code>, <code>CLAM</code>, <code>VEN#</code>, <code>CKAM</code>, <code>CKDT</code>, <code>VEN#NM</code>, and <code>CLDT8</code> to zeros or blanks.</li> <li>Saves <code>CLDT</code> to <code>SVCLDT</code> for recovery.</li> <li> <p>Purpose: Clears variables for the next entry.</p> </li> <li> <p>Delete Subroutine (Lines 0349\u20130355):</p> </li> <li>Chains to <code>APCRTR</code> using <code>SCKEY</code>. If found (<code>N92</code>), writes a delete record (<code>DELREC</code>).</li> <li>Calls <code>CLEAR</code> to reset fields.</li> <li> <p>Purpose: Deletes a reconciliation record from <code>APCRTR</code>.</p> </li> <li> <p>Program Termination (Line 0110):</p> </li> <li>Jumps to <code>END</code> tag after processing, resetting roll key indicators (18, 19).</li> <li>Purpose: Completes the program cycle.</li> </ol>"},{"location":"accounts-payable/05%20Clear%20Checks%20%26%20Reconciliation/AP190%20RPG/#business-rules","title":"Business Rules","text":"<p>The program enforces the following business rules for A/P check reconciliation: 1. Company Validation:    - The company number (<code>CONO</code>) must exist in <code>APCONT</code> and not be marked as deleted (<code>ACDEL \u2260 'D'</code>). 2. Bank G/L Validation:    - The bank G/L number (<code>BKGL</code>) combined with <code>CONO</code> must exist in <code>GLMAST</code> and not be deleted (<code>GLDEL \u2260 'D'</code>). 3. Check Validation:    - The check number (<code>CHK#</code>) must exist in <code>APCHKR</code> and have a valid status (<code>AMCODE = 'O'</code> for open checks).    - Checks with <code>AMCODE</code> of <code>D</code> (deleted), <code>R</code> (reconciled), or <code>V</code> (voided) are invalid for processing. 4. Clear Date Validation:    - The clear date (<code>CLDT</code>) must be a valid date in MMDDYY format, with proper month (1\u201312) and day (28\u201331, accounting for leap years).    - Handles Y2K compliance by determining the century based on <code>Y2KCMP</code> and <code>Y2KCEN</code>. 5. Clear Amount Validation:    - The clear amount (<code>CLAM</code>) must match the check amount (<code>AMCKAM</code>) from <code>APCHKR</code>. 6. Record Management:    - Existing <code>APCRTR</code> records can be updated or deleted; new records are added if none exist.    - Duplicate key processing is supported by redefining <code>CLDT</code> as alphanumeric (<code>DPCLDT</code>) for validation. 7. User Interface:    - Errors are displayed on the screen with specific messages (e.g., \u201cINVALID COMPANY #\u201d, \u201cCLEAR DATE IS INVALID\u201d).    - Roll keys allow navigation through existing reconciliation records.    - Function keys (<code>KA</code>, <code>KD</code>, <code>KG</code>) control rekeying, deletion, or program termination.</p>"},{"location":"accounts-payable/05%20Clear%20Checks%20%26%20Reconciliation/AP190%20RPG/#tables-files-used","title":"Tables (Files) Used","text":"<p>The program uses the following files: 1. SCREEN:    - Workstation file for display formats <code>AP190S1</code> (input company, bank G/L, check number) and <code>AP190S2</code> (input clear date, amount, and display vendor/check details).    - Record length: 500 bytes. 2. APCRTR:    - Update file (UF) for check reconciliation transactions.    - Keyed by <code>ATKEY</code> (16 bytes, company + bank G/L + check number).    - Fields: <code>ATCLAM</code> (clear amount), <code>ATCLDT</code> (clear date).    - Record length: 80 bytes. 3. APCONT:    - Input file (IC) for company control data.    - Keyed by company number (2 bytes).    - Fields: <code>ACDEL</code> (delete flag), <code>ACNAME</code> (company name).    - Record length: 256 bytes. 4. GLMAST:    - Input file (IC) for general ledger master data.    - Keyed by <code>GLKEY</code> (11 bytes, company + bank G/L).    - Fields: <code>GLDEL</code> (delete flag), <code>GLDESC</code> (description).    - Record length: 256 bytes. 5. APCHKR:    - Input file (IC) for check reconciliation data.    - Keyed by check number (16 bytes).    - Fields: <code>AMCODE</code> (status: D, O, R, V), <code>AMVEN#</code> (vendor number), <code>AMCKAM</code> (check amount), <code>AMCKDT</code> (check date), <code>AMVNNM</code> (vendor name).    - Record length: 128 bytes.</p>"},{"location":"accounts-payable/05%20Clear%20Checks%20%26%20Reconciliation/AP190%20RPG/#external-programs-called","title":"External Programs Called","text":"<p>The program does not explicitly call any external programs. All processing is handled within <code>AP190</code> through its subroutines (<code>S1</code>, <code>S2</code>, <code>DTEDIT</code>, <code>CLEAR</code>, <code>DELETE</code>, <code>ROLLKY</code>, <code>ROLLFW</code>, <code>ROLLBW</code>).</p>"},{"location":"accounts-payable/05%20Clear%20Checks%20%26%20Reconciliation/AP190%20RPG/#summary","title":"Summary","text":"<p>The <code>AP190</code> RPG program is a data entry and validation tool for A/P check reconciliation: - Process: Displays two screens (<code>AP190S1</code> for inputting company, bank G/L, and check number; <code>AP190S2</code> for clear date and amount), validates inputs against <code>APCONT</code>, <code>GLMAST</code>, and <code>APCHKR</code>, and updates <code>APCRTR</code>. Supports navigation (roll keys), deletion, and rekeying. - Business Rules: Ensures valid company, bank G/L, and check data; enforces date and amount accuracy; manages record updates/deletions; and provides error feedback. - Files Used: <code>SCREEN</code>, <code>APCRTR</code>, <code>APCONT</code>, <code>GLMAST</code>, <code>APCHKR</code>. - External Programs: None.</p> <p>This program integrates with the <code>AP190.ocl36</code> OCL script, which sets up files and calls <code>AP190</code> and <code>AP195</code> for a complete reconciliation workflow.</p>"},{"location":"accounts-payable/05%20Clear%20Checks%20%26%20Reconciliation/AP195%20RPG/","title":"AP195 RPG","text":"<p>The provided RPG program, <code>AP195.rpg36</code>, is an RPG II or RPG/400 program called from the <code>AP190.ocl36</code> OCL program as part of the Accounts Payable (A/P) check reconciliation process. It generates a report listing cancelled checks, including totals by bank G/L account and company. Below, I\u2019ll explain the process steps, business rules, tables (files) used, and external programs called.</p>"},{"location":"accounts-payable/05%20Clear%20Checks%20%26%20Reconciliation/AP195%20RPG/#process-steps-of-the-ap195-rpg-program","title":"Process Steps of the AP195 RPG Program","text":"<p>The program reads the A/P check reconciliation transaction file (<code>APCRTR</code>), retrieves company information from the control file (<code>APCONT</code>), and produces a printed report on the <code>LIST</code> file with details of cancelled checks, subtotals by bank G/L account, and company totals. Here\u2019s a detailed breakdown of the process steps:</p> <ol> <li>Program Initialization:</li> <li>Header (H) and File (F) Specifications (Lines 0002\u20130011):<ul> <li>Defines the program (<code>AP195</code>) and files:</li> <li><code>APCRTR</code>: Input primary file (IP) for check reconciliation transactions.</li> <li><code>APCONT</code>: Input control file (IC) for company data.</li> <li><code>LIST</code>: Output file (O) for the printer, producing the report.</li> <li><code>APCRTR</code> is keyed by a 16-byte field (company + bank G/L + check number).</li> <li><code>APCONT</code> is keyed by a 2-byte company number.</li> </ul> </li> <li>Data Structures (Lines 0014\u20130022):<ul> <li>Defines input fields for <code>APCRTR</code>: <code>ATCONOL2</code> (company #), <code>ATBKGLL1</code> (bank G/L #), <code>ATCHK#</code> (check number), <code>ATCLAM</code> (clear amount), <code>ATCLDT</code> (clear date).</li> <li>Defines <code>ACNAME</code> (company name) from <code>APCONT</code>.</li> </ul> </li> <li> <p>Purpose: Sets up the environment for reading transaction data and generating the report.</p> </li> <li> <p>Report Initialization (Lines 0025\u20130032):</p> </li> <li>Level 2 (L2) Processing (Company-level):<ul> <li>Executes at the start of a new company (<code>L2</code> indicator).</li> <li>Retrieves the current time and date (<code>TIME</code> to <code>TIMDAT</code>, split into <code>SYSTIM</code> and <code>SYSDAT</code>).</li> <li>Initializes the separator line (<code>SEP</code>) to <code>'* '</code>.</li> <li>Resets the page number (<code>PAGE</code>) to zero.</li> <li>Chains to <code>APCONT</code> using <code>ATCONO</code> (company #). If not found (<code>92</code>), <code>ACNAME</code> is not updated.</li> <li>Resets the company total clear amount (<code>L2CLAM</code>) to zero.</li> </ul> </li> <li> <p>Purpose: Prepares headers and totals for each company in the report.</p> </li> <li> <p>Bank G/L Level Processing (Lines 0038\u20130040):</p> </li> <li>Level 1 (L1) Processing (Bank G/L-level):<ul> <li>Executes at the start of a new bank G/L number (<code>L1</code> indicator).</li> <li>Resets the bank G/L total clear amount (<code>L1CLAM</code>) to zero.</li> </ul> </li> <li> <p>Purpose: Initializes subtotals for each bank G/L account within a company.</p> </li> <li> <p>Detail Processing and Accumulation (Lines 0042\u20130044):</p> </li> <li>For each <code>APCRTR</code> record:<ul> <li>Adds the clear amount (<code>ATCLAM</code>) to the bank G/L total (<code>L1CLAM</code>).</li> <li>At the <code>L1</code> break (change in bank G/L), adds <code>L1CLAM</code> to the company total (<code>L2CLAM</code>).</li> </ul> </li> <li> <p>Purpose: Accumulates totals for reporting at both bank G/L and company levels.</p> </li> <li> <p>Report Output (Lines 0047\u20130082):</p> </li> <li>Header Output (Lines 0047\u20130072):<ul> <li>At <code>L1</code> break or overflow (<code>OFNL1</code>):</li> <li>Outputs company name (<code>ACNAME</code>) if found (<code>N92</code>).</li> <li>Prints page number (<code>PAGE</code>), system date (<code>SYSDAT</code>), and time (<code>SYSTIM</code>).</li> <li>Prints report title (\u201cA/P CANCELLED CHECKS EDIT\u201d) and bank G/L number (<code>ATBKGL</code>).</li> <li>Outputs column headers: \u201cCHECK #\u201d, \u201cCLEAR DATE\u201d, \u201cCLEAR AMOUNT\u201d.</li> <li>Prints separator lines (<code>SEP</code>).</li> </ul> </li> <li>Detail Lines (Lines 0073\u20130076):<ul> <li>For each <code>APCRTR</code> record (<code>01</code> indicator):</li> <li>Prints check number (<code>ATCHK#</code>), clear date (<code>ATCLDT</code>), and clear amount (<code>ATCLAM</code>).</li> </ul> </li> <li>Total Lines (Lines 0077\u20130082):<ul> <li>At <code>L1</code> break (after 21 lines, <code>T 21 L1</code>): Prints bank G/L total (<code>L1CLAM</code>) with label \u201cBANK G/L # TOTAL\u201d.</li> <li>At <code>L2</code> break (after 21 lines, <code>T 21 L2</code>): Prints company total (<code>L2CLAM</code>) with label \u201cCOMPANY TOTAL\u201d.</li> </ul> </li> <li>Purpose: Generates a formatted report with check details and totals.</li> </ol>"},{"location":"accounts-payable/05%20Clear%20Checks%20%26%20Reconciliation/AP195%20RPG/#business-rules","title":"Business Rules","text":"<p>The program enforces the following business rules for the A/P cancelled checks edit report: 1. Data Source:    - Reads all records from <code>APCRTR</code> sequentially, grouped by company (<code>ATCONOL2</code>) and bank G/L number (<code>ATBKGLL1</code>). 2. Company Validation:    - Attempts to retrieve company name (<code>ACNAME</code>) from <code>APCONT</code> using <code>ATCONO</code>. If not found, the report omits the company name but continues processing. 3. Report Structure:    - Organizes the report by company (<code>L2</code>) and bank G/L number (<code>L1</code>), with subtotals for each bank G/L and company.    - Includes headers with company name, bank G/L number, date, time, and page number.    - Lists check number, clear date, and clear amount for each transaction.    - Prints totals after 21 detail lines or at level breaks (<code>L1</code>, <code>L2</code>). 4. Formatting:    - Uses a separator line (<code>SEP = '* '</code>) to visually distinguish sections.    - Formats dates (<code>ATCLDT</code>, <code>SYSDAT</code>) and amounts (<code>ATCLAM</code>, <code>L1CLAM</code>, <code>L2CLAM</code>) for readability (e.g., <code>Z</code> for zero suppression, <code>M</code> for monetary format, <code>Y</code> for date format). 5. Accumulation:    - Accumulates clear amounts (<code>ATCLAM</code>) into bank G/L totals (<code>L1CLAM</code>) and company totals (<code>L2CLAM</code>) for accurate reporting.</p>"},{"location":"accounts-payable/05%20Clear%20Checks%20%26%20Reconciliation/AP195%20RPG/#tables-files-used","title":"Tables (Files) Used","text":"<p>The program uses the following files: 1. APCRTR:    - Input primary file (IP) for check reconciliation transactions.    - Keyed by a 16-byte field (company + bank G/L + check number).    - Fields: <code>ATCONOL2</code> (company #), <code>ATBKGLL1</code> (bank G/L #), <code>ATCHK#</code> (check number), <code>ATCLAM</code> (clear amount), <code>ATCLDT</code> (clear date).    - Record length: 80 bytes. 2. APCONT:    - Input control file (IC) for company data.    - Keyed by company number (2 bytes).    - Field: <code>ACNAME</code> (company name).    - Record length: 256 bytes. 3. LIST:    - Output file (O) for the printed report.    - Record length: 132 bytes (standard printer width).</p>"},{"location":"accounts-payable/05%20Clear%20Checks%20%26%20Reconciliation/AP195%20RPG/#external-programs-called","title":"External Programs Called","text":"<p>The program does not call any external programs. All processing is handled within <code>AP195</code> using its RPG logic.</p>"},{"location":"accounts-payable/05%20Clear%20Checks%20%26%20Reconciliation/AP195%20RPG/#summary","title":"Summary","text":"<p>The <code>AP195</code> RPG program generates a report for A/P cancelled checks: - Process: Reads <code>APCRTR</code> for check reconciliation data, retrieves company names from <code>APCONT</code>, accumulates totals by bank G/L and company, and outputs a formatted report to <code>LIST</code> with headers, detail lines, and totals. - Business Rules: Groups data by company and bank G/L, validates company numbers, formats output for readability, and provides totals after 21 lines or level breaks. - Files Used: <code>APCRTR</code> (input), <code>APCONT</code> (input), <code>LIST</code> (output). - External Programs: None.</p> <p>This program complements the <code>AP190</code> program (data entry and validation) by producing a final edit report, as orchestrated by the <code>AP190.ocl36</code> OCL script.</p>"},{"location":"accounts-payable/05%20Clear%20Checks%20%26%20Reconciliation/AP192%20Upload%20Checks%20to%20Clear/AP192%20OCL/","title":"AP192 OCL","text":"<p>The provided document is an OCL (Operation Control Language) program used on IBM System/36 or AS/400 systems to manage Accounts Payable (A/P) check reconciliation uploads and edits from PNC. Below, I\u2019ll explain the process steps of the program, identify the external programs called, and list the tables (files) used.</p>"},{"location":"accounts-payable/05%20Clear%20Checks%20%26%20Reconciliation/AP192%20Upload%20Checks%20to%20Clear/AP192%20OCL/#process-steps-of-the-ocl-program","title":"Process Steps of the OCL Program","text":"<p>The OCL script outlines a sequence of operations for processing A/P check reconciliation data. Here\u2019s a step-by-step breakdown of the program\u2019s logic:</p> <ol> <li>Initial Setup and Conditional File Deletion:</li> <li>The program checks if a file named <code>?9?APCR?WS?</code> exists in <code>DATAF1</code>.</li> <li>If the file exists (<code>IFF DATAF1-?9?APCR?WS?</code>), it is deleted (<code>DELETE ?9?APCR?WS?,F1</code>).</li> <li> <p>This ensures that any previous version of the working file is removed before proceeding, preventing data conflicts.</p> </li> <li> <p>Conditional File Creation:</p> </li> <li>If the file <code>?9?APCR?WS?</code> does not exist in <code>DATAF1</code> or after deletion, the program creates a new file (<code>BLDFILE ?9?APCR?WS?,I,RECORDS,500,80,,,2,16,DFILE,,50</code>).</li> <li> <p>The <code>BLDFILE</code> command specifies:</p> <ul> <li>File name: <code>?9?APCR?WS?</code></li> <li>Type: Indexed file (<code>I</code>)</li> <li>Initial record count: 500 records</li> <li>Record length: 80 bytes</li> <li>Other parameters: Likely related to file attributes like key length (2 bytes) and key position (16th byte).</li> <li>File is created in <code>DFILE</code> with a block size of 50.</li> </ul> </li> <li> <p>Conditional Branching:</p> </li> <li>The program checks if the file <code>?9?APCR?WS?</code> has a specific condition (<code>?F'A,?9?APCR?WS?'?/00000000</code>).</li> <li> <p>If the condition is met (likely checking if the file is empty or has no records), the program branches to the <code>SKIP</code> tag, bypassing the execution of <code>AP192</code>.</p> </li> <li> <p>Execution of AP192:</p> </li> <li>If the condition in step 3 is not met (i.e., the file exists and has data), the program proceeds to load and run the <code>AP192</code> program.</li> <li>Files used by <code>AP192</code>:<ul> <li><code>APCHKUP</code> (labeled <code>?9?APCHKUP</code>, disposition <code>SHR</code> for shared access): Likely the input file containing check reconciliation data uploaded from PNC.</li> <li><code>APCRTR</code> (labeled <code>?9?APCR?WS?</code>, disposition <code>SHR</code>, extendable by 100 records): The working file for check reconciliation transactions.</li> </ul> </li> <li> <p>The <code>RUN</code> command executes <code>AP192</code>, which presumably processes the uploaded check data and updates the <code>APCRTR</code> file.</p> </li> <li> <p>Execution of AP193:</p> </li> <li>After <code>AP192</code> completes (or if the program branches to <code>SKIP</code>), the program loads and runs the <code>AP193</code> program.</li> <li>Files used by <code>AP193</code>:<ul> <li><code>APCRTR</code> (labeled <code>?9?APCR?WS?</code>, disposition <code>SHR</code>): The same working file used in <code>AP192</code>, containing processed check reconciliation data.</li> <li><code>APCONT</code> (labeled <code>?9?APCONT</code>, disposition <code>SHR</code>): Likely a control file for A/P processing, containing configuration or summary data.</li> <li><code>GLMAST</code> (labeled <code>?9?GLMAST</code>, disposition <code>SHR</code>): General Ledger master file, used for updating financial records.</li> <li><code>APCHKR</code> (labeled <code>?9?APCHKR</code>, disposition <code>SHR</code>): A file likely used for storing reconciled check data or audit trails.</li> </ul> </li> <li> <p>The <code>RUN</code> command executes <code>AP193</code>, which likely finalizes the reconciliation process, updates the General Ledger, and stores results in the appropriate files.</p> </li> <li> <p>Program Flow Control:</p> </li> <li>The <code>TAG SKIP</code> label serves as a branching point. If the file <code>?9?APCR?WS?</code> is empty or meets the condition in step 3, the program skips <code>AP192</code> and proceeds directly to <code>AP193</code>.</li> <li>This ensures that <code>AP193</code> runs regardless of whether <code>AP192</code> was executed, providing a consistent final processing step.</li> </ol>"},{"location":"accounts-payable/05%20Clear%20Checks%20%26%20Reconciliation/AP192%20Upload%20Checks%20to%20Clear/AP192%20OCL/#external-programs-called","title":"External Programs Called","text":"<p>The OCL program explicitly calls the following external programs: 1. AP192: Handles the initial processing of A/P check reconciliation data, likely validating and uploading data from <code>APCHKUP</code> to <code>APCRTR</code>. 2. AP193: Performs final processing, such as updating the General Ledger (<code>GLMAST</code>), reconciling checks in <code>APCHKR</code>, and using control data from <code>APCONT</code>.</p>"},{"location":"accounts-payable/05%20Clear%20Checks%20%26%20Reconciliation/AP192%20Upload%20Checks%20to%20Clear/AP192%20OCL/#tables-files-used","title":"Tables (Files) Used","text":"<p>The program interacts with the following files (referred to as tables in some contexts): 1. APCHKUP (<code>?9?APCHKUP</code>): Input file containing check reconciliation data uploaded from PNC. Used by <code>AP192</code>. 2. APCRTR (<code>?9?APCR?WS?</code>): Working file for check reconciliation transactions, created or deleted as needed. Used by both <code>AP192</code> and <code>AP193</code>. 3. APCONT (<code>?9?APCONT</code>): Control file for A/P processing, likely containing configuration or summary data. Used by <code>AP193</code>. 4. GLMAST (<code>?9?GLMAST</code>): General Ledger master file, used for financial updates. Used by <code>AP193</code>. 5. APCHKR (<code>?9?APCHKR</code>): File for reconciled check data or audit trails. Used by <code>AP193</code>.</p>"},{"location":"accounts-payable/05%20Clear%20Checks%20%26%20Reconciliation/AP192%20Upload%20Checks%20to%20Clear/AP192%20OCL/#summary","title":"Summary","text":"<p>The OCL program orchestrates an A/P check reconciliation process by: - Managing the lifecycle of a working file (<code>APCRTR</code>) through deletion and creation. - Conditionally running <code>AP192</code> to process uploaded check data if the working file has valid data. - Always running <code>AP193</code> to finalize reconciliation, update the General Ledger, and store results. - The program uses shared files (<code>SHR</code> disposition) to allow concurrent access and extends the <code>APCRTR</code> file as needed.</p> <p>External Programs: <code>AP192</code>, <code>AP193</code> Files Used: <code>APCHKUP</code>, <code>APCRTR</code>, <code>APCONT</code>, <code>GLMAST</code>, <code>APCHKR</code></p> <p>If you need further clarification or details about specific file formats or program logic, let me know!</p>"},{"location":"accounts-payable/05%20Clear%20Checks%20%26%20Reconciliation/AP192%20Upload%20Checks%20to%20Clear/AP192%20RPG/","title":"AP192 RPG","text":"<p>The provided document is an RPG (Report Program Generator) program named <code>AP192</code> for the IBM System/36 or AS/400, called from the OCL program previously discussed. It is designed to populate an Accounts Payable (A/P) check reconciliation workfile (<code>APCRTR</code>) from data uploaded from PNC (<code>APCHKUP</code>). Below, I\u2019ll explain the process steps, business rules, tables used, and any external programs called.</p>"},{"location":"accounts-payable/05%20Clear%20Checks%20%26%20Reconciliation/AP192%20Upload%20Checks%20to%20Clear/AP192%20RPG/#process-steps-of-the-rpg-program-ap192","title":"Process Steps of the RPG Program (AP192)","text":"<p>The RPG program reads records from the input file <code>APCHKUP</code>, processes them, and writes formatted records to the output file <code>APCRTR</code>. Here\u2019s a step-by-step breakdown of the process:</p> <ol> <li>File Definitions:</li> <li>Input File (<code>APCHKUP</code>):<ul> <li>Defined as a primary input file (<code>IP</code>) with a record length of 25 bytes (<code>FAPCHKUP IP F 25 25 DISK</code>).</li> <li>Fields are extracted from positions 1 to 25 of each record.</li> </ul> </li> <li> <p>Output File (<code>APCRTR</code>):</p> <ul> <li>Defined as an output file (<code>O</code>) with a record length of 80 bytes (<code>FAPCRTR O F 80 80 16AI 2 DISK</code>).</li> <li>Indexed file (<code>AI</code>) with a key length of 2 bytes starting at position 16.</li> <li>The <code>A</code> indicator suggests append mode, allowing new records to be added.</li> </ul> </li> <li> <p>Input Record Mapping:</p> </li> <li> <p>The input file <code>APCHKUP</code> is read using a non-sequenced record (<code>NS 01</code>) and fields are mapped as follows:</p> <ul> <li><code>CHECK#</code> (positions 1\u20136): Check number (likely a numeric or alphanumeric identifier).</li> <li><code>AMOUNT</code> (positions 7\u201317): Check amount, including vendor number data (likely a packed or zoned decimal field).</li> <li><code>YEAR</code> (positions 18\u201321): Four-digit year of the check date.</li> <li><code>YEAR2</code> (positions 20\u201321): Two-digit year (subset of <code>YEAR</code>, possibly for compatibility).</li> <li><code>MONTH</code> (positions 22\u201323): Month of the check date.</li> <li><code>DAY</code> (positions 24\u201325): Day of the check date.</li> <li>Comments suggest additional fields like <code>VENDOR NUMBER</code> and <code>VENDOR NAME</code>, but these are not explicitly mapped in the provided code, possibly indicating a partial or simplified program listing.</li> </ul> </li> <li> <p>Processing Logic:</p> </li> <li>Indicator <code>N09</code> Check:<ul> <li>The program checks if indicator <code>09</code> is off (<code>N09</code>).</li> <li>If <code>09</code> is off, it sets a field <code>GLNUMB</code> (80 bytes) to a constant value <code>11000001</code> using <code>Z-ADD</code> (zero and add operation).</li> <li>It then sets indicator <code>09</code> on (<code>SETON 09</code>), ensuring this logic executes only once (likely for the first record or initialization).</li> </ul> </li> <li> <p>This suggests <code>GLNUMB</code> is a General Ledger number or a control field used in the output file, initialized to a default value.</p> </li> <li> <p>Output Record Writing:</p> </li> <li>The program writes records to <code>APCRTR</code> using the <code>DADD</code> operation (add a new record) for output specification <code>01</code> (<code>OAPCRTR DADD 01</code>).</li> <li>The output record is formatted as follows:<ul> <li>Position 1: A single space (<code>' '</code>) for padding or alignment.</li> <li>Positions 3\u20134: Hardcoded value <code>'10'</code> (possibly a transaction code or record type).</li> <li>Positions 5\u201311: <code>GLNUMB</code> (General Ledger number, set to <code>11000001</code>).</li> <li>Positions 12\u201317: <code>CHECK#</code> (check number from input).</li> <li>Positions 18\u201333: <code>AMOUNT</code> (check amount from input).</li> <li>Positions 34\u201341: <code>MONTH</code> (month of check date).</li> <li>Positions 42\u201343: <code>DAY</code> (day of check date).</li> <li>Positions 44\u201345: <code>YEAR2</code> (two-digit year).</li> <li>Positions 46\u201349: <code>YEAR</code> (four-digit year).</li> <li>Positions 50\u201351: <code>MONTH</code> (repeated, possibly for compatibility or formatting).</li> <li>Positions 52\u201353: <code>DAY</code> (repeated, possibly for compatibility or formatting).</li> </ul> </li> <li> <p>The output record is 80 bytes long, with fields explicitly positioned to match the file\u2019s structure.</p> </li> <li> <p>Program Flow:</p> </li> <li>The RPG program operates in a cycle-driven manner (typical of RPG II/III on System/36).</li> <li>It reads each record from <code>APCHKUP</code>, processes it (assigning <code>GLNUMB</code> for the first record), and writes a formatted record to <code>APCRTR</code>.</li> <li>The cycle continues until all input records are processed or an end-of-file condition is reached.</li> </ol>"},{"location":"accounts-payable/05%20Clear%20Checks%20%26%20Reconciliation/AP192%20Upload%20Checks%20to%20Clear/AP192%20RPG/#business-rules","title":"Business Rules","text":"<p>The program enforces the following business rules: 1. Data Transformation:    - Input data from <code>APCHKUP</code> (check number, amount, and date components) is reformatted into a structured output file (<code>APCRTR</code>) with additional fields like <code>GLNUMB</code> and a hardcoded transaction code (<code>'10'</code>).    - This suggests the program prepares data for downstream A/P reconciliation processes, ensuring compatibility with the system\u2019s database structure.</p> <ol> <li>Initialization of General Ledger Number:</li> <li>The <code>GLNUMB</code> field is initialized to <code>11000001</code> for the first record (or when indicator <code>09</code> is off), indicating a default or starting General Ledger account number.</li> <li> <p>The use of indicator <code>09</code> ensures this initialization happens only once, preventing overwrites for subsequent records.</p> </li> <li> <p>Data Validation:</p> </li> <li>The program assumes input data in <code>APCHKUP</code> is correctly formatted (e.g., check number in positions 1\u20136, amount in 7\u201317, etc.).</li> <li> <p>No explicit validation logic is shown, but the field mappings suggest reliance on the input file\u2019s structure being consistent.</p> </li> <li> <p>Output File Structure:</p> </li> <li>The output file <code>APCRTR</code> is indexed with a key starting at position 16 (likely the check number or a related field), facilitating efficient retrieval in subsequent processes (e.g., by <code>AP193</code>).</li> <li>Repeated fields (<code>MONTH</code> and <code>DAY</code>) in the output suggest compatibility with legacy systems or specific formatting requirements for downstream processing.</li> </ol>"},{"location":"accounts-payable/05%20Clear%20Checks%20%26%20Reconciliation/AP192%20Upload%20Checks%20to%20Clear/AP192%20RPG/#tables-files-used","title":"Tables (Files) Used","text":"<p>The program interacts with the following files: 1. APCHKUP:    - Input file (<code>IP</code>), 25 bytes per record.    - Contains check reconciliation data uploaded from PNC, including check number, amount, and date components. 2. APCRTR:    - Output file (<code>O</code>), 80 bytes per record, indexed with a 2-byte key starting at position 16.    - Stores processed check reconciliation data for further processing by <code>AP193</code>.</p>"},{"location":"accounts-payable/05%20Clear%20Checks%20%26%20Reconciliation/AP192%20Upload%20Checks%20to%20Clear/AP192%20RPG/#external-programs-called","title":"External Programs Called","text":"<p>The provided RPG code does not explicitly call any external programs. It is a self-contained program that reads from <code>APCHKUP</code>, processes the data, and writes to <code>APCRTR</code>. However, it is called by the OCL program (as noted in the previous query) and works in conjunction with <code>AP193</code>, which processes the output file <code>APCRTR</code>.</p>"},{"location":"accounts-payable/05%20Clear%20Checks%20%26%20Reconciliation/AP192%20Upload%20Checks%20to%20Clear/AP192%20RPG/#summary","title":"Summary","text":"<p>The <code>AP192</code> RPG program is responsible for populating the A/P check reconciliation workfile (<code>APCRTR</code>) from PNC upload data (<code>APCHKUP</code>). It: - Reads input records containing check number, amount, and date components. - Initializes a General Ledger number (<code>GLNUMB</code>) for the first record. - Formats and writes output records to <code>APCRTR</code> with additional fields like a transaction code (<code>'10'</code>) and repeated date fields for compatibility. - Uses a cycle-driven approach to process all input records.</p> <p>Business Rules: - Transform and reformat PNC upload data for A/P reconciliation. - Initialize <code>GLNUMB</code> once for the output file. - Ensure output records are structured for downstream processing.</p> <p>Tables Used: <code>APCHKUP</code> (input), <code>APCRTR</code> (output). External Programs Called: None directly in the RPG code, but <code>AP192</code> is part of a workflow with <code>AP193</code> via the OCL program.</p> <p>If you need further details, such as field format specifics (e.g., numeric vs. alphanumeric) or clarification on the System/36 environment, let me know!</p>"},{"location":"accounts-payable/05%20Clear%20Checks%20%26%20Reconciliation/AP192%20Upload%20Checks%20to%20Clear/AP192%20Summary%20Upload%20Checks%20to%20Clear/","title":"AP192 Summary Upload Checks to Clear","text":""},{"location":"accounts-payable/05%20Clear%20Checks%20%26%20Reconciliation/AP192%20Upload%20Checks%20to%20Clear/AP192%20Summary%20Upload%20Checks%20to%20Clear/#list-of-use-cases-implemented-by-the-program","title":"List of Use Cases Implemented by the Program","text":"<p>The call stack consists of the OCL program (<code>AP192.ocl36.txt</code>), the RPG program <code>AP192</code> (<code>AP192.rpg36.txt</code>), and the RPG program <code>AP193</code> (<code>AP193.rpg36.txt</code>). Together, they implement a single primary use case for Accounts Payable (A/P) check reconciliation from PNC uploads:</p> <ol> <li>Process and Validate A/P Check Reconciliation Data from PNC:</li> <li>Description: This use case involves uploading check reconciliation data from PNC, transforming it into a structured workfile, validating it against company, General Ledger, and historical check data, and producing a report with validation results and totals.</li> <li>Components:<ul> <li>The OCL program orchestrates the workflow by managing file creation/deletion and invoking <code>AP192</code> and <code>AP193</code>.</li> <li><code>AP192</code> transforms PNC upload data (<code>APCHKUP</code>) into a workfile (<code>APCRTR</code>) with formatted records.</li> <li><code>AP193</code> validates the workfile data against control files (<code>APCONT</code>, <code>GLMAST</code>, <code>APCHKR</code>) and generates a report (<code>LIST</code>) with errors and totals.</li> </ul> </li> </ol>"},{"location":"accounts-payable/05%20Clear%20Checks%20%26%20Reconciliation/AP192%20Upload%20Checks%20to%20Clear/AP192%20Summary%20Upload%20Checks%20to%20Clear/#function-requirement-document","title":"Function Requirement Document","text":""},{"location":"accounts-payable/05%20Clear%20Checks%20%26%20Reconciliation/AP192%20Upload%20Checks%20to%20Clear/AP192%20Summary%20Upload%20Checks%20to%20Clear/#ap-check-reconciliation-function-requirements","title":"A/P Check Reconciliation Function Requirements","text":""},{"location":"accounts-payable/05%20Clear%20Checks%20%26%20Reconciliation/AP192%20Upload%20Checks%20to%20Clear/AP192%20Summary%20Upload%20Checks%20to%20Clear/#overview","title":"Overview","text":"<p>The A/P Check Reconciliation function processes and validates check reconciliation data uploaded from PNC, transforming it into a structured format, validating it against company, General Ledger, and historical check data, and producing a report with validation results and totals.</p>"},{"location":"accounts-payable/05%20Clear%20Checks%20%26%20Reconciliation/AP192%20Upload%20Checks%20to%20Clear/AP192%20Summary%20Upload%20Checks%20to%20Clear/#inputs","title":"Inputs","text":"<ul> <li>PNC Upload File (<code>APCHKUP</code>):</li> <li>Fields: Check number (6 bytes), amount (11 bytes), year (4 bytes), two-digit year (2 bytes), month (2 bytes), day (2 bytes).</li> <li>Format: Fixed-length records (25 bytes).</li> <li>Control Files:</li> <li><code>APCONT</code>: Company data (company code, name, deletion flag).</li> <li><code>GLMAST</code>: General Ledger data (G/L number, description, deletion flag).</li> <li><code>APCHKR</code>: Historical check data (check number, status code, vendor number, check amount, check date, vendor name).</li> </ul>"},{"location":"accounts-payable/05%20Clear%20Checks%20%26%20Reconciliation/AP192%20Upload%20Checks%20to%20Clear/AP192%20Summary%20Upload%20Checks%20to%20Clear/#outputs","title":"Outputs","text":"<ul> <li>Workfile (<code>APCRTR</code>):</li> <li>Fields: Company code, G/L number (default: 11000001), check number, clear amount, clear date (year, two-digit year, month, day, repeated month/day).</li> <li>Format: Fixed-length records (80 bytes, indexed).</li> <li>Report (<code>LIST</code>):</li> <li>Content: Company and G/L headers, check details (check number, clear date, clear amount), error messages, G/L and company totals.</li> <li>Format: Printer file (132 bytes).</li> </ul>"},{"location":"accounts-payable/05%20Clear%20Checks%20%26%20Reconciliation/AP192%20Upload%20Checks%20to%20Clear/AP192%20Summary%20Upload%20Checks%20to%20Clear/#process-steps","title":"Process Steps","text":"<ol> <li>File Management:</li> <li>Delete existing <code>APCRTR</code> workfile if present.</li> <li> <p>Create new <code>APCRTR</code> workfile (500 records, 80 bytes, indexed, 2-byte key at position 16) if it doesn\u2019t exist.</p> </li> <li> <p>Data Transformation (via <code>AP192</code>):</p> </li> <li>Read <code>APCHKUP</code> records.</li> <li>Map fields: check number, amount, year, two-digit year, month, day.</li> <li>Add default G/L number (11000001) and transaction code (\u201810\u2019).</li> <li> <p>Write formatted records to <code>APCRTR</code>.</p> </li> <li> <p>Validation and Reporting (via <code>AP193</code>):</p> </li> <li>Read <code>APCRTR</code> records.</li> <li>Validate:<ul> <li>Company code exists in <code>APCONT</code> and is not deleted.</li> <li>G/L number exists in <code>GLMAST</code> and is not deleted.</li> <li>Check number exists in <code>APCHKR</code> and is not deleted, reconciled, voided, or non-open.</li> <li>Clear amount matches <code>APCHKR</code> check amount.</li> </ul> </li> <li>Log errors for invalid records (e.g., \u201cCHECK # NOT FOUND\u201d, \u201cCLEAR AMOUNT DOES NOT MATCH\u201d).</li> <li>Accumulate clear amounts for valid records by G/L (<code>L2CLAM</code>) and company (<code>L3CLAM</code>).</li> <li>Generate report (<code>LIST</code>) with headers, check details, errors, and totals.</li> </ol>"},{"location":"accounts-payable/05%20Clear%20Checks%20%26%20Reconciliation/AP192%20Upload%20Checks%20to%20Clear/AP192%20Summary%20Upload%20Checks%20to%20Clear/#business-rules","title":"Business Rules","text":"<ol> <li>Data Validation:</li> <li>Company code must exist in <code>APCONT</code> and not be marked deleted (<code>ACDEL \u2260 \u2018D\u2019</code>).</li> <li>G/L number must exist in <code>GLMAST</code> and not be marked deleted (<code>GLDEL \u2260 \u2018D\u2019</code>).</li> <li>Check number must exist in <code>APCHKR</code> with status code \u2018O\u2019 (open), not \u2018D\u2019 (deleted), \u2018R\u2019 (reconciled), or \u2018V\u2019 (voided).</li> <li> <p>Clear amount in <code>APCRTR</code> must match check amount in <code>APCHKR</code>.</p> </li> <li> <p>Error Handling:</p> </li> <li>Log errors for invalid company, G/L, check status, or amount mismatch.</li> <li>Increment error counter for each validation failure.</li> <li> <p>Include error messages in the report.</p> </li> <li> <p>Calculations:</p> </li> <li>Initialize G/L and company totals to zero.</li> <li>Add clear amount to G/L total (<code>L2CLAM</code>) and company total (<code>L3CLAM</code>) for valid records.</li> <li> <p>Report totals at G/L and company levels.</p> </li> <li> <p>Report Formatting:</p> </li> <li>Include company name, G/L number, date, time, and bank info in headers.</li> <li>List check number, clear date, clear amount, and errors for each record.</li> <li>Print G/L and company totals at respective breaks.</li> </ol>"},{"location":"accounts-payable/05%20Clear%20Checks%20%26%20Reconciliation/AP192%20Upload%20Checks%20to%20Clear/AP192%20Summary%20Upload%20Checks%20to%20Clear/#assumptions","title":"Assumptions","text":"<ul> <li>Input file <code>APCHKUP</code> is correctly formatted with valid data.</li> <li>Control files (<code>APCONT</code>, <code>GLMAST</code>, <code>APCHKR</code>) are up-to-date and accessible.</li> <li>Output workfile <code>APCRTR</code> is used by downstream processes (not covered in this function).</li> </ul>"},{"location":"accounts-payable/05%20Clear%20Checks%20%26%20Reconciliation/AP192%20Upload%20Checks%20to%20Clear/AP193%20RPG/","title":"AP193 RPG","text":"<p>The provided document is an RPG (Report Program Generator) program named <code>AP193</code> for the IBM System/36 or AS/400, called from the OCL program discussed previously. It serves as an edit program for Accounts Payable (A/P) check reconciliation data uploaded from PNC, validating data in the workfile (<code>APCRTR</code>) against control files (<code>APCONT</code>, <code>GLMAST</code>, <code>APCHKR</code>) and producing a report (<code>LIST</code>). Below, I\u2019ll explain the process steps, business rules, tables used, and any external programs called.</p>"},{"location":"accounts-payable/05%20Clear%20Checks%20%26%20Reconciliation/AP192%20Upload%20Checks%20to%20Clear/AP193%20RPG/#process-steps-of-the-rpg-program-ap193","title":"Process Steps of the RPG Program (AP193)","text":"<p>The <code>AP193</code> program reads records from the A/P check reconciliation workfile (<code>APCRTR</code>), validates them against control files (<code>APCONT</code>, <code>GLMAST</code>, <code>APCHKR</code>), accumulates totals, and generates a report (<code>LIST</code>) with validation results and errors. Here\u2019s a step-by-step breakdown:</p> <ol> <li>File Definitions:</li> <li>Input Files:<ul> <li><code>APCRTR</code> (Primary Input, <code>IP</code>, 80 bytes, indexed with 2-byte key at position 16): Workfile containing check reconciliation data from <code>AP192</code>.</li> <li><code>APCONT</code> (Input Control, <code>IC</code>, 256 bytes, indexed with 2-byte key at position 2): A/P control file with company or configuration data.</li> <li><code>GLMAST</code> (Input Control, <code>IC</code>, 256 bytes, indexed with 2-byte key at position 11): General Ledger master file for account validation.</li> <li><code>APCHKR</code> (Input Control, <code>IC</code>, 128 bytes, indexed with 2-byte key at position 16): A/P check reconciliation file with historical check data.</li> </ul> </li> <li>Output File:<ul> <li><code>LIST</code> (Output, <code>O</code>, 132 bytes, printer file): Generates a report detailing check reconciliation results, errors, and totals.</li> </ul> </li> <li> <p>Data Structures:</p> <ul> <li><code>COM</code> (Error message array, 10 elements, 30 bytes each): Stores error messages (e.g., \"INVALID CHECK #\", \"CHECK NOT FOUND\").</li> <li><code>SEP</code> (66-byte array, 2 elements): Likely used for report separators (e.g., lines or spaces).</li> </ul> </li> <li> <p>Input Record Mapping:</p> </li> <li>APCRTR (Primary Input):<ul> <li><code>ATKEY</code> (positions 2\u201317): Key field (likely check number).</li> <li><code>ATCO</code> (positions 2\u20133): Company code, used for <code>L3</code> (company-level) totaling.</li> <li><code>ATGL#</code> (positions 4\u201311): General Ledger number, used for <code>L2</code> (G/L-level) totaling.</li> <li><code>ATCHK#</code> (positions 12\u201317): Check number, used for validation.</li> <li><code>ATCLAM</code> (positions 23\u201333): Clear amount (check amount to be reconciled).</li> <li><code>ATCLDT</code> (positions 40\u201345): Clear date (date the check cleared).</li> </ul> </li> <li>APCONT (Control):<ul> <li><code>ACDEL</code> (position 1): Deletion flag (\u2018D\u2019 for deleted).</li> <li><code>ACNAME</code> (positions 4\u201333): Company name.</li> </ul> </li> <li>GLMAST (Control):<ul> <li><code>GLDEL</code> (position 1): Deletion flag (\u2018D\u2019 for deleted).</li> <li><code>GLDESC</code> (positions 13\u201337): General Ledger description.</li> </ul> </li> <li>APCHKR (Control):<ul> <li><code>AMCODE</code> (position 1): Check status code (\u2018D\u2019, \u2018O\u2019, \u2018R\u2019, \u2018V\u2019 for deleted, open, reconciled, voided).</li> <li><code>AMVEN#</code> (positions 18\u201322): Vendor number.</li> <li><code>AMCKAM</code> (positions 23\u201333): Check amount.</li> <li><code>AMCKDT</code> (positions 34\u201339): Check date.</li> <li><code>AMVNNM</code> (positions 46\u201375): Vendor name.</li> </ul> </li> <li> <p>UDS (User Data Structure):</p> <ul> <li><code>Y2KCEN</code> (positions 509\u2013510): Century for Y2K handling.</li> <li><code>Y2KCMP</code> (positions 511\u2013512): Company code for Y2K.</li> </ul> </li> <li> <p>Initialization (N09 Block):</p> </li> <li>If indicator <code>09</code> is off (<code>N09</code>), the program:<ul> <li>Initializes <code>L2CLAM</code> and <code>L3CLAM</code> (G/L and company clear amount totals) to zero (<code>Z-ADD*ZEROS</code>).</li> <li>Captures system time (<code>TIME</code>) and moves it to <code>TIMDAT</code> (12 bytes), then extracts <code>SYSTIM</code> (time, 6 bytes) and <code>SYSDAT</code> (date, 6 bytes).</li> <li>Sets <code>SEP</code> to <code>'* '</code> (separator for report).</li> <li>Initializes <code>PAGE</code> to zero for report pagination.</li> <li>Sets <code>GLKEY</code> to <code>'C'</code> (11 bytes, likely a default G/L key).</li> <li>Sets indicator <code>09</code> on to prevent re-execution.</li> </ul> </li> <li> <p>This block runs once at program start to set up variables and report parameters.</p> </li> <li> <p>Indicator and Variable Reset:</p> </li> <li>Indicators <code>30</code>, <code>31</code>, <code>32</code>, <code>33</code>, <code>34</code>, <code>81</code>, <code>90</code>, <code>91</code>, <code>92</code>, <code>93</code>, <code>94</code>, <code>95</code>, <code>96</code> are turned off (<code>SETOF</code>).</li> <li>Error message fields (<code>MSG</code>, <code>MSG1</code>\u2013<code>MSG6</code>) are cleared to blanks.</li> <li> <p><code>COUNT</code> (error counter) is reset to zero.</p> </li> <li> <p>Validation Logic:</p> </li> <li>Company Validation:<ul> <li>The program chains <code>ATCO</code> (company code from <code>APCRTR</code>) to <code>APCONT</code> (<code>CHAINAPCONT</code>, indicator <code>30</code>).</li> <li>If no record is found or <code>ACDEL</code> = \u2018D\u2019 (deleted), indicator <code>30</code> is set, and <code>CONONM</code> (company name) is cleared; otherwise, <code>CONONM</code> is set to <code>ACNAME</code>.</li> </ul> </li> <li>General Ledger Validation:<ul> <li>Constructs <code>GLKEY</code> by combining <code>ATCO</code> and <code>ATGL#</code> into <code>GLKY10</code> (10 bytes) and moving it to <code>GLKEY</code>.</li> <li>Chains <code>GLKEY</code> to <code>GLMAST</code> (<code>CHAINGLMAST</code>, indicator <code>31</code>).</li> <li>If no record is found or <code>GLDEL</code> = \u2018D\u2019 (deleted), indicator <code>31</code> is set, and <code>BKGLNM</code> (G/L description) is cleared; otherwise, <code>BKGLNM</code> is set to <code>GLDESC</code>.</li> </ul> </li> <li>Check Validation:<ul> <li>Chains <code>ATKEY</code> (check number) to <code>APCHKR</code> (<code>CHAINAPCHKR</code>, indicator <code>32</code>).</li> <li>If no record is found, sets indicator <code>90</code>, logs error \u201cCHECK # NOT FOUND\u201d (<code>COM,3</code>/<code>COM,4</code> to <code>MSG1</code>), increments <code>COUNT</code>, and branches to <code>AROUND</code> (skips further checks).</li> <li>Checks <code>AMCODE</code> in <code>APCHKR</code> for:</li> <li>\u2018D\u2019 (Deleted): Sets indicator <code>91</code>, logs \u201cCHECK WAS PREVIOUSLY DELETED\u201d (<code>COM,3</code>/<code>COM,5</code> to <code>MSG2</code>), increments <code>COUNT</code>.</li> <li>\u2018R\u2019 (Reconciled): Sets indicator <code>92</code>, logs \u201cCHECK IS ALREADY RECONCILED\u201d (<code>COM,3</code>/<code>COM,6</code> to <code>MSG3</code>), increments <code>COUNT</code>.</li> <li>\u2018V\u2019 (Voided): Sets indicator <code>93</code>, logs \u201cCHECK WAS PREVIOUSLY VOIDED\u201d (<code>COM,3</code>/<code>COM,7</code> to <code>MSG4</code>), increments <code>COUNT</code>.</li> <li>\u2018O\u2019 (Open): Sets indicator <code>94</code>, logs \u201cCHECK IS NOT OPEN\u201d (<code>COM,3</code>/<code>COM,8</code> to <code>MSG5</code>), increments <code>COUNT</code>.</li> <li>Compares <code>ATCLAM</code> (clear amount from <code>APCRTR</code>) to <code>AMCKAM</code> (check amount from <code>APCHKR</code>) (<code>COMP</code>, indicator <code>34</code>).</li> <li>If amounts don\u2019t match, sets indicator <code>95</code>, logs \u201cCLEAR AMOUNT DOES NOT MATCH\u201d (<code>COM,10</code> to <code>MSG6</code>), increments <code>COUNT</code>.</li> </ul> </li> <li> <p>If any validation fails, the program branches to <code>AROUND</code> to skip further processing for the record.</p> </li> <li> <p>Accumulation:</p> </li> <li> <p>If validations pass (no branch to <code>AROUND</code>), adds <code>ATCLAM</code> to <code>L2CLAM</code> (G/L total) and <code>L3CLAM</code> (company total).</p> </li> <li> <p>Report Generation:</p> </li> <li> <p>The program writes to the <code>LIST</code> printer file:</p> <ul> <li>Header (Level <code>L3</code>, Company-Level):</li> <li>Prints company name (<code>ACNAME</code>), page number (<code>PAGE</code>), system date (<code>SYSDAT</code>), bank info, and report title (\u201cA/P CANCELLED CHECKS EDIT FROM PNC UPLOAD\u201d).</li> <li>Includes system time (<code>SYSTIM</code>) and separators (<code>SEP</code>).</li> <li>Column headers: \u201cCHECK #\u201d, \u201cCLEAR DATE\u201d, \u201cCLEAR AMOUNT\u201d.</li> <li>Detail Lines (Level <code>01</code>):</li> <li>Prints check number (<code>ATCHK#</code>), clear date (<code>ATCLDT</code>), and clear amount (<code>ATCLAM</code>).</li> <li>If errors exist (indicators <code>90</code>\u2013<code>95</code>), prints corresponding error messages (<code>MSG1</code>\u2013<code>MSG6</code>) at position 110.</li> <li>Totals (Level <code>L2</code> and <code>L3</code>):</li> <li>At <code>L2</code> (G/L break), prints \u201cBANK G/L # TOTAL\u201d with <code>L2CLAM</code>.</li> <li>At <code>L3</code> (company break), prints \u201cCOMPANY TOTAL\u201d with <code>L3CLAM</code>.</li> </ul> </li> <li> <p>Program Flow:</p> </li> <li>The RPG cycle reads each <code>APCRTR</code> record, validates it against <code>APCONT</code>, <code>GLMAST</code>, and <code>APCHKR</code>, logs errors, accumulates totals, and writes report lines.</li> <li>The program continues until all <code>APCRTR</code> records are processed, producing a report with headers, detail lines, error messages, and totals.</li> </ol>"},{"location":"accounts-payable/05%20Clear%20Checks%20%26%20Reconciliation/AP192%20Upload%20Checks%20to%20Clear/AP193%20RPG/#business-rules","title":"Business Rules","text":"<ol> <li>Validation of Company and G/L:</li> <li>Each record\u2019s company code (<code>ATCO</code>) must exist in <code>APCONT</code> and not be deleted (<code>ACDEL \u2260 \u2018D\u2019</code>).</li> <li> <p>The G/L number (<code>ATGL#</code>) combined with <code>ATCO</code> must exist in <code>GLMAST</code> and not be deleted (<code>GLDEL \u2260 \u2018D\u2019</code>).</p> </li> <li> <p>Check Validation:</p> </li> <li>The check number (<code>ATKEY</code>) must exist in <code>APCHKR</code>.</li> <li>The check must not be deleted (<code>AMCODE \u2260 \u2018D\u2019</code>), reconciled (<code>AMCODE \u2260 \u2018R\u2019</code>), voided (<code>AMCODE \u2260 \u2018V\u2019</code>), or non-open (<code>AMCODE \u2260 \u2018O\u2019</code>).</li> <li> <p>The clear amount (<code>ATCLAM</code>) must match the check amount (<code>AMCKAM</code>) in <code>APCHKR</code>.</p> </li> <li> <p>Error Handling:</p> </li> <li>Errors are logged with predefined messages (e.g., \u201cCHECK # NOT FOUND\u201d, \u201cCLEAR AMOUNT DOES NOT MATCH\u201d).</li> <li> <p>Each error increments a counter (<code>COUNT</code>) and is printed in the report.</p> </li> <li> <p>Totaling:</p> </li> <li>Clear amounts are accumulated at the G/L level (<code>L2CLAM</code>) and company level (<code>L3CLAM</code>) for valid records.</li> <li> <p>Totals are printed at G/L and company breaks in the report.</p> </li> <li> <p>Report Formatting:</p> </li> <li>The report includes headers with company, date, time, and bank info.</li> <li>Detail lines show check number, clear date, clear amount, and any errors.</li> <li>Totals are printed for each G/L account and company.</li> </ol>"},{"location":"accounts-payable/05%20Clear%20Checks%20%26%20Reconciliation/AP192%20Upload%20Checks%20to%20Clear/AP193%20RPG/#tables-files-used","title":"Tables (Files) Used","text":"<ol> <li>APCRTR:</li> <li>Primary input file, 80 bytes, indexed.</li> <li>Contains check reconciliation data from <code>AP192</code> (check number, G/L number, company code, clear amount, clear date).</li> <li>APCONT:</li> <li>Input control file, 256 bytes, indexed.</li> <li>Stores company data (name, deletion flag).</li> <li>GLMAST:</li> <li>Input control file, 256 bytes, indexed.</li> <li>Stores General Ledger data (description, deletion flag).</li> <li>APCHKR:</li> <li>Input control file, 128 bytes, indexed.</li> <li>Stores historical check data (status code, vendor number, check amount, check date, vendor name).</li> <li>LIST:</li> <li>Output printer file, 132 bytes.</li> <li>Generates the reconciliation edit report.</li> </ol>"},{"location":"accounts-payable/05%20Clear%20Checks%20%26%20Reconciliation/AP192%20Upload%20Checks%20to%20Clear/AP193%20RPG/#external-programs-called","title":"External Programs Called","text":"<p>The <code>AP193</code> RPG program does not explicitly call any external programs. It is a self-contained program that processes input from <code>APCRTR</code>, validates against <code>APCONT</code>, <code>GLMAST</code>, and <code>APCHKR</code>, and produces a report via <code>LIST</code>. It is called by the OCL program as part of the A/P reconciliation workflow.</p>"},{"location":"accounts-payable/05%20Clear%20Checks%20%26%20Reconciliation/AP192%20Upload%20Checks%20to%20Clear/AP193%20RPG/#summary","title":"Summary","text":"<p>The <code>AP193</code> RPG program validates A/P check reconciliation data from <code>APCRTR</code> against control files (<code>APCONT</code>, <code>GLMAST</code>, <code>APCHKR</code>), logs errors, accumulates totals, and generates a report (<code>LIST</code>). It: - Validates company, G/L, and check data, ensuring records are not deleted, reconciled, or voided, and amounts match. - Logs errors with predefined messages and counts errors. - Accumulates clear amount totals at G/L and company levels. - Produces a formatted report with headers, detail lines, error messages, and totals.</p> <p>Business Rules: - Validate company, G/L, and check data for existence and status. - Ensure clear amounts match historical check amounts. - Log and report errors for invalid records. - Accumulate and report totals by G/L and company.</p> <p>Tables Used: <code>APCRTR</code> (input), <code>APCONT</code> (control), <code>GLMAST</code> (control), <code>APCHKR</code> (control), <code>LIST</code> (output). External Programs Called: None.</p> <p>If you need further details, such as specific field formats or deeper analysis of the report structure, let me know!</p>"},{"location":"accounts-payable/06%20ADP%20Expenses/AP140%20OCL/","title":"AP140 OCL","text":"<p>The provided document is an OCL (Operation Control Language) script used on IBM midrange systems (like AS/400 or IBM i) to control the execution of RPG programs and manage file operations for an Accounts Payable (A/P) Employee Expenses Report and Spreadsheet process. Below, I\u2019ll explain the process steps, list the external programs called, and identify the tables (files) used.</p>"},{"location":"accounts-payable/06%20ADP%20Expenses/AP140%20OCL/#process-steps-of-the-ocl-program","title":"Process Steps of the OCL Program","text":"<p>The OCL script orchestrates a sequence of file operations, program executions, and sorts to generate an employee expenses report and spreadsheet. Here\u2019s a step-by-step breakdown of the process:</p> <ol> <li>Initialization and File Setup:</li> <li>GSY2K and SCPROCP: These are likely system or environment setup commands or parameters, possibly related to the operating system or job control. <code>SCPROCP ,,,,,,,,?9?</code> suggests a parameter <code>?9?</code> (likely a job or library identifier) is being passed.</li> <li>SWITCH 00000000: Initializes job control switches to off (all zeros), which are used later for conditional branching.</li> <li>GSDELETE: Deletes temporary work files (<code>ADPY?WS?</code>, <code>ADPS?WS?</code>, <code>ADPC?WS?</code>, <code>ADPO?WS?</code>, <code>ADPT?WS?</code>) to ensure a clean slate. The <code>?WS?</code> and <code>?9?</code> are placeholders for dynamic values (e.g., work library or job-specific identifiers).</li> <li>IFF DATAF1-?9?ADPT?WS? BLDFILE: Conditionally builds a temporary file <code>?9?ADPT?WS?</code> with 500 records, 128 bytes each, if it doesn\u2019t exist. The <code>DFILE</code> parameter indicates it\u2019s a disk file.</li> <li> <p>CLRPFM FILE(?9?APEEPY): Clears the physical file <code>APEEPY</code>, which likely stores the final employee expense data.</p> </li> <li> <p>Load and Run AP140:</p> </li> <li>LOAD AP140: Loads the RPG program <code>AP140</code>.</li> <li>File Definitions:<ul> <li><code>ADPYTR</code> (labeled <code>?9?ADPT?WS?</code>, shared access, extended by 100 records): Transaction file for A/P data.</li> <li><code>APCONT</code> (labeled <code>?9?APCONT</code>, shared): A/P control file.</li> <li><code>GLMAST</code> (labeled <code>?9?GLMAST</code>, shared): General Ledger master file.</li> <li><code>GSTABL</code> (labeled <code>?9?GSTABL</code>, shared): General system table file.</li> <li><code>GSCONT</code> (labeled <code>?9?GSCONT</code>, shared): General system control file.</li> </ul> </li> <li> <p>RUN: Executes <code>AP140</code>, which likely processes A/P transactions, retrieves control data, and prepares initial data for the expense report.</p> </li> <li> <p>Conditional Branching (SWITCH1):</p> </li> <li> <p>IF SWITCH1-1 GOTO END: Checks if switch 1 is set to 1. If true, the program jumps to the <code>END</code> tag, terminating the process. This suggests <code>AP140</code> may set this switch to indicate an error or completion condition.</p> </li> <li> <p>Tag AP141 and File Preparation:</p> </li> <li>TAG AP141: Marks a program section for branching.</li> <li>GSDELETE: Deletes temporary files again to ensure no residual data.</li> <li> <p>BLDFILE:</p> <ul> <li>Builds <code>?9?ADPY?WS?</code> (999,000 records, 226 bytes) for A/P payment data.</li> <li>Builds <code>?9?ADPC?WS?</code> (999,000 records, 96 bytes) for check-related data.</li> </ul> </li> <li> <p>First Sort (#GSORT for AP141):</p> </li> <li>LOAD #GSORT: Loads the system sort utility.</li> <li>File Definitions:<ul> <li>Input: <code>?9?ADPT?WS?</code> (from <code>AP140</code> output).</li> <li>Output: <code>?9?ADP151S</code> (999,000 records, retained as a job file).</li> </ul> </li> <li>Sort Specifications:<ul> <li><code>HSORTR 17A 3X 128 N</code>: Sorts in reverse order, 17-character key, no sequence checking.</li> <li><code>I C 1 1NECD</code>: Includes records where position 1 is not equal to a specific condition (likely a deletion flag).</li> <li>Sort keys:</li> <li><code>FNC 7 8 COMPANY</code>: Sorts by company code (positions 7\u20138).</li> <li><code>FNC 36 45 VENDOR/VOUCHER</code>: Sorts by vendor/voucher number (positions 36\u201345).</li> <li><code>FNC 2 6 SEQ#</code>: Sorts by sequence number (positions 2\u20136).</li> <li><code>FDC 1 128 RECORDS</code>: Includes entire record (positions 1\u2013128).</li> </ul> </li> <li> <p>RUN: Executes the sort, producing a sorted file <code>?9?ADP151S</code>.</p> </li> <li> <p>Load and Run AP141:</p> </li> <li>LOAD AP141: Loads the RPG program <code>AP141</code>.</li> <li>File Definitions:<ul> <li><code>ADPYTR</code> (labeled <code>?9?ADP151S</code>): Sorted transaction file from the previous step.</li> <li><code>APOPEN</code> (labeled <code>?9?APOPEN</code>, shared): A/P open items file.</li> <li><code>ADPPAY</code> (labeled <code>?9?ADPY?WS?</code>, extended by 100 records): A/P payment file.</li> </ul> </li> <li> <p>RUN: Executes <code>AP141</code>, which likely processes sorted transactions, matches them with open items, and prepares payment data.</p> </li> <li> <p>Second Sort (#GSORT for AP145):</p> </li> <li>LOAD #GSORT: Loads the sort utility again.</li> <li>File Definitions:<ul> <li>Input: <code>?9?ADPY?WS?</code> (from <code>AP141</code> output).</li> <li>Output: <code>?9?ADPS?WS?</code> (999,000 records).</li> </ul> </li> <li>Sort Specifications:<ul> <li><code>HSORTA 23A 3X N</code>: Sorts in ascending order, 23-character key, no sequence checking.</li> <li><code>I C 1 1NECD</code>: Includes records based on position 1 condition.</li> <li>Sort keys:</li> <li><code>FNC 2 3 COMPANY</code>: Sorts by company code (positions 2\u20133).</li> <li><code>FNC 153 160 BANK G/L #</code>: Sorts by bank general ledger number (positions 153\u2013160).</li> <li><code>FNC 4 8 VENDOR</code>: Sorts by vendor code (positions 4\u20138).</li> <li><code>FNC 97 97 PREPAID CODE</code>: Sorts by prepaid code (position 97).</li> <li><code>FNC 91 96 CHECK #</code>: Sorts by check number (positions 91\u201396).</li> <li><code>FNC 152 152 SINGLE CHECK CODE</code>: Sorts by single check code (position 152).</li> </ul> </li> <li> <p>RUN: Executes the sort, producing a sorted payment file <code>?9?ADPS?WS?</code>.</p> </li> <li> <p>Conditional Label for Employee Expense:</p> </li> <li>IF ?3?/EE LOCAL OFFSET-198,DATA-'EE EMPLOYEE EXPENSE': If parameter <code>?3?</code> equals <code>EE</code>, sets a data field at offset 198 to indicate an employee expense report.</li> <li> <p>ELSE LOCAL OFFSET-198,DATA-' ': Otherwise, clears the field.</p> </li> <li> <p>Load and Run AP145:</p> </li> <li>LOAD AP145: Loads the RPG program <code>AP145</code>.</li> <li>File Definitions:<ul> <li><code>ADPPAY</code> (labeled <code>?9?ADPY?WS?</code>, shared): Payment file.</li> <li><code>AP145S</code> (labeled <code>?9?ADPS?WS?</code>): Sorted payment file.</li> <li><code>APCONT</code> (labeled <code>?9?APCONT</code>, shared): A/P control file.</li> <li><code>ADPYTR</code> (labeled <code>?9?ADPT?WS?</code>): Transaction file.</li> <li><code>APVEND</code> (labeled <code>?9?APVEND</code>, shared): Vendor master file.</li> <li><code>APOPEN</code> (labeled <code>?9?APOPEN</code>, shared): A/P open items file.</li> <li><code>APCHKR</code> (labeled <code>?9?APCHKR</code>, shared): Check register file.</li> <li><code>ADPYCK</code> (labeled <code>?9?ADPC?WS?</code>, extended by 100 records): Check file.</li> <li><code>APEEPY</code> (labeled <code>?9?APEEPY</code>, shared): Employee expense file.</li> </ul> </li> <li>Printer Overrides:<ul> <li>If parameter <code>?9?</code> equals <code>G</code>, overrides printer files <code>APEEEXP</code> and <code>APEEEXPO</code> to output queue <code>QUSRSYS/APPOST</code> (production) or <code>QUSRSYS/TESTOUTQ</code> (test).</li> </ul> </li> <li> <p>RUN: Executes <code>AP145</code>, which generates the final employee expense report and spreadsheet, using sorted payment data, vendor information, and check details.</p> </li> <li> <p>Cleanup and Termination:</p> <ul> <li>GSDELETE: Deletes temporary files again.</li> <li>IFF ?9?/G GOTO END: If parameter <code>?9?</code> equals <code>G</code>, skips to the <code>END</code> tag.</li> <li>TAG END: Marks the end of the process.</li> <li>SWITCH 00000000: Resets switches to off.</li> </ul> </li> </ol>"},{"location":"accounts-payable/06%20ADP%20Expenses/AP140%20OCL/#external-programs-called","title":"External Programs Called","text":"<p>The OCL script explicitly loads and runs the following external programs: 1. AP140: Processes initial A/P transactions and prepares data. 2. AP141: Processes sorted transactions, matches with open items, and prepares payment data. 3. AP145: Generates the final employee expense report and spreadsheet. 4. #GSORT (system sort utility, called twice): Performs sorting of transaction and payment data.</p>"},{"location":"accounts-payable/06%20ADP%20Expenses/AP140%20OCL/#tables-files-used","title":"Tables (Files) Used","text":"<p>The OCL script references the following files (tables): 1. ADPYTR (?9?ADPT?WS?): A/P transaction file (temporary, used across programs). 2. APCONT (?9?APCONT): A/P control file (shared, contains control settings). 3. GLMAST (?9?GLMAST): General Ledger master file (shared, used in <code>AP140</code>). 4. GSTABL (?9?GSTABL): General system table file (shared, used in <code>AP140</code>). 5. GSCONT (?9?GSCONT): General system control file (shared, used in <code>AP140</code>). 6. ADP151S (?9?ADP151S): Sorted transaction file (temporary, output from first <code>#GSORT</code>). 7. ADPPAY (?9?ADPY?WS?): A/P payment file (temporary, used in <code>AP141</code> and <code>AP145</code>). 8. APOPEN (?9?APOPEN): A/P open items file (shared, used in <code>AP141</code> and <code>AP145</code>). 9. AP145S (?9?ADPS?WS?): Sorted payment file (temporary, output from second <code>#GSORT</code>). 10. APVEND (?9?APVEND): Vendor master file (shared, used in <code>AP145</code>). 11. APCHKR (?9?APCHKR): Check register file (shared, used in <code>AP145</code>). 12. ADPYCK (?9?ADPC?WS?): Check file (temporary, used in <code>AP145</code>). 13. APEEPY (?9?APEEPY): Employee expense file (shared, cleared initially and used in <code>AP145</code>).</p>"},{"location":"accounts-payable/06%20ADP%20Expenses/AP140%20OCL/#summary","title":"Summary","text":"<p>The OCL script automates the generation of an A/P employee expenses report and spreadsheet by: 1. Initializing and clearing temporary files. 2. Running <code>AP140</code> to process A/P transactions. 3. Sorting data with <code>#GSORT</code> for <code>AP141</code>, which prepares payment data. 4. Sorting payment data again with <code>#GSORT</code> for <code>AP145</code>. 5. Running <code>AP145</code> to produce the final report and spreadsheet, with conditional printer output. 6. Cleaning up temporary files and terminating.</p> <p>The process uses three RPG programs (<code>AP140</code>, <code>AP141</code>, <code>AP145</code>) and the system sort utility (<code>#GSORT</code>), along with 13 files for data storage and processing. Parameters like <code>?9?</code>, <code>?3?</code>, and switches control the flow and environment (e.g., production vs. test output).</p>"},{"location":"accounts-payable/06%20ADP%20Expenses/AP140%20RPG/","title":"AP140 RPG","text":"<p>The provided AP140.rpg36.txt is an RPG/36 program (used on IBM System/36 or AS/400 systems) that handles the A/P Payment Transaction Entry Screen for processing accounts payable (A/P) transactions, specifically for employee expense payments. It includes modifications for handling 13 accounting periods, ACH/wire transfer selections, and utility auto-pay. Below, I\u2019ll explain the process steps, business rules, tables used, and external programs called, referencing the OCL context from the previous query where <code>AP140</code> is the first program executed.</p>"},{"location":"accounts-payable/06%20ADP%20Expenses/AP140%20RPG/#process-steps-of-the-ap140-rpg-program","title":"Process Steps of the AP140 RPG Program","text":"<p>The <code>AP140</code> program is an interactive screen-based application that allows users to enter and manage A/P payment transactions. It validates input, retrieves data from control and master files, and updates transaction records. The steps are structured around subroutines (<code>ONETIM</code>, <code>S1</code>, <code>S2</code>, <code>S2EDIT</code>, <code>DTEDIT</code>, <code>ROLLFW</code>, <code>ROLLBW</code>) and screen formats (<code>AP140S1</code>, <code>AP140S2</code>). Here\u2019s a detailed breakdown:</p> <ol> <li>Program Initialization:</li> <li>Indicators and Setup (lines 0133\u20130137): Resets indicators (81, 82, 90, 93) and clears message fields (<code>MSG30</code>, <code>MSG230</code>) to prepare for screen interactions.</li> <li>Roll Key Handling (lines 0138\u20130139): Calls <code>ROLLFW</code> (roll forward) or <code>ROLLBW</code> (roll backward) subroutines if indicators 18 or 19 are set, allowing navigation through transaction records.</li> <li> <p>End of Job (lines 0156\u20130158): If indicator <code>KG</code> (end of job) is set, resets indicators 01 and 02, sets <code>LR</code> (last record) and <code>U1</code>, and exits.</p> </li> <li> <p>One-Time Setup (<code>ONETIM</code> Subroutine) (lines 0183\u20130200):</p> </li> <li>Check Accounting Periods (lines 0185\u20130187): Checks <code>GSCONT</code> for <code>GX13GL</code> (Y/N for 13 accounting periods). Sets indicators 13, 12 if <code>GX13GL = 'Y'</code>.</li> <li>Check for Existing Transactions (lines 0189\u20130193): Chains to <code>ADPYTR</code> with key <code>'00000'</code>. If not found (indicator 81 on), sets add mode (indicator 17 on, 16 off) and initializes sequence number (<code>NXTSEQ = 1</code>). If found, proceeds to update mode.</li> <li> <p>Set Defaults (lines 0195\u20130198, 0685\u20130694): In update mode, sets company number (<code>CONO = PTCONO</code>), sequence number (<code>NXTSEQ = LSTSEQ + 1</code>), and clears fields (<code>VEND</code>, <code>VO</code>, <code>AMT</code>, <code>DISC</code>, <code>FDIS</code>, <code>PORH</code>, <code>SNGL</code>, <code>MKPP</code>, <code>PPCK</code>, <code>PPDT</code>).</p> </li> <li> <p>Screen 1 Processing (<code>S1</code> Subroutine) (lines 0202\u20130233):</p> </li> <li>Validate Company Number (lines 0204\u20130207): Chains to <code>APCONT</code> using <code>CONO</code>. If not found (indicator 91 on), sets error indicator 90, displays message \"INVALID COMPANY #\" (MSG,1), and jumps to <code>ENDS1</code>.</li> <li>Retrieve or Set Transaction Data (lines 0209\u20130226):<ul> <li>If no transaction exists (indicator 95 on), sets defaults: <code>BKGL = ACEEGL</code> (employee expense G/L from <code>APCONT</code>), <code>KYHOLD = 'E'</code> (employee expense), <code>BTCH = 99</code>, and zeros for <code>CKDT</code>, <code>DATE</code>, <code>KYPD</code>, <code>KYPDYY</code>. Clears <code>FDISC</code>.</li> <li>If a transaction exists (indicator 95 off), populates screen fields with <code>ADPYTR</code> values (<code>PTBKGL</code>, <code>PTBTCH</code>, <code>PTCKDT</code>, <code>PTDATE</code>, <code>PTFDIS</code>, <code>PTPD</code>, <code>PTPDYY</code>, <code>PTHOLD</code>).</li> </ul> </li> <li>Protect <code>KYHOLD</code> (lines 0218, 0226): Sets indicator 57 to protect <code>KYHOLD</code> in update mode (non-editable) or unprotect it in add mode.</li> <li>Call <code>S2EDIT</code> (line 0228): Validates screen 2 data (even though screen 1 is displayed).</li> <li> <p>Display Screen 1 (lines 0229\u20130231): Sets indicator 82 to display <code>AP140S2</code> format, clears error indicators and messages if no errors.</p> </li> <li> <p>Screen 2 Processing (<code>S2</code> Subroutine) (lines 0235\u20130252):</p> </li> <li>Validate Input (line 0237): Calls <code>S2EDIT</code> to validate screen 2 fields.</li> <li>Error Handling (lines 0238\u20130239): If error indicator 90 is on, redisplays screen 2 (indicator 82 on) and jumps to <code>ENDS2</code>.</li> <li>Double Enter Check (lines 0242\u20130243): If indicator 89 is on (user pressed Enter twice), redisplays screen 2.</li> <li> <p>Write Transaction (lines 0245\u20130247): If no errors, sets indicator 70, writes to <code>ADPYTR</code> (via <code>EXCPT</code>), and resets indicator 70.</p> </li> <li> <p>Screen 2 Edit (<code>S2EDIT</code> Subroutine) (lines 0254\u20130366):</p> </li> <li>Validate Bank G/L Number (lines 0256\u20130266):<ul> <li>Compares <code>SVBKGL</code> to <code>BKGL</code>. If different, updates <code>SVBKGL</code>.</li> <li>Chains to <code>GLMAST</code> using <code>GLKEY</code> (constructed from <code>CONO</code>, <code>BKGL</code>, and <code>'C'</code>). If not found or marked deleted/inactive (<code>GLDEL = 'D'</code> or <code>'I'</code>), sets error indicator 90 and displays \"INVALID BANK G/L #\".</li> </ul> </li> <li>Validate Batch Number (lines 0268\u20130271): If <code>BTCH = 0</code>, sets error indicator 90 and displays \"CHECK # CANNOT BE ZERO\".</li> <li>Validate Check Date (lines 0273\u20130285):<ul> <li>Calls <code>DTEDIT</code> to validate <code>CKDT</code>. If invalid (indicator 79 on), sets error 90 and displays \"INVALID CHECK DATE\".</li> <li>Converts <code>CKDT</code> to 8-digit format (<code>CKDT8</code>) with century handling.</li> </ul> </li> <li>Validate Pay-By Date (lines 0287\u20130299):<ul> <li>Calls <code>DTEDIT</code> to validate <code>DATE</code>. If invalid, sets error 90 and displays \"INVALID DATE TO PAY BY\".</li> <li>Converts <code>DATE</code> to 8-digit format (<code>DATE8</code>) with century handling.</li> </ul> </li> <li>Validate Force Discount (lines 0301\u20130305): If <code>FDISC</code> is not blank or <code>'D'</code>, sets error 90 and displays \"FORCE DISCOUNTS MUST BE 'D'\".</li> <li>Validate Period/Year for 13 Periods (lines 0307\u20130362, if indicator 12 on):<ul> <li>Checks if <code>KYPD</code> is between 1 and 13. If not, sets error 81/90/55 and displays \"INVALID PERIOD/YEAR\".</li> <li>Chains to <code>GSTABL</code> to get period end date (<code>TBPDDT</code>) for <code>KYPD</code>/<code>KYPDYY</code>. If not found, sets error.</li> <li>Validates <code>CKDT</code> against period end date (<code>HIDATE</code>) and prior period\u2019s end date (<code>LODATE</code>). If outside range, sets error and displays \"DATE INVALID FOR PD/YR KEYED\".</li> </ul> </li> <li> <p>Validate Voucher Payment Type (<code>KYHOLD</code>) (lines JB01, MG03):</p> <ul> <li>Ensures <code>KYHOLD</code> is <code>' '</code>, <code>'A'</code>, <code>'W'</code>, <code>'E'</code>, or <code>'U'</code>. If invalid, sets error 56/90 and displays \"VOUCHER TO PAY MUST BE ' ',A,W OR E\" (or includes <code>'U'</code> for utility auto-pay).</li> </ul> </li> <li> <p>Date Edit (<code>DTEDIT</code> Subroutine) (lines 0368\u20130480):</p> </li> <li> <p>Validates dates (<code>CKDT</code>, <code>DATE</code>) in MMDDYY format:</p> <ul> <li>Breaks down into month, day, year (<code>$MONTH</code>, <code>$DAY</code>, <code>$YR</code>).</li> <li>Validates month (1\u201312).</li> <li>For February, checks leap year (divisible by 4 or 400 for century years) and ensures day \u2264 29 (leap year) or \u2264 28 (non-leap year).</li> <li>For other months, checks day \u2264 30 (for April, June, September, November) or \u2264 31 (other months).</li> <li>Sets indicator 79 if invalid.</li> </ul> </li> <li> <p>Roll Key Navigation (<code>ROLLKY</code>, <code>ROLLFW</code>, <code>ROLLBW</code> Subroutines) (lines 0737\u20130771):</p> </li> <li>ROLLKY: Detects roll keys (status codes 01122 for forward, 01123 for backward), sets update mode (indicator 16 on, 17 off).</li> <li>ROLLFW: Chains to <code>ADPYTR</code> by <code>SEQ#</code>, reads next record, and updates <code>SEQ#</code> if found.</li> <li> <p>ROLLBW: Chains to <code>ADPYTR</code>, reads previous record, handles edge case for sequence 0, and updates <code>SEQ#</code>.</p> </li> <li> <p>File Output (lines 0774\u20130799):</p> </li> <li>Update/Delete (<code>E 70N95</code>): Writes updated <code>ADPYTR</code> record with fields like <code>CONO</code>, <code>BKGL</code>, <code>BTCH</code>, <code>CKDT</code>, <code>DATE</code>, <code>FDISC</code>, <code>KYPDYY</code>, <code>KYPD</code>, <code>CKDT8</code>, <code>DATE8</code>, <code>KYHOLD</code>.</li> <li>Add (<code>EADD 70 95</code>): Writes new <code>ADPYTR</code> record with sequence number (<code>Z5</code>) and same fields.</li> <li>Delete (<code>EDEL</code>): Marks record for deletion.</li> <li>Screen Output (lines 0844\u20130860):<ul> <li><code>AP140S1</code>: Displays <code>CONO</code> and <code>MSG30</code>.</li> <li><code>AP140S2</code>: Displays <code>CONO</code>, <code>ACNAME</code>, <code>BKGL</code>, <code>GLDESC</code>, <code>BTCH</code>, <code>CKDT</code>, <code>DATE</code>, <code>FDISC</code>, <code>KYPD</code>, <code>KYPDYY</code>, <code>MSG30</code>, <code>KYHOLD</code>.</li> </ul> </li> </ol>"},{"location":"accounts-payable/06%20ADP%20Expenses/AP140%20RPG/#business-rules","title":"Business Rules","text":"<p>The program enforces the following business rules: 1. Company Validation: Company number (<code>CONO</code>) must exist in <code>APCONT</code>. Invalid company triggers \"INVALID COMPANY #\". 2. Bank G/L Validation: Bank G/L number (<code>BKGL</code>) must exist in <code>GLMAST</code> and not be deleted (<code>GLDEL \u2260 'D'</code>) or inactive (<code>GLDEL \u2260 'I'</code>). Invalid G/L triggers \"INVALID BANK G/L #\". 3. Batch Number: Batch number (<code>BTCH</code>) cannot be zero (\"CHECK # CANNOT BE ZERO\"). 4. Date Validation:    - Check date (<code>CKDT</code>) and pay-by date (<code>DATE</code>) must be valid (MMDDYY format, valid month/day, leap year handling).    - For 13 accounting periods, <code>CKDT</code> must fall within the period defined by <code>KYPD</code>/<code>KYPDYY</code> in <code>GSTABL</code>. 5. Force Discount: <code>FDISC</code> must be blank or <code>'D'</code> (\"FORCE DISCOUNTS MUST BE 'D'\"). 6. Period/Year: If 13 periods are enabled (<code>GX13GL = 'Y'</code>), <code>KYPD</code> must be 1\u201313, and <code>CKDT</code> must align with period start/end dates in <code>GSTABL</code>. 7. Voucher Payment Type (<code>KYHOLD</code>): Must be <code>' '</code> (checks), <code>'A'</code> (ACH), <code>'W'</code> (wire transfer), <code>'E'</code> (employee expense), or <code>'U'</code> (utility auto-pay). Invalid values trigger \"VOUCHER TO PAY MUST BE ' ',A,W OR E\". 8. Sequence Number: Managed automatically (<code>NXTSEQ = LSTSEQ + 1</code> in update mode, or 1 in add mode). 9. Navigation: Supports rolling forward/backward through transactions using sequence numbers. 10. Error Handling: Displays specific error messages for invalid inputs and prevents record updates until errors are resolved.</p>"},{"location":"accounts-payable/06%20ADP%20Expenses/AP140%20RPG/#tables-files-used","title":"Tables (Files) Used","text":"<p>The program uses the following files: 1. SCREEN: Workstation file (300 bytes) for interactive screen display (<code>AP140S1</code>, <code>AP140S2</code>). 2. ADPYTR: A/P transaction file (128 bytes, update mode, indexed by 5 keys). Stores payment transactions (e.g., <code>PTCONO</code>, <code>PTBKGL</code>, <code>PTBTCH</code>, <code>PTCKDT</code>, <code>PTDATE</code>, <code>PTHOLD</code>). 3. APCONT: A/P control file (256 bytes, input mode, indexed by 2 keys). Contains company data (e.g., <code>ACNAME</code>, <code>ACEEGL</code>, <code>ACBKGL</code>). 4. GLMAST: General Ledger master file (256 bytes, input mode, indexed by 11 keys). Contains G/L account details (e.g., <code>GLDESC</code>, <code>GLDEL</code>). 5. GSCONT: General system control file (512 bytes, input mode, indexed by 2 keys). Stores system settings (e.g., <code>GX13GL</code> for 13 periods). 6. GSTABL: General system table file (256 bytes, input mode, indexed by 12 keys). Stores period end dates (<code>TBPDDT</code>).</p>"},{"location":"accounts-payable/06%20ADP%20Expenses/AP140%20RPG/#external-programs-called","title":"External Programs Called","text":"<p>The <code>AP140</code> program does not explicitly call any external programs. It is self-contained, relying on internal subroutines (<code>ONETIM</code>, <code>S1</code>, <code>S2</code>, <code>S2EDIT</code>, <code>DTEDIT</code>, <code>ROLLKY</code>, <code>ROLLFW</code>, <code>ROLLBW</code>) for processing.</p>"},{"location":"accounts-payable/06%20ADP%20Expenses/AP140%20RPG/#summary","title":"Summary","text":"<p>AP140 is an interactive RPG/36 program that facilitates A/P payment transaction entry for employee expenses. It: - Displays two screens (<code>AP140S1</code>, <code>AP140S2</code>) for entering company, bank G/L, batch, check date, pay-by date, and payment type. - Validates inputs against <code>APCONT</code>, <code>GLMAST</code>, <code>GSCONT</code>, and <code>GSTABL</code>, ensuring valid company, G/L accounts, dates, and periods. - Supports add/update/delete modes for <code>ADPYTR</code> records, with navigation via roll keys. - Handles special cases like 13 accounting periods and payment types (<code>' '</code>, <code>'A'</code>, <code>'W'</code>, <code>'E'</code>, <code>'U'</code>). - Uses five files (<code>SCREEN</code>, <code>ADPYTR</code>, <code>APCONT</code>, <code>GLMAST</code>, <code>GSCONT</code>, <code>GSTABL</code>) and no external programs.</p> <p>The program\u2019s output in <code>ADPYTR</code> feeds into the subsequent sort and <code>AP141</code> processing in the OCL script, as described in the main process flow.</p>"},{"location":"accounts-payable/06%20ADP%20Expenses/AP140%20Summary%20Emp%20Expense/","title":"AP140 Summary Emp Expense","text":""},{"location":"accounts-payable/06%20ADP%20Expenses/AP140%20Summary%20Emp%20Expense/#list-of-use-cases-implemented-by-the-ap140-ap141-and-ap145-rpg-programs","title":"List of Use Cases Implemented by the AP140, AP141, and AP145 RPG Programs","text":"<p>The RPG programs <code>AP140</code>, <code>AP141</code>, and <code>AP145</code>, along with the associated OCL script, implement a single primary use case as part of an IBM System/36 or AS/400 accounts payable (A/P) system for processing employee expense payments. This use case is:</p> <ol> <li>Generate Employee Expense Voucher Selection Spreadsheet and Report:</li> <li>Description: This use case allows the system to process A/P payment transactions for employee expenses, select eligible open payables (vouchers), and produce a detailed report and summary file for payroll integration. It supports multiple payment methods (checks, ACH, wire transfers, employee expenses, utility auto-pay) and handles validations, calculations, and reporting.</li> <li>Components:<ul> <li>AP140: Interactive entry of payment transaction details (company, bank G/L, batch, check date, pay-by date, payment type, vendor/voucher specifics).</li> <li>AP141: Matches transactions to open payables and creates payment records with appropriate payment amounts and types.</li> <li>AP145: Generates detailed reports and a summary file, validating checks and accumulating totals for reporting.</li> </ul> </li> <li>Inputs: Company number, bank G/L number, batch number, check date, pay-by date, payment type, vendor/voucher details, and accounting period/year (if 13 periods).</li> <li>Outputs: Payment records (<code>ADPPAY</code>, <code>ADPYCK</code>), detailed reports (<code>APEEEXP</code>, <code>APEEEXPO</code>), and a summary disk file (<code>APEEPY</code>) for payroll integration.</li> </ol>"},{"location":"accounts-payable/06%20ADP%20Expenses/AP140%20Summary%20Emp%20Expense/#function-requirement-document","title":"Function Requirement Document","text":""},{"location":"accounts-payable/06%20ADP%20Expenses/AP140%20Summary%20Emp%20Expense/#employee-expense-processing-function-requirements","title":"Employee Expense Processing Function Requirements","text":""},{"location":"accounts-payable/06%20ADP%20Expenses/AP140%20Summary%20Emp%20Expense/#overview","title":"Overview","text":"<p>The Employee Expense Processing Function automates the selection, validation, and reporting of accounts payable (A/P) employee expense payments. It processes transactions, matches them to open payables, calculates payment amounts, and generates detailed reports and a payroll summary file. The function supports multiple payment methods (checks, ACH, wire transfers, employee expenses, utility auto-pay) and ensures compliance with accounting rules, including support for 13 accounting periods.</p>"},{"location":"accounts-payable/06%20ADP%20Expenses/AP140%20Summary%20Emp%20Expense/#inputs","title":"Inputs","text":"<ul> <li>Company Number (<code>CONO</code>): Valid company identifier from <code>APCONT</code>.</li> <li>Bank G/L Number (<code>BKGL</code>): Valid bank G/L account from <code>GLMAST</code> (not deleted/inactive).</li> <li>Batch Number (<code>BTCH</code>): Non-zero batch identifier for grouping payments.</li> <li>Check Date (<code>CKDT</code>): Valid date (MMDDYY) for issuing payments.</li> <li>Pay-By Date (<code>DATE</code>): Optional date (MMDDYY) to filter vouchers by due date.</li> <li>Payment Type (<code>KYHOLD</code>): <code>' '</code> (check), <code>'A'</code> (ACH), <code>'W'</code> (wire), <code>'E'</code> (employee expense), <code>'U'</code> (utility auto-pay).</li> <li>Vendor Number (<code>PTVEND</code>): Optional vendor identifier from <code>APVEND</code> (0 for one-time vendors).</li> <li>Voucher Number (<code>PTVO</code>): Optional voucher identifier from <code>APOPEN</code> (0 for whole vendor).</li> <li>Partial Payment Amount (<code>PTAMT</code>): Optional amount for partial voucher payment.</li> <li>Override Discount (<code>PTDISC</code>): Optional discount amount to override default.</li> <li>Force Discount (<code>FDISC</code>): <code>'D'</code> to force discount, else blank.</li> <li>Pay or Hold (<code>PTPORH</code>): <code>'P'</code> to pay, <code>'H'</code> to hold (for vendor/voucher-specific transactions).</li> <li>Single Check (<code>PTSNGL</code>): <code>'S'</code> for single check per vendor, else blank.</li> <li>Prepaid Flag (<code>PTMKPP</code>): <code>'P'</code>, <code>'A'</code>, <code>'W'</code>, <code>'E'</code>, <code>'U'</code> for prepaid vouchers, else blank.</li> <li>Prepaid Check Number (<code>PTPPCK</code>): Check number for prepaid vouchers.</li> <li>Prepaid Date (<code>PTPPDT</code>): Date for prepaid vouchers.</li> <li>Period/Year (<code>KYPD</code>, <code>KYPDYY</code>): Accounting period (1\u201313) and year (if 13 periods enabled in <code>GSCONT</code>).</li> </ul>"},{"location":"accounts-payable/06%20ADP%20Expenses/AP140%20Summary%20Emp%20Expense/#outputs","title":"Outputs","text":"<ul> <li>Payment Records (<code>ADPPAY</code>): Records with company, vendor, voucher, payment amount, discount, check number, and payment type.</li> <li>Check Records (<code>ADPYCK</code>): Check details with check number, amount, and status (normal, prepaid, credit/no pay, full stub).</li> <li>Reports (<code>APEEEXP</code>, <code>APEEEXPO</code>): Detailed reports with company, vendor, invoice details, check totals, and company totals.</li> <li>Summary File (<code>APEEPY</code>): Disk file with vendor payroll ID and payment amounts for payroll integration.</li> </ul>"},{"location":"accounts-payable/06%20ADP%20Expenses/AP140%20Summary%20Emp%20Expense/#process-steps","title":"Process Steps","text":"<ol> <li>Validate Inputs:</li> <li>Verify <code>CONO</code> exists in <code>APCONT</code>.</li> <li>Ensure <code>BKGL</code> is valid in <code>GLMAST</code> (not deleted/inactive).</li> <li>Confirm <code>BTCH \u2260 0</code>.</li> <li>Validate <code>CKDT</code> and <code>DATE</code> (MMDDYY format, valid month/day, leap year).</li> <li>If 13 accounting periods enabled (<code>GX13GL = 'Y'</code> in <code>GSCONT</code>), ensure <code>KYPD</code> is 1\u201313 and <code>CKDT</code> falls within period dates in <code>GSTABL</code>.</li> <li>Validate <code>KYHOLD</code> is <code>' '</code>, <code>'A'</code>, <code>'W'</code>, <code>'E'</code>, or <code>'U'</code>.</li> <li> <p>For vendor-specific transactions, verify <code>PTVEND</code> exists in <code>APVEND</code> and <code>PTVO</code> in <code>APOPEN</code> (if provided).</p> </li> <li> <p>Create Transactions:</p> </li> <li> <p>Store transaction details in <code>ADPYTR</code> with sequence number, company, bank G/L, batch, check date, pay-by date, payment type, and vendor/voucher details.</p> </li> <li> <p>Match Open Payables:</p> </li> <li>For pay-by-date transactions (<code>DATE \u2260 0</code>):<ul> <li>Select <code>APOPEN</code> records where <code>OPCONO = CONO</code>, <code>OPBKGL = BKGL</code>, due date (<code>OPDUED</code>) \u2264 <code>DATE</code>, and not deleted (<code>OPDEL \u2260 'D'</code>) or halted (<code>OPHALT \u2260 'H'</code>).</li> <li>Match payment type: <code>' '</code> (non-ACH/wire/employee/utility), <code>'A'</code> (<code>OPHALT = 'A'</code>), etc.</li> </ul> </li> <li> <p>For vendor-specific transactions:</p> <ul> <li>Select <code>APOPEN</code> records matching <code>PTVEND</code> (and <code>PTVO</code> if provided), <code>OPCONO</code>, and <code>OPBKGL</code> (if whole vendor).</li> <li>Override hold (<code>OPHALT = 'H'</code>) if <code>PTPORH = 'P'</code>.</li> <li>Validate prepaid flags match <code>KYHOLD</code>.</li> </ul> </li> <li> <p>Calculate Payment Amounts:</p> </li> <li>Gross amount: <code>OPGRAM</code> from <code>APOPEN</code>.</li> <li>Discount: Apply <code>PTDISC</code> (if provided), else <code>OPDISC</code> from <code>APOPEN</code>. Set to 0 if voucher is past due (<code>OPDUED &gt; CKDT</code>) or partially paid (<code>OPPPTD \u2260 0</code>) and <code>FDISC \u2260 'D'</code>.</li> <li>Payment amount: <code>OPLPAM = OPGRAM - OPDISC - OPPPTD</code>.</li> <li> <p>Partial payment: If <code>PTAMT \u2260 0</code>, set <code>OPLPAM = PTAMT</code> and adjust remaining <code>PTAMT</code>.</p> </li> <li> <p>Assign Check Numbers:</p> </li> <li>Use <code>PTPPCK</code> for prepaid vouchers.</li> <li>Use next check number (<code>PTNXCK</code>) from <code>ADPYTR</code> for non-prepaid.</li> <li>Set check number to 0 for credit/no pay (<code>OPLPAM = 0</code>).</li> <li> <p>Increment <code>PTNXCK</code> for each new check unless full stub or credit/no pay.</p> </li> <li> <p>Validate Checks:</p> </li> <li>Ensure non-void checks do not exist in <code>APCHKR</code> or are not open (<code>AMCODE \u2260 'O'</code>).</li> <li>For void checks, ensure they exist, are open, and match the full amount.</li> <li> <p>Mark negative or zero-amount checks as credit/no pay (<code>Hypothesized: (</code>AXRECD = 'C'`).</p> </li> <li> <p>Generate Outputs:</p> </li> <li>Write payment records to <code>ADPPAY</code> with company, vendor, voucher, payment amount, discount, check number, payment type, and single check flag.</li> <li>Write check records to <code>ADPYCK</code> with check number, amount, and status (normal, prepaid, credit/no pay, full stub).</li> <li>Generate reports (<code>APEEEXP</code>, <code>APEEEXPO</code>) with:<ul> <li>Headers: Company name, payment type, date, time.</li> <li>Details: Sequence number, invoice number, description, gross amount, discount, partial paid to date, payment amount, due date, vendor, voucher number.</li> <li>Totals: Check totals, company totals (employee count, gross, discount, payment amounts).</li> </ul> </li> <li>Write summary file (<code>APEEPY</code>) with vendor payroll ID (<code>VNPRID</code>) and negative payment amount.</li> </ol>"},{"location":"accounts-payable/06%20ADP%20Expenses/AP140%20Summary%20Emp%20Expense/#business-rules","title":"Business Rules","text":"<ol> <li>Validation:</li> <li>Company, bank G/L, and batch must be valid and non-zero.</li> <li>Dates must be valid and align with accounting periods (if 13 periods).</li> <li>Payment type must match voucher type in <code>APOPEN</code>.</li> <li>Vendor/voucher must exist for specific transactions.</li> <li>Payment Selection:</li> <li>Pay-by-date: Select vouchers due by <code>DATE</code>, not on hold unless overridden.</li> <li>Vendor-specific: Match vendor (and voucher if specified), override hold if <code>PTPORH = 'P'</code>.</li> <li>Prepaid vouchers must match payment type (<code>OPPAID = KYHOLD</code>).</li> <li>Discounts:</li> <li>Apply override discount (<code>PTDISC</code>) or default (<code>OPDISC</code>).</li> <li>Set discount to 0 for past due or partially paid vouchers unless forced (<code>FDISC = 'D'</code>).</li> <li>Payment Amount:</li> <li>Calculate as <code>OPGRAM - OPDISC - OPPPTD</code>.</li> <li>Adjust for partial payments (<code>PTAMT</code>).</li> <li>Check Handling:</li> <li>Single checks (<code>OPSNGL = 'S'</code>) for one-time vendors or specified cases.</li> <li>Maximum 12 invoices per stub; mark as full stub (<code>AXRECD = 'F'</code> or <code>'V'</code>).</li> <li>Negative/zero-amount checks marked as credit/no pay.</li> <li>Reporting:</li> <li>Include vendor name from <code>APVEND</code> or <code>APOPEN</code>.</li> <li>Display payment type labels (e.g., \"PAY BY CHECK\", \"PAY BY UTIL-AUPY\").</li> <li>Report errors for invalid checks (e.g., \"CHECK IS ALREADY OPEN\").</li> </ol>"},{"location":"accounts-payable/06%20ADP%20Expenses/AP140%20Summary%20Emp%20Expense/#calculations","title":"Calculations","text":"<ul> <li>Payment Amount: <code>OPLPAM = OPGRAM - OPDISC - OPPPTD</code>. If <code>PTAMT \u2260 0</code>, <code>OPLPAM = min(PTAMT, OPGRAM - OPDISC - OPPPTD)</code> and update <code>PTAMT</code>.</li> <li>Discount: <code>OPDISC = PTDISC</code> (if provided) or <code>OPOPEN.OPDISC</code>. Set to 0 if past due (<code>OPDUED &gt; CKDT</code>) or <code>OPPPTD \u2260 0</code> and <code>FDISC \u2260 'D'</code>.</li> <li>Check Number: <code>THISCK = OPCKNO</code> (prepaid), <code>PTNXCK</code> (non-prepaid), or 0 (credit/no pay). Increment <code>PTNXCK</code> unless full stub or credit/no pay.</li> <li>Totals: Accumulate gross (<code>CKGRAM</code>, <code>C6GRAM</code>, <code>P6GRAM</code>, <code>L6GRAM</code>), discount (<code>CKDISC</code>, <code>C6DISC</code>, <code>P6DISC</code>, <code>L6DISC</code>), and payment (<code>CKAMT</code>, <code>C6LPAM</code>, <code>P6LPAM</code>, <code>L6LPAM</code>) at check and company levels.</li> </ul>"},{"location":"accounts-payable/06%20ADP%20Expenses/AP140%20Summary%20Emp%20Expense/#dependencies","title":"Dependencies","text":"<ul> <li>Files:</li> <li><code>APCONT</code>: Company data.</li> <li><code>GLMAST</code>: G/L accounts.</li> <li><code>GSCONT</code>: System settings (13 periods).</li> <li><code>GSTABL</code>: Period end dates.</li> <li><code>APVEND</code>: Vendor details.</li> <li><code>APOPEN</code>: Open payables.</li> <li><code>APCHKR</code>: Check register.</li> <li><code>ADPYTR</code>: Transaction input.</li> <li><code>ADPPAY</code>: Payment output.</li> <li><code>ADPYCK</code>: Check output.</li> <li><code>APEEPY</code>: Payroll summary output.</li> <li><code>APEEEXP</code>, <code>APEEEXPO</code>: Report output.</li> </ul>"},{"location":"accounts-payable/06%20ADP%20Expenses/AP141%20RPG/","title":"AP141 RPG","text":"<p>The AP141.rpg36.txt is an RPG/36 program (used on IBM System/36 or AS/400 systems) that processes A/P payment transactions from the <code>ADPYTR</code> file (created by <code>AP140</code>) to generate payment records in the <code>ADPPAY</code> file, matching them against open payables in the <code>APOPEN</code> file. It is called in the OCL script after the first sort (<code>#GSORT</code>) and is part of the A/P Employee Expenses Report and Spreadsheet process. Below, I explain the process steps, business rules, tables used, and external programs called, referencing the context of the OCL script and prior programs (<code>AP140</code>).</p>"},{"location":"accounts-payable/06%20ADP%20Expenses/AP141%20RPG/#process-steps-of-the-ap141-rpg-program","title":"Process Steps of the AP141 RPG Program","text":"<p>The <code>AP141</code> program reads transaction records from <code>ADPYTR</code>, matches them with open payables in <code>APOPEN</code>, and creates or updates payment records in <code>ADPPAY</code>. It handles two types of transaction records (distinguished by <code>NS 01</code> and <code>NS 02</code>) and supports payment methods like checks, ACH, wire transfers, employee expenses, and utility auto-pay. The program is structured around two main subroutines: <code>EACH01</code> (for pay-by-date records) and <code>EACH02</code> (for vendor-specific records).</p> <ol> <li>Program Initialization:</li> <li>The program reads <code>ADPYTR</code> records sequentially (defined as input primary file, <code>IP</code>) and processes them based on their type (<code>NS 01</code> or <code>NS 02</code>).</li> <li> <p>Record Type Check (lines 0067\u20130069):</p> <ul> <li>For <code>NS 01</code> records (pay by date), calls <code>EACH01</code> subroutine.</li> <li>For <code>NS 02</code> records (pay by vendor/voucher), checks if <code>PTDEL = 'D'</code> (deleted). If deleted, calls <code>EACH02</code>. Otherwise, processes normally.</li> </ul> </li> <li> <p>EACH01 Subroutine (Pay by Date) (lines 0072\u20130162):</p> </li> <li>Date Conversion (lines 0074\u20130092):<ul> <li>Converts <code>PTCKDT</code> (check date) and <code>PTDATE</code> (pay-by date) to 8-digit format (<code>CKYMD8</code>, <code>PTDAT8</code>) with century handling using <code>Y2KCEN</code> and <code>Y2KCMP</code>.</li> </ul> </li> <li>Check Pay-By Date (line 0094): If <code>PTDATE \u2260 0</code>, proceeds to match open payables; otherwise, skips to <code>END01</code>.</li> <li>Set Up <code>APOPEN</code> Read (lines 0099\u20130101):<ul> <li>If <code>PTFDIS = 'D'</code>, sets force discount flag (indicator 10).</li> <li>Sets lower limit (<code>OPLIM</code>) with <code>PTCONO</code> for <code>APOPEN</code> read.</li> </ul> </li> <li>Read <code>APOPEN</code> Loop (lines 0103\u20130160, <code>AGN01</code> tag):<ul> <li>Reads <code>APOPEN</code> records, skipping detail records (indicator 06), deleted records (<code>OPDEL = 'D'</code>), or halted records (<code>OPHALT = 'H'</code>).</li> <li>Validates:</li> <li>Company number (<code>OPCONO = PTCONO</code>).</li> <li>Bank G/L number (<code>OPBKGL = PTBKGL</code>).</li> <li>Payment type (<code>PTHOLD</code> vs. <code>OPHALT</code>):<ul> <li>If <code>PTHOLD = ' '</code>, selects records where <code>OPHALT \u2260 'A', 'W', 'E', 'U'</code> (checks).</li> <li>If <code>PTHOLD = 'A'</code>, selects only <code>OPHALT = 'A'</code> (ACH).</li> <li>If <code>PTHOLD = 'W'</code>, selects only <code>OPHALT = 'W'</code> (wire transfer).</li> <li>If <code>PTHOLD = 'E'</code>, selects only <code>OPHALT = 'E'</code> (employee expense).</li> <li>If <code>PTHOLD = 'U'</code>, selects only <code>OPHALT = 'U'</code> (utility auto-pay).</li> </ul> </li> <li>Converts due date (<code>OPDUED</code>) to 8-digit format (<code>DTYMD8</code>).</li> <li>For prepaid vouchers (<code>OPPAID = 'P'</code> and <code>PTHOLD = ' '</code>), clears <code>OPCKNO</code> and <code>OPCKDT</code>.</li> <li>Skips vouchers with due date after <code>PTDATE</code> (<code>DTYMD8 &gt; PTDAT8</code>).</li> <li>For ACH, wire, employee expense, or utility auto-pay (<code>PTHOLD = 'A', 'W', 'E', 'U'</code>), sets <code>OPPAID</code>, <code>OPCKNO</code>, and <code>OPCKDT</code> accordingly.</li> </ul> </li> <li>Calculate Payment Amount (lines 0142\u20130149):<ul> <li>If voucher is past due (<code>DTYMD8 &gt; CKYMD8</code>) or force discount is off, sets <code>OPDISC = 0</code>.</li> <li>If partially paid (<code>OPPPTD \u2260 0</code>), sets <code>OPDISC = 0</code>.</li> <li>Calculates last payment amount (<code>OPLPAM = OPGRAM - OPDISC - OPPPTD</code>).</li> </ul> </li> <li>Handle One-Time Vendor (lines 0151\u20130152): If <code>OPVEND = 0</code>, sets <code>OPSNGL = 'S'</code> (single check).</li> <li> <p>Write <code>ADPPAY</code> (lines 0154\u20130159):</p> <ul> <li>Chains to <code>ADPPAY</code> with <code>OPKEY</code>. If not found (indicator 89 on), adds new record; otherwise, updates existing record.</li> <li>Writes record with <code>OPREC</code>, <code>OPDISC</code>, <code>OPCKNO</code>, <code>OPPAID</code>, <code>OPSNGL</code>, <code>OPBKGL</code>, <code>OPLPAM</code>, <code>OPCKDT</code>, <code>PTSEQ#</code>.</li> </ul> </li> <li> <p>EACH02 Subroutine (Pay by Vendor/Voucher) (lines 0164\u20130281):</p> </li> <li>Validate Input (lines 0168\u20130171):<ul> <li>Sets force discount flag if <code>PTFDIS = 'D'</code> (indicator 10).</li> <li>Checks if paying whole vendor (<code>PTVO = 0</code>, indicator 12).</li> <li>Checks if partial payment (<code>PTAMT \u2260 0</code>, indicator 14).</li> <li>Checks if vendor/voucher is on hold (<code>PTPORH = 'H'</code>, indicator 15).</li> </ul> </li> <li>Set Up <code>APOPEN</code> Read (lines 0172\u20130178):<ul> <li>Constructs <code>OPLIM</code> with <code>PTCONO</code>, <code>PTVEND</code>, and <code>PTVO</code> for <code>APOPEN</code> read.</li> </ul> </li> <li>Read <code>APOPEN</code> Loop (lines 0180\u20130269, <code>AGN02</code> tag):<ul> <li>Reads <code>APOPEN</code> records, skipping detail records (indicator 06), deleted records (<code>OPDEL = 'D'</code>), or mismatched company (<code>OPCONO \u2260 PTCONO</code>) or vendor (<code>OPVEND \u2260 PTVEND</code>).</li> <li>For whole vendor (<code>PTVO = 0</code>), ensures <code>OPBKGL = PTBKGL</code>. For specific voucher, ensures <code>OPVONO = PTVO</code>.</li> <li>Validates payment type (<code>PTHOLD</code> vs. <code>OPHALT</code>) as in <code>EACH01</code>.</li> <li>For prepaid vouchers (<code>PTMKPP \u2260 ' '</code>), ensures <code>OPPAID</code> matches <code>PTHOLD</code> (e.g., <code>'A'</code> for ACH).</li> <li>For held vouchers (<code>OPHALT = 'H'</code>), requires <code>PTPORH = 'P'</code> to pay.</li> <li>Converts dates and sets <code>OPPAID</code>, <code>OPCKNO</code>, <code>OPCKDT</code> for ACH, wire, employee expense, or utility auto-pay.</li> </ul> </li> <li>Calculate Payment Amount (lines 0242\u20130258):<ul> <li>Applies override discount (<code>PTDISC</code>) if provided (<code>OPDISC = PTDISC</code>).</li> <li>Adjusts <code>OPDISC</code> for past due or partially paid vouchers.</li> <li>Calculates <code>OPLPAM = OPGRAM - OPDISC - OPPPTD</code>.</li> <li>For partial payments (<code>PTAMT \u2260 0</code>), adjusts <code>OPLPAM</code> and <code>PTAMT</code> accordingly.</li> </ul> </li> <li>Handle Single Check and One-Time Vendor (lines 0260\u20130265):<ul> <li>Sets <code>OPSNGL = PTSNGL</code> if provided, or <code>'S'</code> for one-time vendors (<code>PTVEND = 0</code>).</li> </ul> </li> <li> <p>Write/Delete <code>ADPPAY</code> (lines 0267\u20130279):</p> <ul> <li>Chains to <code>ADPPAY</code> with <code>OPKEY</code>.</li> <li>If on hold (<code>PTPORH = 'H'</code>), marks <code>ADPPAY</code> record for deletion (<code>PYDEL = 'D'</code>).</li> <li>Otherwise, adds or updates <code>ADPPAY</code> record with fields as in <code>EACH01</code>.</li> </ul> </li> <li> <p>File Output (lines 0284\u20130303):</p> </li> <li>Add (<code>EADD 80 89</code>): Writes new <code>ADPPAY</code> record with <code>OPREC</code>, <code>OPDISC</code>, <code>OPCKNO</code>, <code>OPPAID</code>, <code>OPSNGL</code>, <code>OPBKGL</code>, <code>OPLPAM</code>, <code>OPCKDT</code>, <code>PTSEQ#</code>.</li> <li>Update/Delete (<code>E 80N89</code>): Updates existing <code>ADPPAY</code> record, setting <code>PYDEL</code> to <code>'D'</code> for deletion or <code>' '</code> for update.</li> </ol>"},{"location":"accounts-payable/06%20ADP%20Expenses/AP141%20RPG/#business-rules","title":"Business Rules","text":"<p>The program enforces the following business rules: 1. Record Selection:    - Skips deleted records (<code>OPDEL = 'D'</code>), detail records, or halted records (<code>OPHALT = 'H'</code>) unless explicitly set to pay (<code>PTPORH = 'P'</code>).    - Matches company number (<code>OPCONO = PTCONO</code>) and bank G/L number (<code>OPBKGL = PTBKGL</code>).    - Matches payment type (<code>PTHOLD</code> vs. <code>OPHALT</code>):      - <code>' '</code> (checks): Selects non-ACH/wire/employee/utility vouchers.      - <code>'A'</code> (ACH), <code>'W'</code> (wire), <code>'E'</code> (employee expense), <code>'U'</code> (utility): Selects matching <code>OPHALT</code>. 2. Pay by Date (<code>EACH01</code>):    - Processes vouchers with due date (<code>OPDUED</code>) \u2264 pay-by date (<code>PTDATE</code>).    - Clears check number/date (<code>OPCKNO</code>, <code>OPCKDT</code>) for prepaid vouchers if paying by check.    - Sets <code>OPPAID</code>, <code>OPCKNO</code>, <code>OPCKDT</code> for ACH/wire/employee/utility payments. 3. Pay by Vendor/Voucher (<code>EACH02</code>):    - Matches vendor (<code>OPVEND = PTVEND</code>) and, if specified, voucher (<code>OPVONO = PTVO</code>).    - For whole vendor (<code>PTVO = 0</code>), ensures bank G/L match.    - Allows partial payments (<code>PTAMT</code>) and override discounts (<code>PTDISC</code>).    - Deletes <code>ADPPAY</code> records for held vendors/vouchers (<code>PTPORH = 'H'</code>). 4. Discount Handling:    - Applies force discount (<code>PTFDIS = 'D'</code>) unless voucher is past due or partially paid.    - Uses override discount (<code>PTDISC</code>) if provided.    - Sets discount to 0 for past due or partially paid vouchers. 5. Payment Amount:    - Calculates payment amount (<code>OPLPAM = OPGRAM - OPDISC - OPPPTD</code>).    - Adjusts for partial payments, ensuring <code>PTAMT</code> does not exceed remaining amount. 6. Single Check and One-Time Vendor:    - Sets <code>OPSNGL = 'S'</code> for one-time vendors (<code>OPVEND = 0</code>) or if specified (<code>PTSNGL \u2260 ' '</code>). 7. Prepaid Vouchers:    - Allows prepayment only if <code>OPPAID</code> matches <code>PTHOLD</code> (e.g., <code>'A'</code> for ACH).    - Sets <code>OPPAID</code>, <code>OPCKNO</code>, <code>OPCKDT</code> for prepaid records.</p>"},{"location":"accounts-payable/06%20ADP%20Expenses/AP141%20RPG/#tables-files-used","title":"Tables (Files) Used","text":"<p>The program uses the following files: 1. ADPYTR: A/P transaction file (128 bytes, input primary, <code>IP</code>). Contains transaction data (e.g., <code>PTCONO</code>, <code>PTBKGL</code>, <code>PTCKDT</code>, <code>PTDATE</code>, <code>PTHOLD</code>, <code>PTVEND</code>, <code>PTVO</code>). 2. APOPEN: A/P open items file (384 bytes, input with database relations, <code>ID</code>, indexed by 16 keys). Contains open payables (e.g., <code>OPCONO</code>, <code>OPVEND</code>, <code>OPVONO</code>, <code>OPGRAM</code>, <code>OPDISC</code>, <code>OPPAID</code>). 3. ADPPAY: A/P payment file (226 bytes, update mode, <code>UC</code>, indexed by 16 keys). Stores payment records (e.g., <code>PYDEL</code>, <code>OPREC</code>, <code>OPDISC</code>, <code>OPCKNO</code>, <code>OPPAID</code>, <code>OPSNGL</code>, <code>OPLPAM</code>).</p>"},{"location":"accounts-payable/06%20ADP%20Expenses/AP141%20RPG/#external-programs-called","title":"External Programs Called","text":"<p>The <code>AP141</code> program does not explicitly call any external programs. It is self-contained, relying on internal subroutines (<code>EACH01</code>, <code>EACH02</code>) for Rosettacut 4 times: System, System, System, System for processing.</p>"},{"location":"accounts-payable/06%20ADP%20Expenses/AP141%20RPG/#summary","title":"Summary","text":"<p>AP141 processes <code>ADPYTR</code> transactions to create or update <code>ADPPAY</code> records by matching against <code>APOPEN</code>. It: - Handles two transaction types: pay by date (<code>EACH01</code>) and pay by vendor/voucher (<code>EACH02</code>). - Validates company, bank G/L, and payment type (<code>PTHOLD</code> vs. <code>OPHALT</code>). - Manages discounts, partial payments, and prepaid vouchers. - Supports checks, ACH, wire transfers, employee expenses, and utility auto-pay. - Uses three files (<code>ADPYTR</code>, <code>APOPEN</code>, <code>ADPPAY</code>) and no external programs. - Outputs <code>ADPPAY</code> records for the next sort and <code>AP145</code> processing in the OCL script.</p>"},{"location":"accounts-payable/06%20ADP%20Expenses/AP145%20RPG/","title":"AP145 RPG","text":"<p>The AP145.rpg36.txt is an RPG/36 program (used on IBM System/36 or AS/400 systems) that generates the Employee Expenses Voucher Selection Spreadsheet and Report as part of the A/P process. It is the final program called in the OCL script after the second sort (<code>#GSORT</code>) and processes sorted payment records from <code>ADPPAY</code> to produce reports (<code>APEEEXP</code>, <code>APEEEXPO</code>) and a disk file (<code>APEEPY</code>). Below, I explain the process steps, business rules, tables used, and external programs called, referencing the context of the OCL script and prior programs (<code>AP140</code>, <code>AP141</code>).</p>"},{"location":"accounts-payable/06%20ADP%20Expenses/AP145%20RPG/#process-steps-of-the-ap145-rpg-program","title":"Process Steps of the AP145 RPG Program","text":"<p>The <code>AP145</code> program processes payment records from <code>ADPPAY</code> (sorted by company, bank G/L, vendor, prepaid code, check number, and single check code) and <code>AP145S</code> (a sorted version of <code>ADPPAY</code>) to generate detailed employee expense reports and a summary file. It accumulates totals, validates checks, and handles payment types (checks, ACH, wire transfers, employee expenses, utility auto-pay). The program uses subroutines (<code>L6DET</code>, <code>L4DET</code>, <code>CHECK</code>, <code>NOPAY</code>, <code>EDITCK</code>) to manage processing.</p> <ol> <li>Program Initialization:</li> <li>Reads <code>ADPPAY</code> as the primary file (<code>UP</code>) and <code>AP145S</code> as a secondary file (<code>IR</code>) with matching records logic.</li> <li>Level Breaks (lines 0061\u20130069):<ul> <li>At company level break (<code>L6</code>, company change), calls <code>L6DET</code> to initialize company-level data and print headers.</li> <li>At vendor level break (<code>L4</code>, vendor change), sets indicator 14 and calls <code>L4DET</code> to process vendor details.</li> <li>At prepaid code level (<code>L3</code>), checks <code>OPPAID</code> for <code>'P'</code> (check, indicator 25), <code>'A'</code> (ACH, 26), <code>'W'</code> (wire transfer, 27), <code>'E'</code> (employee expense, 28), or <code>'U'</code> (utility auto-pay, 29). Sets indicator 11 for prepaid records.</li> <li>At single check level (<code>L1</code>, <code>OPSNGL = 'S'</code>), sets indicator 10 for single check processing.</li> </ul> </li> <li> <p>Stub Check (line 0070): If stub is full (<code>COUNT = 12</code>, indicator 12) and not prepaid (indicator 11 off), calls <code>CHECK</code> to process the check.</p> </li> <li> <p>Process Each Invoice (lines 0073\u20130082):</p> </li> <li>Accumulates totals: <code>CKGRAM</code> (gross amount), <code>CKDISC</code> (discount), <code>CKAMT</code> (payment amount).</li> <li>Calculates negative amount (<code>NEGAMT = CKAMT * -1</code>) for reporting.</li> <li>Increments invoice count (<code>COUNT</code>).</li> <li>Calls <code>L4DET</code> at vendor break (indicator 14 on).</li> <li>Writes detail record to <code>APEEEXP</code>/<code>APEEEXPO</code> (via <code>EXCPT</code>, indicator 80) and updates <code>ADPPAY</code> with sequence number (<code>SEQ#</code>).</li> <li> <p>Sets overflow indicator (76) if printer overflow occurs (<code>OF</code> on).</p> </li> <li> <p>Check for Full Stub (lines 0085\u20130092):</p> </li> <li>If not a single check (<code>L1</code> off) and <code>COUNT = 12</code> (indicator 12 on), sets full stub condition.</li> <li> <p>For single checks (<code>L1</code> on) or non-single checks with full stub, calls <code>CHECK</code> to finalize the check.</p> </li> <li> <p>Company-Level Processing (<code>L6</code> Break) (lines 0095\u20130109):</p> </li> <li>Sets indicator 86 to print company totals.</li> <li>Writes company total record to <code>APEEEXP</code>/<code>APEEEXPO</code> (via <code>EXCPT</code>).</li> <li> <p>Resets company-level counters (<code>C6CNT</code>, <code>C6GRAM</code>, <code>C6DISC</code>, <code>C6LPAM</code>, <code>P6CNT</code>, <code>P6GRAM</code>, <code>P6DISC</code>, <code>P6LPAM</code>, <code>L6CNT</code>, <code>L6GRAM</code>, <code>L6DISC</code>, <code>L6LPAM</code>).</p> </li> <li> <p>L6DET Subroutine (Company-Level Processing) (lines 0112\u20130126):</p> </li> <li>Initializes page number (<code>PAGE = 0</code>) and separator (<code>SEP = '* '</code>).</li> <li>Gets current date and time (<code>TIME</code>, <code>DATE</code>) and converts <code>DATE</code> to 8-digit format (<code>DATE8</code>).</li> <li>Chains to <code>APCONT</code> with <code>OPCONO</code> to get company name (<code>ACNAME</code>) and pre-numbered check flag (<code>ACPRE#</code>).</li> <li>Chains to <code>ADPYTR</code> with <code>'00000'</code> to get next check number (<code>PTNXCK</code>) and payment type (<code>PTHOLD</code>).</li> <li>Sets <code>PAYBY</code> based on <code>PTHOLD</code>:<ul> <li><code>' '</code>: \"PAY BY CHECK\"</li> <li><code>'A'</code>: \"PAY BY ACH\"</li> <li><code>'W'</code>: \"PAY BY WIRE TFR\"</li> <li><code>'E'</code>: \"PAY BY PAYROLL\"</li> <li><code>'U'</code>: \"PAY BY UTIL-AUPY\"</li> </ul> </li> <li> <p>Writes report header to <code>APEEEXP</code>/<code>APEEEXPO</code> (via <code>EXCPT</code>, indicators 76, 77).</p> </li> <li> <p>L4DET Subroutine (Vendor-Level Processing) (lines 0128\u20130144):</p> </li> <li>Constructs vendor key (<code>VNKEY</code>) from <code>OPCONO</code> and <code>OPVEND</code>.</li> <li>Chains to <code>APVEND</code> to get vendor name (<code>VNNAME</code>) and sort abbreviation (<code>VNSORT</code>).</li> <li>If not found (indicator 94 on), chains to <code>APOPEN</code> with <code>OPKEY</code> (constructed from <code>VNKEY</code>, <code>OPVONO</code>, and <code>'3001'</code>) to get <code>VNNAME</code> and <code>VNSORT</code>.</li> <li>If still not found, clears <code>VNNAME</code> and <code>VNSORT</code>.</li> <li> <p>Writes vendor detail to <code>APEEEXP</code> (via <code>EXCPT</code>, indicator 74) and handles overflow.</p> </li> <li> <p>CHECK Subroutine (Check Processing) (lines 0146\u20130194):</p> </li> <li>Resets indicators 19 (credit/no pay) for non-prepaid and non-full stub cases.</li> <li>Sets check number (<code>THISCK</code>):<ul> <li>For prepaid (<code>OPPAID = 'P', 'A', 'W', 'E', 'U'</code>), uses <code>OPCKNO</code>.</li> <li>For credit/no pay (<code>CKAMT = 0</code>), sets <code>THISCK = 0</code>.</li> <li>Otherwise, uses <code>PTNXCK</code> (next check number).</li> </ul> </li> <li>If credit/no pay or full stub without pre-numbered checks, calls <code>NOPAY</code>.</li> <li>Calls <code>EDITCK</code> to validate check.</li> <li>Writes check record to <code>ADPYCK</code> (via <code>EXCPT</code>, indicator 81).</li> <li>Increments <code>NXCK</code> (next check number) unless credit/no pay or full stub.</li> <li>Updates counters:<ul> <li>Non-prepaid, non-credit (<code>C6CNT</code>, <code>C6GRAM</code>, <code>C6DISC</code>, <code>C6LPAM</code>).</li> <li>Prepaid (<code>P6CNT</code>, <code>P6GRAM</code>, <code>P6DISC</code>, <code>P6LPAM</code>).</li> <li>Non-credit (<code>L6CNT</code>, <code>L6GRAM</code>, <code>L6DISC</code>, <code>L6LPAM</code>).</li> </ul> </li> <li> <p>Resets <code>CKGRAM</code>, <code>CKDISC</code>, <code>CKAMT</code>, <code>NEGAMT</code>, <code>COUNT</code>, and sets vendor break (indicator 14).</p> </li> <li> <p>NOPAY Subroutine (Credit/No Pay Processing) (lines 0196\u20130217):</p> </li> <li>Handles negative or zero-amount checks by marking related <code>ADPYCK</code> records as credit/no pay (<code>AXRECD = 'C'</code>).</li> <li>Reads backward through <code>ADPYCK</code> starting from <code>SEQ#</code> (<code>CRSEQ#</code>).</li> <li>For full stub records (<code>AXRECD = 'F'</code> or <code>'V'</code>), updates <code>NXCK</code>, decrements counters (<code>C6CNT</code>, <code>L6CNT</code>), sets <code>AXRECD = 'C'</code>, and clears <code>AXCHEK</code>.</li> <li> <p>Writes updated <code>ADPYCK</code> record (via <code>EXCPTNOPAYX</code>).</p> </li> <li> <p>EDITCK Subroutine (Check Validation) (lines 0219\u20130248):</p> </li> <li>Validates check amount (<code>CKAMT</code>):<ul> <li>If <code>CKAMT = 0</code>, sets indicators 20 and 21 (credit/no pay).</li> </ul> </li> <li>Constructs check key (<code>ATKEY</code>) from <code>OPCONO</code>, <code>OPBKGL</code>, and <code>THISCK</code>.</li> <li> <p>Chains to <code>APCHKR</code> to check if the check exists:</p> <ul> <li>For non-void checks (<code>CKAMT \u2260 0</code> and not found), ensures <code>AMCODE \u2260 'O'</code> (open). If open, sets error indicator 23.</li> <li>For void checks (<code>CKAMT = 0</code> and found), ensures <code>AMCODE = 'O'</code> and <code>VOIDAM = AMCKAM</code>. If not, sets error 23.</li> </ul> </li> <li> <p>File Output (lines 0251\u20130470):</p> <ul> <li>ADPPAY: Updates <code>SEQ#</code> for each record.</li> <li>ADPYCK:</li> <li>Adds records with <code>AXRECD</code> set to <code>' '</code> (normal), <code>'C'</code> (credit/no pay), <code>'P'</code> (prepaid check), <code>'A'</code> (ACH), <code>'W'</code> (wire), <code>'E'</code> (employee expense), <code>'U'</code> (utility auto-pay), <code>'F'</code> (full stub), or <code>'V'</code> (full stub/void).</li> <li>Includes <code>OPCONO</code>, <code>OPBKGL</code>, <code>THISCK</code>, <code>OPVEND</code>, <code>CKAMT</code>, <code>PTCKDT</code> or <code>OPCKDT</code>, <code>VNNAME</code>, <code>SEQ#</code>, <code>COUNT</code>.</li> <li>APEEPY: Writes summary records with ADP payroll ID (<code>VNPRID</code>) and negative amount (<code>NEGAMT</code>).</li> <li>APEEEXP/APEEEXPO:</li> <li>Prints headers with company name, payment type (<code>PAYBY</code>), date, time, and column labels.</li> <li>Prints detail lines with sequence number, invoice number, description, gross amount, discount, partial paid to date, payment amount, due date, vendor, and voucher number.</li> <li>Prints check totals, prepaid indicators, and error messages (e.g., \"CHECK IS ALREADY OPEN\").</li> <li>Prints company totals with employee count and aggregates.</li> </ul> </li> </ol>"},{"location":"accounts-payable/06%20ADP%20Expenses/AP145%20RPG/#business-rules","title":"Business Rules","text":"<ol> <li>Payment Type Handling:</li> <li>Processes payments based on <code>OPPAID</code>/<code>PTHOLD</code>: <code>'P'</code> (check), <code>'A'</code> (ACH), <code>'W'</code> (wire transfer), <code>'E'</code> (employee expense), <code>'U'</code> (utility auto-pay).</li> <li>Labels payment types in reports (e.g., \"PAY BY CHECK\", \"PAY BY UTIL-AUPY\").</li> <li>Check Number Assignment:</li> <li>Uses <code>OPCKNO</code> for prepaid checks, <code>PTNXCK</code> for non-prepaid, or 0 for credit/no pay.</li> <li>Increments <code>PTNXCK</code> for new checks unless full stub or credit/no pay.</li> <li>Stub Limits:</li> <li>Limits stubs to 12 invoices (<code>COUNT = 12</code> triggers full stub).</li> <li>Marks full stubs as <code>'F'</code> or <code>'V'</code> (void) in <code>ADPYCK</code>.</li> <li>Credit/No Pay:</li> <li>Negative or zero-amount checks (<code>CKAMT = 0</code>) are marked as credit/no pay (<code>AXRECD = 'C'</code>) with <code>AXCHEK = 0</code>.</li> <li>Adjusts prior full stub records in <code>ADPYCK</code> to credit/no pay.</li> <li>Check Validation:</li> <li>Non-void checks must not exist in <code>APCHKR</code> or must not be open (<code>AMCODE \u2260 'O'</code>).</li> <li>Void checks must exist, be open (<code>AMCODE = 'O'</code>), and have matching amounts.</li> <li>Vendor Information:</li> <li>Retrieves <code>VNNAME</code> and <code>VNSORT</code> from <code>APVEND</code> or <code>APOPEN</code> if not found.</li> <li>Uses ADP payroll ID (<code>VNPRID</code>) for <code>APEEPY</code> output.</li> <li>Totals and Aggregates:</li> <li>Tracks company-level (<code>L6CNT</code>, <code>L6GRAM</code>, <code>L6DISC</code>, <code>L6LPAM</code>), prepaid (<code>P6CNT</code>, <code>P6GRAM</code>, <code>P6DISC</code>, <code>P6LPAM</code>), and check-level (<code>C6CNT</code>, <code>C6GRAM</code>, <code>C6DISC</code>, <code>C6LPAM</code>) totals.</li> <li>Resets check-level totals (<code>CKGRAM</code>, <code>CKDISC</code>, <code>CKAMT</code>) after each check.</li> <li>Report Formatting:</li> <li>Prints detailed reports with invoice details, check totals, and company summaries.</li> <li>Handles overflow and page breaks.</li> <li>Outputs summary data to <code>APEEPY</code> for payroll integration.</li> </ol>"},{"location":"accounts-payable/06%20ADP%20Expenses/AP145%20RPG/#tables-files-used","title":"Tables (Files) Used","text":"<p>The program uses the following files: 1. ADPPAY: A/P payment file (226 bytes, update mode, <code>UP</code>, indexed by 16 keys). Primary input with payment data (e.g., <code>OPCONO</code>, <code>OPVEND</code>, <code>OPVONO</code>, <code>OPGRAM</code>, <code>OPDISC</code>, <code>OPLPAM</code>, <code>OPPAID</code>). 2. AP145S: Sorted A/P payment file (3 bytes, input with relations, <code>IR</code>). Used for matching records (extension of <code>ADPPAY</code>). 3. APCONT: A/P control file (256 bytes, input, <code>IC</code>, indexed by 2 keys). Contains company data (e.g., <code>ACNAME</code>, <code>ACPRE#</code>). 4. ADPYTR: A/P transaction file (128 bytes, input, <code>IC</code>, indexed by 5 keys). Provides next check number (<code>PTNXCK</code>) and payment type (<code>PTHOLD</code>). 5. APVEND: Vendor master file (579 bytes, input, <code>IC</code>, indexed by 7 keys). Contains vendor details (e.g., <code>VNNAME</code>, <code>VNSORT</code>, <code>VNPRID</code>). 6. APOPEN: A/P open items file (384 bytes, input, <code>IC</code>, indexed by 16 keys). Provides vendor name and sort data if not in <code>APVEND</code>. 7. APCHKR: Check register file (128 bytes, input, <code>IC</code>, indexed by 16 keys). Validates check status (<code>AMCODE</code>, <code>AMCKAM</code>). 8. ADPYCK: Check file (96 bytes, update mode, <code>UC</code>, indexed by 9 keys). Stores check records (e.g., <code>AXRECD</code>, <code>AXCHEK</code>). 9. APEEEXP: Printer file (142 bytes, output, <code>O</code>). Primary employee expense report. 10. APEEEXPO: Printer file (142 bytes, output, <code>O</code>). Secondary report (paperless). 11. APEEPY: Employee expense disk file (74 bytes, output, <code>O</code>). Summary for payroll integration.</p>"},{"location":"accounts-payable/06%20ADP%20Expenses/AP145%20RPG/#external-programs-called","title":"External Programs Called","text":"<p>The <code>AP145</code> program does not explicitly call any external programs. It is self-contained, relying on internal subroutines (<code>L6DET</code>, <code>L4DET</code>, <code>CHECK</code>, <code>NOPAY</code>, <code>EDITCK</code>) for processing.</p>"},{"location":"accounts-payable/06%20ADP%20Expenses/AP145%20RPG/#summary","title":"Summary","text":"<p>AP145 generates the final employee expense report and spreadsheet by: - Processing sorted <code>ADPPAY</code> records to accumulate invoice and check totals. - Validating checks against <code>APCHKR</code> and handling credit/no pay cases. - Retrieving vendor and company data from <code>APVEND</code>, <code>APOPEN</code>, and <code>APCONT</code>. - Writing check records to <code>ADPYCK</code> and summary data to <code>APEEPY</code>. - Printing detailed reports (<code>APEEEXP</code>, <code>APEEEXPO</code>) with headers, invoice details, check totals, and company summaries. - Supporting payment types (checks, ACH, wire, employee expense, utility auto-pay). - Using 11 files and no external programs.</p> <p>The output (<code>APEEEXP</code>, <code>APEEEXPO</code>, <code>APEEPY</code>) completes the A/P employee expense process defined in the OCL script.</p>"},{"location":"accounts-receivable/01%20Customer/01%20Customer%20Master%20AP900/AP900%20OCL/","title":"AP900 OCL","text":"<p>The provided document is an Operation Control Language (OCL) program for an IBM System/3x or AS/400 system, specifically for managing customer master data (add/update) in an Accounts Receivable (AR) system. Below, I\u2019ll explain the process steps of the OCL program, list the external programs called, and identify the tables (files) used.</p>"},{"location":"accounts-receivable/01%20Customer/01%20Customer%20Master%20AP900/AP900%20OCL/#process-steps-of-the-rpg-ocl-program","title":"Process Steps of the RPG .OCL Program","text":"<p>OCL is used to define job control and file operations for RPG (Report Program Generator) programs on IBM midrange systems. The program <code>AR900.ocl36.txt</code> sets up the environment and files needed to execute the RPG program <code>AR900</code> and its associated subprograms. Here\u2019s a step-by-step breakdown of the process:</p> <ol> <li>Program and Environment Setup:</li> <li> <p>The OCL starts with comments and directives to configure the environment:</p> <ul> <li><code>SCPROCP ,,,,,,,,?9?</code>: Likely a system procedure call or parameter placeholder (<code>?9?</code> is a variable substituted at runtime).</li> <li><code>GSY2K</code>: Possibly a Year 2000 compliance flag or system identifier.</li> <li><code>LOCAL OFFSET-480,DATA-'?9?'</code>, <code>LOCAL OFFSET-410,DATA-'?WS?'</code>, <code>LOCAL OFFSET-400,DATA-'?USER?'</code>: These set local variables or parameters, such as a company code (<code>?9?</code>), workstation ID (<code>?WS?</code>), or user ID (<code>?USER?</code>), which are passed to the program at runtime.</li> </ul> </li> <li> <p>Index Build for Credit Details File:</p> </li> <li> <p>The <code>IFF</code> (If) statement checks if the program <code>AR300</code> is active and if the <code>CRDETX</code> file contains a specific data field (<code>?9?CRDETX</code>):</p> <ul> <li><code>BLDINDEX ?9?CRDETX,2,8,+ ?9?ARDETL,,DUPKEY,,71,8,10,7</code>: This builds an index for the <code>CRDETX</code> file (credit details) to optimize access. The parameters specify:</li> <li>Starting position (2), length (8) for the key.</li> <li><code>?9?ARDETL</code> as the output file.</li> <li><code>DUPKEY</code> allows duplicate keys.</li> <li>Additional key fields at positions 71 (length 8), 10 (length 7).</li> </ul> </li> <li> <p>Load the Main Program:</p> </li> <li> <p><code>LOAD AR900</code>: Loads the RPG program <code>AR900</code>, which handles the core logic for adding or updating customer master records.</p> </li> <li> <p>File Definitions:</p> </li> <li> <p>The OCL defines multiple files (tables) used by <code>AR900</code> and its subprograms, all opened in shared mode (<code>DISP-SHR</code>):</p> <ul> <li><code>ARCUST</code>: Customer master file.</li> <li><code>ARCUSP</code>: Customer profile or secondary customer file.</li> <li><code>ARCUPR</code>: Customer pricing or rate file.</li> <li><code>CRDETX</code>: Credit details file.</li> <li><code>ARCONT</code>: AR control file (likely for configuration settings).</li> <li><code>BICONT</code>: Billing control file.</li> <li><code>GSPROD</code>: General system product file.</li> <li><code>GSTABL</code>: General system table file.</li> <li><code>BISLTX</code>: Billing sales tax file.</li> <li><code>ARCLGR</code>: AR customer ledger file.</li> <li><code>ARCUST2</code>: Alternate customer master file (same label as <code>ARCUST</code>).</li> <li><code>ARCUSHS</code>: Customer ship-to history file.</li> <li><code>ARCUSPH</code>: Customer phone history file.</li> <li><code>ARCUPHS</code>: Customer pricing history file.</li> </ul> </li> <li> <p>File Definitions for Called Programs:</p> </li> <li> <p>Additional files are defined for specific subprograms called by <code>AR900</code>:</p> <ul> <li>For <code>AR9009</code> (likely a utility or data fix program):</li> <li><code>SA5FIXD</code>, <code>SA5FIXM</code>: Fixed data files.</li> <li><code>SA5BCXD</code>, <code>SA5BCXM</code>: Billing credit files.</li> <li><code>SA5DBXD</code>, <code>SA5DBXM</code>: Debit files.</li> <li><code>SA5COXD</code>, <code>SA5COXM</code>: Customer order files.</li> <li>For <code>AR9006</code> (possibly a pricing update program):</li> <li><code>PFARCUPR</code>, <code>PTARCUPR</code>: Pricing files (same label as <code>ARCUPR</code> but with different prefixes).</li> <li>For <code>AR915P</code> (possibly a customer file maintenance program):</li> <li><code>ARCUFM</code>, <code>ARCUFMX</code>: Customer file maintenance files.</li> <li>For <code>BI907</code> (likely a billing or shipping program):</li> <li><code>SHIPTO</code>: Ship-to address file.</li> <li><code>ARCUP3</code>: Another customer pricing file.</li> </ul> </li> <li> <p>Execute the Program:</p> </li> <li> <p><code>RUN</code>: Executes the <code>AR900</code> program, which processes customer master add/update operations using the defined files and calls subprograms as needed.</p> </li> <li> <p>Post-Processing:</p> </li> <li>The OCL ends with <code>ARFX39 ,,,,,,,,?9?</code>, which might be a cleanup procedure or a call to another program for final processing (e.g., logging or file closing).</li> </ol>"},{"location":"accounts-receivable/01%20Customer/01%20Customer%20Master%20AP900/AP900%20OCL/#external-programs-called","title":"External Programs Called","text":"<p>The OCL references the following external programs: 1. AR900: The main RPG program for customer master add/update. 2. AR9009: A utility program, possibly for data fixes or validations. 3. AR9006: A program likely related to customer pricing updates. 4. AR915P: A program for customer file maintenance. 5. BI907: A billing or shipping-related program. 6. AR300: Referenced in the <code>IFF</code> condition, possibly for checking system status. 7. ARFX39: Likely a cleanup or final processing program.</p>"},{"location":"accounts-receivable/01%20Customer/01%20Customer%20Master%20AP900/AP900%20OCL/#tables-files-used","title":"Tables (Files) Used","text":"<p>The OCL defines the following files (tables) used by the program and its subprograms: 1. ARCUST: Customer master file. 2. ARCUSP: Customer profile file. 3. ARCUPR: Customer pricing file. 4. CRDETX: Credit details file. 5. ARCONT: AR control file. 6. BICONT: Billing control file. 7. GSPROD: General system product file. 8. GSTABL: General system table file. 9. BISLTX: Billing sales tax file. 10. ARCLGR: AR customer ledger file. 11. ARCUST2: Alternate customer master file. 12. ARCUSHS: Customer ship-to history file. 13. ARCUSPH: Customer phone history file. 14. ARCUPHS: Customer pricing history file. 15. SA5FIXD: Fixed data file (for <code>AR9009</code>). 16. SA5FIXM: Fixed master file (for <code>AR9009</code>). 17. SA5BCXD: Billing credit fixed data (for <code>AR9009</code>). 18. SA5BCXM: Billing credit fixed master file (for <code>AR9009</code>). 19. SA5DBXD: Debit fixed data file (for <code>AR9009</code>). 20. SA5DBXM: Debit master file (for <code>AR9009</code>). 21. SA5COXD: Customer order fixed data (for <code>AR9009</code>). 22. SA5COXM: Customer order master file (for <code>AR9009</code>). 23. PFARCUPR: Pricing file (for <code>AR9006</code>). 24. PTARCUPR: Pricing file (for <code>AR9006</code>). 25. ARCUFM: Customer file maintenance file (for <code>AR915P</code>). 26. ARCUFMX: Customer file maintenance index file (for <code>AR915P</code>). 27. SHIPTO: Ship-to address file (for <code>BI907</code>). 28. ARCUP3: Customer pricing file (for <code>BI907</code>). 29. ARDETL: Output file for index build (referenced in <code>BLDINDEX</code>).</p>"},{"location":"accounts-receivable/01%20Customer/01%20Customer%20Master%20AP900/AP900%20OCL/#summary","title":"Summary","text":"<p>The <code>AR900.ocl36.txt</code> OCL program orchestrates the execution of the <code>AR900</code> RPG program to add or update customer master records in an Accounts Receivable system. It: - Sets up the environment and parameters. - Builds an index for the credit details file if conditions are met. - Loads the main program and defines shared files for customer, billing, and system data. - Calls subprograms (<code>AR9009</code>, <code>AR9006</code>, <code>AR915P</code>, <code>BI907</code>) for specific tasks like data fixes, pricing updates, file maintenance, and billing/shipping. - Executes the program and performs post-processing.</p> <p>The program interacts with 29 files (tables) and calls 7 external programs to manage customer-related data comprehensively.</p>"},{"location":"accounts-receivable/01%20Customer/01%20Customer%20Master%20AP900/AP900%20RPGLE/","title":"AP900 RPGLE","text":"<p>The <code>AR900.rpgle.txt</code> is an RPGLE (RPG IV) program called by the <code>AR900.ocl36.txt</code> OCL program, designed for maintaining the Accounts Receivable (AR) customer master file. It handles adding, updating, and reactivating customer records, with additional features like history tracking and validation. Below, I\u2019ll explain the process steps, business rules, tables used, and external programs called.</p>"},{"location":"accounts-receivable/01%20Customer/01%20Customer%20Master%20AP900/AP900%20RPGLE/#process-steps-of-the-rpgle-program-ar900","title":"Process Steps of the RPGLE Program (AR900)","text":"<p>The program is a screen-based application for customer master file maintenance, operating in two modes: Entry Mode (add new customers) and Update Mode (modify existing customers). It uses multiple display file formats (<code>FMT01</code>, <code>FMT02</code>, <code>FMT03</code>, <code>FMT05</code>) to interact with users and updates files like <code>ARCUST</code> (customer master) and <code>ARCUSP</code> (supplemental customer data). Here\u2019s a step-by-step breakdown of the process:</p> <ol> <li>Program Initialization (<code>ONETIM</code> Subroutine):</li> <li>Initializes variables (e.g., <code>CO</code>, <code>CUSN</code>, <code>ZERO5</code>, <code>ZERO6</code>, etc.) to zero or blanks.</li> <li>Sets up key fields for table lookups (<code>SLKEY</code>, <code>TRMKEY</code>, <code>CUCLKY</code>, <code>GRUPKY</code>).</li> <li>Captures system date (<code>UDATE</code>) and time (<code>SYSTIM</code>) for history file updates, formatting the date as <code>SYSCYM</code> (e.g., <code>20YYMMDD</code>).</li> <li> <p>Sets the initial screen format (<code>FMT01</code>) and indicator <code>81</code> for display.</p> </li> <li> <p>Main Processing Loop:</p> </li> <li>The program enters a loop (<code>fmtagn</code>) that displays and processes screen formats until terminated (e.g., via <code>KG</code> for End of Job).</li> <li>Depending on indicators (<code>*IN81</code>, <code>*IN82</code>, <code>*IN83</code>, <code>*IN85</code>), it displays one of the following:<ul> <li><code>FMT01</code>: Initial customer lookup screen.</li> <li><code>FMT02</code>: Customer details entry/update screen.</li> <li><code>FMT03</code>: Supplemental customer data screen.</li> <li><code>FMT05</code>: Additional maintenance screen (e.g., for ship-to products).</li> </ul> </li> <li> <p>Clears error messages (<code>MSG1</code>, <code>MSG2</code>) and indicators before each screen display.</p> </li> <li> <p>Screen Processing:</p> </li> <li> <p>S1 (FMT01 - Customer Lookup):</p> <ul> <li>Validates the company number (<code>CO</code>) against <code>ARCONT</code>. If invalid, displays error message <code>MSG(1)</code> (\"INVALID COMPANY NUMBER ENTERED\").</li> <li>Retrieves aging limits (<code>ACLMT1</code>, <code>ACLMT2</code>, <code>ACLMT3</code>, <code>ACLMT4</code>) from <code>ARCONT</code> for display.</li> <li>Chains to <code>ARCUST</code> and <code>ARCUSP</code> using <code>ARKEY</code> (company + customer number). If not found, displays errors (<code>MSG(2)</code>, <code>MSG(22)</code>).</li> <li>Checks if the customer is deleted/inactive (<code>ARDEL = 'D'</code> or <code>'I'</code>). If so, sets indicator <code>94</code> and displays <code>MSG(6)</code> (\"THIS CUSTOMER WAS PREVIOUSLY DELETED\").</li> <li>Retrieves billing instructions (<code>BCINST</code>) from <code>BICONT</code> to set the screen header (<code>S4HEAD</code>).</li> <li>Calls <code>GETCUS</code> and <code>GETSUP</code> to populate customer and supplemental data for display.</li> <li>Sets indicator <code>82</code> to display <code>FMT02</code>.</li> </ul> </li> <li> <p>S2 (FMT02 - Customer Details):</p> <ul> <li>Handles both Entry (<code>08</code>) and Update (<code>07</code>) modes.</li> <li>In Entry Mode, validates that the customer number (<code>CUSN</code>) is not zero (<code>MSG(19)</code>) and doesn\u2019t exist in <code>ARCUST</code> (<code>MSG(7)</code>).</li> <li>Performs validations via <code>SC2EDT</code> subroutine (see Business Rules).</li> <li>If validations pass, chains to <code>ARCUSP</code> to check for existing supplemental records. If found, displays errors (<code>MSG(26)</code>, <code>MSG(27)</code>).</li> <li>Sets indicator <code>83</code> to display <code>FMT03</code>.</li> </ul> </li> <li> <p>S3 (FMT03 - Supplemental Data):</p> <ul> <li>Validates date fields (<code>STDATE</code>, <code>FSDATE</code>, <code>ICDATE</code>) for start date, last financial statement date, and insurance certification expiration date.</li> <li>Adds century to dates if not provided, using <code>Y2KCEN</code> (e.g., <code>19</code> or <code>20</code>) based on <code>Y2KCMP</code>.</li> <li>Calls <code>@DTEDT</code> to validate date formats (e.g., checks for valid months, days, leap years). If invalid, sets indicator <code>79</code> and displays errors (<code>MSG(44)</code>, <code>MSG(45)</code>, <code>MSG(46)</code>).</li> <li>Calls <code>BI907AC</code> to maintain ship-to products in <code>ARCUPR</code> (replacing previous <code>S4</code> logic).</li> <li>Sets indicator <code>85</code> to display <code>FMT05</code>.</li> </ul> </li> <li> <p>S5 (FMT05 - Final Processing):</p> <ul> <li>Updates or adds records to <code>ARCUST</code> and <code>ARCUSP</code> based on mode (<code>07</code> or <code>08</code>).</li> <li>Updates <code>ARCLGR</code> (group ledger) to synchronize the credit problem flag (<code>CLPB</code>) across grouped accounts.</li> <li>Writes history records to <code>ARCUSHS</code> (customer history) and <code>ARCUSPH</code> (supplemental history) with system date, time, user ID, and workstation ID.</li> <li>Clears fields via <code>CLEAR</code> subroutine and redisplays <code>FMT02</code>.</li> </ul> </li> <li> <p>Command Key Processing:</p> </li> <li>KA (Rekey): Clears fields (<code>CLEAR</code>) and redisplays <code>FMT01</code> or <code>FMT02</code> based on mode.</li> <li>KD (Delete/Reactivate):<ul> <li>Delete: Checks if the customer has outstanding invoices (<code>BAL \u2260 0</code>). If so, displays <code>MSG(9)</code> and <code>MSG(10)</code> (\"THIS CUSTOMER HAS OUTSTANDING INVOICES\"). If not, marks <code>ARCUST</code> and <code>ARCUSP</code> as inactive (<code>'I'</code>) instead of deleting (per revision note).</li> <li>Reactivate: Clears the delete flag (<code>ARDEL</code>, <code>CSDEL</code>) and sets status to active (<code>'A'</code>), displaying <code>MSG(12)</code> (\"PREVIOUS CUSTOMER WAS REACTIVATED\").</li> </ul> </li> <li>KG (End of Job): Sets <code>LR</code> (Last Record) indicator, closes files, and exits.</li> <li>KJ (Entry Mode): Clears fields, sets <code>08</code> (Entry Mode), and displays <code>FMT02</code>.</li> <li> <p>KK (Update Mode): Clears fields, sets <code>07</code> (Update Mode), and displays <code>FMT02</code>.</p> </li> <li> <p>End of Program:</p> </li> <li>Closes all files, sets <code>*INLR = *ON</code>, and returns.</li> </ol>"},{"location":"accounts-receivable/01%20Customer/01%20Customer%20Master%20AP900/AP900%20RPGLE/#business-rules","title":"Business Rules","text":"<p>The program enforces the following business rules: 1. Customer Number Validation:    - Must not be zero in Entry Mode (<code>MSG(19)</code>).    - Must not already exist in <code>ARCUST</code> for new records (<code>MSG(7)</code>).    - Must exist in <code>ARCUST</code> and <code>ARCUSP</code> for updates.</p> <ol> <li>Mandatory Fields:</li> <li>Sort name (<code>LSTN</code>) must not be blank (<code>MSG(21)</code>).</li> <li>Federal EIN (<code>FEIN</code>) is required (<code>MSG(55)</code>).</li> <li> <p>State (<code>STAT</code>) must not be blank (<code>MSG(29)</code>).</p> </li> <li> <p>Code Validations (checked against <code>GSTABL</code>):</p> </li> <li>Salesman number (<code>SLS#</code>): Must exist in <code>GSTABL</code> (<code>MSG(13)</code>).</li> <li>Terms code (<code>TERM</code>): Must exist in <code>GSTABL</code> (<code>MSG(14)</code>).</li> <li> <p>Customer class (<code>CCLASS</code>): Must exist in <code>GSTABL</code> under <code>ARCUCL</code> table type (<code>MSG(47)</code>).</p> </li> <li> <p>Valid Codes:</p> </li> <li>Statement code (<code>STMT</code>): Must be <code>Y</code>, <code>N</code>, or blank (<code>MSG(16)</code>).</li> <li>Finance charge code (<code>FINC</code>): Must be <code>Y</code>, <code>N</code>, or blank (<code>MSG(17)</code>).</li> <li>Separate freight code (<code>SFRT</code>): Must be <code>Y</code>, <code>N</code>, or blank (<code>MSG(30)</code>).</li> <li>Freight code (<code>FRCD</code>): Must be <code>C</code> (Collect), <code>P</code> (Prepaid), <code>A</code> (Prepaid &amp; Add), or blank (<code>MSG(35)</code>).</li> <li>EFT participant (<code>EFT</code>): Must be <code>Y</code>, <code>N</code>, or blank (<code>MSG(32)</code>).</li> <li>EDI participant (<code>EDI</code>): Must be <code>Y</code>, <code>N</code>, or blank (<code>MSG(50)</code>).</li> <li>Credit problem code (<code>CLPB</code>): Must be <code>Y</code>, <code>N</code>, or blank (<code>MSG(51)</code>).</li> <li>Wire transfer code (<code>WIRE</code>): Must be <code>Y</code>, <code>N</code>, or blank (<code>MSG(52)</code>).</li> <li>Duplicate order match type (<code>DUPC</code>): Must be <code>A</code> (match on customer/ship-to/product), <code>B</code> (match on customer/ship-to/product/PO#), or blank (<code>MSG(53)</code>).</li> <li> <p>Product move code (<code>PRMV</code>): Must be <code>Y</code>, <code>N</code>, or blank (<code>MSG(50)</code>).</p> </li> <li> <p>EFT Validation:</p> </li> <li> <p>If <code>AREFT = 'Y'</code>, bank routing code (<code>CSARTE</code>) and account number (<code>CSABK#</code>) must not be blank (<code>indicator 40</code>).</p> </li> <li> <p>Date Validation:</p> </li> <li>Validates <code>STDATE</code> (start date), <code>FSDATE</code> (financial statement date), and <code>ICDATE</code> (insurance certification date) using <code>@DTEDT</code>.</li> <li>Ensures valid months (1-12), days (1-31 or 1-28/29 for February), and leap year logic.</li> <li> <p>Adds century (<code>Y2KCEN</code>) to two-digit years based on <code>Y2KCMP</code>.</p> </li> <li> <p>Group Credit Synchronization:</p> </li> <li> <p>Updates <code>CLPB</code> (credit problem flag) in <code>ARCUST2</code> for all customers in the same group (<code>ARCLGR</code>) when modified.</p> </li> <li> <p>Deletion Rules:</p> </li> <li>Customers with outstanding invoices (<code>BAL \u2260 0</code>) cannot be deleted (<code>MSG(9)</code>, <code>MSG(10)</code>).</li> <li> <p>Deletion marks records as inactive (<code>'I'</code>) instead of physical deletion (<code>JB11</code> revision).</p> </li> <li> <p>Freight Handling:</p> </li> <li>Supports <code>C</code> (freight collect), <code>P</code> (prepaid), <code>A</code> (prepaid &amp; add) (<code>JB09</code>, <code>JB10</code>).</li> <li>Special case for freight collect with a $100 service fee (<code>CYY</code>) when shipping is arranged by ARG but billed by the carrier.</li> </ol>"},{"location":"accounts-receivable/01%20Customer/01%20Customer%20Master%20AP900/AP900%20RPGLE/#tables-files-used","title":"Tables (Files) Used","text":"<p>The program uses the following files: 1. AR900D (<code>WORKSTN</code>): Display file for user interaction, externally described with <code>PROFOUNDUI</code> handler (<code>JB11</code>). 2. ARCUST (<code>UF A</code>, 384 bytes, key starts at position 2): Customer master file for add/update. 3. ARCUSP (<code>UF A</code>, 1344 bytes, key starts at position 2): Supplemental customer data file. 4. GSTABL (<code>IF</code>, 256 bytes, key starts at position 2): General system table for validating salesman, terms, and customer class codes. 5. ARCONT (<code>IF</code>, 256 bytes, key starts at position 2): AR control file for aging limits. 6. BICONT (<code>IF</code>, 256 bytes, key starts at position 2): Billing control file for invoicing style. 7. ARCLGR (<code>IF</code>, 240 bytes, key starts at position 2): Customer group ledger file for credit synchronization. 8. ARCUST2 (<code>UF</code>, 384 bytes, key starts at position 2): Alternate customer master file for group updates. 9. ARCUSHS (<code>O A</code>, 411 bytes, key starts at position 2): Customer history file. 10. ARCUSPH (<code>O A</code>, 1371 bytes, key starts at position 2): Supplemental customer history file.</p>"},{"location":"accounts-receivable/01%20Customer/01%20Customer%20Master%20AP900/AP900%20RPGLE/#external-programs-called","title":"External Programs Called","text":"<p>The program calls the following external programs: 1. BI907AC (<code>JB08</code>): Maintains ship-to products in <code>ARCUPR</code> (replaces <code>S4</code> logic).    - Parameters: Company (<code>@CPCO</code>), Customer (<code>@CPCUS</code>), Ship-to (<code>@CPSHP</code>), Mode (<code>@CPMI = 'MNT'</code>), File Group (<code>@CPFGR</code>).</p> <p>Note: The following calls are commented out (<code>DC01</code>, <code>JK01</code>), indicating they are no longer used but were part of earlier versions: - AR915P: For customer form type contacts maintenance (<code>ARCUFM</code>). - GB730P: For history inquiries on <code>ARCUST</code> and <code>ARCUSP</code>.</p>"},{"location":"accounts-receivable/01%20Customer/01%20Customer%20Master%20AP900/AP900%20RPGLE/#summary","title":"Summary","text":"<p>The <code>AR900</code> RPGLE program is a comprehensive customer master maintenance application that: - Manages customer data (<code>ARCUST</code>, <code>ARCUSP</code>) through interactive screens (<code>FMT01</code>\u2013<code>FMT05</code>). - Supports adding, updating, and reactivating customers with strict validations (e.g., mandatory fields, valid codes, date checks). - Synchronizes credit problem flags across grouped accounts (<code>ARCLGR</code>). - Maintains history files (<code>ARCUSHS</code>, <code>ARCUSPH</code>) for auditing. - Integrates with <code>BI907AC</code> for ship-to product maintenance. - Uses 10 files and calls 1 active external program (<code>BI907AC</code>).</p> <p>The program enforces robust business rules to ensure data integrity, including validations against <code>GSTABL</code>, restrictions on deletions, and special freight handling logic.</p>"},{"location":"accounts-receivable/01%20Customer/01%20Customer%20Master%20AP900/Summary%20AP900%20Customer/","title":"Summary AP900 Customer","text":"<p>Based on the provided <code>AR900.ocl36.txt</code> and <code>AR900.rpgle.txt</code> files, the RPGLE program <code>AR900</code>, orchestrated by the OCL program, implements a customer master file maintenance system for an Accounts Receivable (AR) application. Below, I\u2019ll identify the use cases implemented by the program and then provide a Function Requirement Document for a non-interactive version of the primary use case, assuming it processes inputs programmatically rather than through screen interactions.</p>"},{"location":"accounts-receivable/01%20Customer/01%20Customer%20Master%20AP900/Summary%20AP900%20Customer/#use-cases-implemented-by-the-program","title":"Use Cases Implemented by the Program","text":"<p>The <code>AR900</code> program primarily supports a single overarching use case with multiple sub-functions, all centered around maintaining customer master data. The use case and its sub-functions are:</p> <p>Use Case: Customer Master File Maintenance - Description: This use case allows for the addition, update, and reactivation of customer records in the Accounts Receivable system, including core customer data (<code>ARCUST</code>), supplemental data (<code>ARCUSP</code>), and related history files (<code>ARCUSHS</code>, <code>ARCUSPH</code>). It also synchronizes credit problem flags across grouped accounts (<code>ARCLGR</code>) and supports ship-to product maintenance via an external program (<code>BI907AC</code>). - Sub-Functions:   1. Add New Customer: Creates a new customer record in <code>ARCUST</code> and <code>ARCUSP</code>, with validations for mandatory fields, unique customer numbers, and valid codes (e.g., salesman, terms, customer class).   2. Update Existing Customer: Modifies existing customer records in <code>ARCUST</code> and <code>ARCUSP</code>, ensuring valid data updates and maintaining history records.   3. Reactivate Inactive Customer: Restores an inactive customer (marked with <code>'I'</code> in <code>ARCUST</code> and <code>ARCUSP</code>) to active status (<code>'A'</code>).   4. Mark Customer as Inactive: Marks a customer as inactive (<code>'I'</code>) instead of deleting, provided there are no outstanding invoices.   5. Synchronize Credit Problem Flag: Updates the credit problem flag (<code>CLPB</code>) across all grouped accounts in <code>ARCLGR</code> when modified for a customer.   6. Maintain Ship-to Products: Calls <code>BI907AC</code> to manage ship-to product data in <code>ARCUPR</code> for the customer.   7. Record History: Logs changes to customer and supplemental data in <code>ARCUSHS</code> and <code>ARCUSPH</code>, including system date, time, user ID, and workstation ID.</p> <p>While the program supports these sub-functions, they are all part of the broader Customer Master File Maintenance use case, as the program is designed to handle all aspects of customer data management within a single interactive workflow.</p>"},{"location":"accounts-receivable/01%20Customer/01%20Customer%20Master%20AP900/Summary%20AP900%20Customer/#function-requirement-document","title":"Function Requirement Document","text":"<p>Document Title: Customer Master File Maintenance Function Document Purpose: To define the requirements for a non-interactive function that performs customer master file maintenance (add, update, reactivate, and mark inactive) in the Accounts Receivable system, processing inputs programmatically instead of through screen interactions.</p>"},{"location":"accounts-receivable/01%20Customer/01%20Customer%20Master%20AP900/Summary%20AP900%20Customer/#1-function-overview","title":"1. Function Overview","text":"<p>Function Name: <code>CustomerMasterMaintenance</code> Purpose: To programmatically add, update, reactivate, or mark inactive customer records in the Accounts Receivable system, ensuring data integrity through validations and maintaining history and group synchronization. Scope: The function processes customer data for <code>ARCUST</code> (customer master), <code>ARCUSP</code> (supplemental data), <code>ARCUSHS</code> (customer history), <code>ARCUSPH</code> (supplemental history), and <code>ARCLGR</code> (group ledger), and interfaces with <code>BI907AC</code> for ship-to product maintenance. Objective: To provide a reliable, automated way to manage customer master data without user interaction, suitable for batch processing or API integration.</p>"},{"location":"accounts-receivable/01%20Customer/01%20Customer%20Master%20AP900/Summary%20AP900%20Customer/#2-functional-requirements","title":"2. Functional Requirements","text":""},{"location":"accounts-receivable/01%20Customer/01%20Customer%20Master%20AP900/Summary%20AP900%20Customer/#21-inputs","title":"2.1 Inputs","text":"<p>The function accepts a structured input containing all necessary customer data fields, mode of operation, and system metadata. The input is a single data structure with the following fields:</p> <ul> <li>Mode (3 characters):</li> <li><code>ADD</code>: Add a new customer.</li> <li><code>UPD</code>: Update an existing customer.</li> <li><code>REA</code>: Reactivate an inactive customer.</li> <li><code>INA</code>: Mark a customer as inactive.</li> <li>CompanyNumber (2 digits, numeric): Company number (<code>ARCO</code>, <code>CO</code>).</li> <li>CustomerNumber (6 digits, numeric): Customer number (<code>ARCUSN</code>, <code>CUSN</code>).</li> <li>CustomerData (structure for <code>ARCUST</code> fields):</li> <li>Name (30 characters): Customer name (<code>ARNAME</code>).</li> <li>AddressLine1 (30 characters): Address line 1 (<code>ARADR1</code>).</li> <li>AddressLine2 (30 characters): Address line 2 (<code>ARADR2</code>).</li> <li>AddressLine3 (30 characters): Address line 3 (<code>ARADR3</code>).</li> <li>AddressLine4 (30 characters): Address line 4 (<code>ARADR4</code>).</li> <li>ZipCode5 (5 characters): ZIP code (<code>ARZIP5</code>).</li> <li>ZipCode9 (4 characters): ZIP + 4 (<code>ARZIP9</code>).</li> <li>AreaCode (3 digits, numeric): Phone area code (<code>ARAREA</code>).</li> <li>Telephone (4 digits, numeric): Telephone number (<code>ARTELE</code>).</li> <li>SalesmanNumber (2 digits, numeric): Salesman code (<code>ARSLS#</code>).</li> <li>TermsCode (2 digits, numeric): Terms code (<code>ARTERM</code>).</li> <li>CreditLimit (7 digits, numeric): Credit limit (<code>ARCLMT</code>).</li> <li>StatementCode (1 character): Statements Y/N (<code>ARSTMT</code>).</li> <li>FinanceChargeCode (1 character): Finance charge Y/N (<code>ARFINC</code>).</li> <li>SalesTaxCode (4 characters): State tax code (<code>ARSTAX</code>).</li> <li>SortName (10 characters): Last name abbreviation (<code>ARLSTN</code>).</li> <li>GroupCode (2 characters): Group code (<code>ARGRUP</code>).</li> <li>MilesFreight (3 digits, numeric): Miles for freight (<code>ARMILS</code>).</li> <li>InterCompanyNumber (2 digits, numeric): Inter-company number (<code>ARINTR</code>).</li> <li>StateTaxes (2 characters): State for taxes (<code>ARSTAT</code>).</li> <li>EFTParticipant (1 character): EFT participant Y/N (<code>AREFT</code>).</li> <li>GroupingCompany (2 digits, numeric): Grouping company (<code>ARGCO</code>).</li> <li>GroupingCustomer (6 digits, numeric): Grouping customer (<code>ARGCUS</code>).</li> <li>CustomerClass (1 character): Customer class (<code>ARCUCL</code>).</li> <li>EDIParticipant (1 character): EDI participant Y/N (<code>AREDI</code>).</li> <li>CreditProblem (1 character): Credit problem Y/N (<code>ARCLPB</code>).</li> <li>WireTransfer (1 character): Wire transfer Y/N (<code>ARWIRE</code>).</li> <li>FederalEIN (9 digits, numeric): Federal EIN number (<code>ARFEIN</code>).</li> <li>PAPermitClass (3 characters): PA permit class (<code>ARPMCL</code>).</li> <li>ProductMove (1 character): Product move Y/N (<code>ARPRMV</code>).</li> <li>SupplementalData (structure for <code>ARCUSP</code> fields):</li> <li>TaxCodes (array of 10 x 4 characters): Tax codes (<code>TC</code>).</li> <li>TaxExemptNumbers (array of 10 x 12 characters): Tax-exempt numbers (<code>TE</code>).</li> <li>StartDate (8 digits, numeric, <code>YYYYMMDD</code>): Customer start date (<code>CSSTDT</code>).</li> <li>FinancialStatementDate (8 digits, numeric, <code>YYYYMMDD</code>): Last financial statement date (<code>CSFSDT</code>).</li> <li>InsuranceCertDate (8 digits, numeric, <code>YYYYMMDD</code>): Insurance certification expiration date (<code>CSICDT</code>).</li> <li>LastAllocationGallons (4 digits, numeric): Last allocated gallons (<code>CSAGAL</code>).</li> <li>CreditComment1 (25 characters): Credit comment line 1 (<code>CSCMT1</code>).</li> <li>CreditComment2 (25 characters): Credit comment line 2 (<code>CSCMT2</code>).</li> <li>CreditComment3 (25 characters): Credit comment line 3 (<code>CSCMT3</code>).</li> <li>ContactName (25 characters): Contact name (<code>CSCNCT</code>).</li> <li>CreditCardCount (2 digits, numeric): Number of credit cards (<code>CSCARD</code>).</li> <li>SeparateFreight (1 character): Separate freight Y/N (<code>CSSFRT</code>).</li> <li>OrderMarks1-4 (4 x 60 characters): Order marks (<code>CSOMK1</code>\u2013<code>CSOMK4</code>).</li> <li>InvoiceMarks1-2 (2 x 60 characters): Invoice marks (<code>CSIMK1</code>\u2013<code>CSIMK2</code>).</li> <li>DispatchInfo1-4 (4 x 60 characters): Dispatch information (<code>CSDSP1</code>\u2013<code>CSDSP4</code>).</li> <li>BillOfLadingMarks1-4 (4 x 60 characters): Bill of lading marks (<code>CSBMK1</code>\u2013<code>CSBMK4</code>).</li> <li>FreightCode (1 character): Freight code (<code>CSFRCD</code>, <code>C</code>, <code>P</code>, <code>A</code>).</li> <li>FreightBillName (30 characters): Freight bill name (<code>CSFRNM</code>).</li> <li>FreightBillAddress1-3 (3 x 30 characters): Freight bill address (<code>CSFRA1</code>\u2013<code>CSFRA3</code>).</li> <li>BlanketPO (15 characters): Blanket purchase order (<code>CSBKPO</code>).</li> <li>DuplicateOrderMatchType (1 character): Duplicate order match type (<code>CSDUPC</code>, <code>A</code>, <code>B</code>).</li> <li>DuplicateOverrideDays (3 digits, numeric): Override days for duplicate check (<code>CSDUPD</code>).</li> <li>CrossReferenceSet (6 characters): Cross-reference set name (<code>CSXSET</code>).</li> <li>ACHClass (3 characters): ACH class (<code>CSACLS</code>).</li> <li>ACHAccountType (1 character): ACH checking/savings (<code>CSACOS</code>).</li> <li>ACHBankRoutingCode (9 digits, numeric): ACH bank routing code (<code>CSARTE</code>).</li> <li>ACHBankAccountNumber (17 characters): ACH bank account number (<code>CSABK#</code>).</li> <li>SystemMetadata:</li> <li>UserID (8 characters): User performing the operation (<code>USERID</code>).</li> <li>WorkstationID (2 characters): Workstation ID (<code>WSID</code>).</li> <li>TestPeriod (1 character): Test period flag (<code>TSTPRD</code>).</li> </ul>"},{"location":"accounts-receivable/01%20Customer/01%20Customer%20Master%20AP900/Summary%20AP900%20Customer/#22-outputs","title":"2.2 Outputs","text":"<ul> <li>StatusCode (3 characters): Indicates success or failure (<code>SUC</code> for success, <code>ERR</code> for error).</li> <li>ErrorMessage (80 characters): Descriptive error message if the operation fails (combines <code>MSG1</code> and <code>MSG2</code> from the original program).</li> <li>UpdatedCustomerNumber (6 digits, numeric): The customer number processed, returned for confirmation.</li> </ul>"},{"location":"accounts-receivable/01%20Customer/01%20Customer%20Master%20AP900/Summary%20AP900%20Customer/#23-processing-steps","title":"2.3 Processing Steps","text":"<ol> <li>Initialization:</li> <li>Validate that <code>CompanyNumber</code> exists in <code>ARCONT</code>. If not, return <code>ERR</code> with \"INVALID COMPANY NUMBER ENTERED\".</li> <li>Retrieve aging limits (<code>ACLMT1</code>\u2013<code>ACLMT4</code>) from <code>ARCONT</code> for validation context.</li> <li> <p>Retrieve billing instructions (<code>BCINST</code>) from <code>BICONT</code>.</p> </li> <li> <p>Mode-Specific Validation:</p> </li> <li> <p>ADD Mode:</p> <ul> <li>Ensure <code>CustomerNumber</code> is not zero and does not exist in <code>ARCUST</code> or <code>ARCUSP</code>. If it exists, return <code>ERR</code> with \"CUSTOMER # IS ALREADY USED\".</li> <li>Validate all mandatory fields (e.g., <code>SortName</code>, <code>FederalEIN</code>, <code>StateTaxes</code>).</li> <li>Validate codes against <code>GSTABL</code> (e.g., <code>SalesmanNumber</code>, <code>TermsCode</code>, <code>CustomerClass</code>).</li> <li>Validate <code>StatementCode</code>, <code>FinanceChargeCode</code>, <code>SeparateFreight</code>, <code>FreightCode</code>, <code>EFTParticipant</code>, <code>EDIParticipant</code>, <code>CreditProblem</code>, <code>WireTransfer</code>, <code>DuplicateOrderMatchType</code>, <code>ProductMove</code> (must be <code>Y</code>, <code>N</code>, or blank, except <code>FreightCode</code> which can be <code>C</code>, <code>P</code>, <code>A</code>).</li> <li>If <code>EFTParticipant = 'Y'</code>, ensure <code>ACHBankRoutingCode</code> and <code>ACHBankAccountNumber</code> are provided.</li> <li>Validate dates (<code>StartDate</code>, <code>FinancialStatementDate</code>, <code>InsuranceCertDate</code>) for correct format (<code>YYYYMMDD</code>), valid months (1-12), days (1-31 or 1-28/29 for February), and leap year logic.</li> </ul> </li> <li> <p>UPD Mode:</p> <ul> <li>Ensure <code>CustomerNumber</code> exists in <code>ARCUST</code> and <code>ARCUSP</code>. If not, return <code>ERR</code> with \"CUSTOMER NOT FOUND\".</li> <li>Validate all fields as in ADD mode.</li> <li>Check that the customer is not inactive (<code>ARDEL \u2260 'I'</code> or <code>'D'</code>).</li> </ul> </li> <li> <p>REA Mode:</p> <ul> <li>Ensure <code>CustomerNumber</code> exists in <code>ARCUST</code> and <code>ARCUSP</code> and is inactive (<code>ARDEL = 'I'</code> or <code>'D'</code>). If not, return <code>ERR</code> with \"THIS CUSTOMER WAS NOT PREVIOUSLY DELETED\".</li> <li>Validate minimal fields (e.g., <code>CompanyNumber</code>, <code>CustomerNumber</code>).</li> </ul> </li> <li> <p>INA Mode:</p> <ul> <li>Ensure <code>CustomerNumber</code> exists in <code>ARCUST</code> and <code>ARCUSP</code>. If not, return <code>ERR</code> with \"CUSTOMER NOT FOUND\".</li> <li>Check for outstanding invoices by summing aging fields (<code>AGE</code>) in <code>ARCUST</code>. If non-zero, return <code>ERR</code> with \"THIS CUSTOMER HAS OUTSTANDING INVOICES\".</li> <li>Validate minimal fields (e.g., <code>CompanyNumber</code>, <code>CustomerNumber</code>).</li> </ul> </li> <li> <p>Data Processing:</p> </li> <li> <p>ADD/UPD Mode:</p> <ul> <li>Write or update records in <code>ARCUST</code> and <code>ARCUSP</code> with provided data.</li> <li>Write history records to <code>ARCUSHS</code> and <code>ARCUSPH</code>, including <code>SystemMetadata</code> (<code>SYSCYM</code>, <code>SYSTIM</code>, <code>USERID</code>, <code>WSID</code>).</li> <li>If <code>CreditProblem</code> is updated, synchronize <code>CLPB</code> across grouped accounts in <code>ARCLGR</code> using <code>ARCUST2</code>.</li> <li>Call <code>BI907AC</code> with parameters (<code>CompanyNumber</code>, <code>CustomerNumber</code>, <code>ShipTo = '000'</code>, <code>Mode = 'MNT'</code>, <code>FileGroup = ' '</code>) to maintain ship-to products in <code>ARCUPR</code>.</li> </ul> </li> <li> <p>REA Mode:</p> <ul> <li>Update <code>ARCUST</code> and <code>ARCUSP</code> to set <code>ARDEL</code> and <code>CSDEL</code> to <code>'A'</code> (active).</li> <li>Write history records to <code>ARCUSHS</code> and <code>ARCUSPH</code>.</li> </ul> </li> <li> <p>INA Mode:</p> <ul> <li>Update <code>ARCUST</code> and <code>ARCUSP</code> to set <code>ARDEL</code> and <code>CSDEL</code> to <code>'I'</code> (inactive).</li> <li>Write history records to <code>ARCUSHS</code> and <code>ARCUSPH</code>.</li> </ul> </li> <li> <p>Output Generation:</p> </li> <li>On success, return <code>StatusCode = 'SUC'</code>, <code>UpdatedCustomerNumber</code>, and empty <code>ErrorMessage</code>.</li> <li>On failure, return <code>StatusCode = 'ERR'</code>, <code>UpdatedCustomerNumber</code> (if applicable), and the appropriate error message (e.g., from <code>MSG</code> array).</li> </ol>"},{"location":"accounts-receivable/01%20Customer/01%20Customer%20Master%20AP900/Summary%20AP900%20Customer/#24-business-rules","title":"2.4 Business Rules","text":"<ul> <li>Mandatory Fields: <code>SortName</code>, <code>FederalEIN</code>, <code>StateTaxes</code> must not be blank.</li> <li>Code Validations:</li> <li><code>SalesmanNumber</code>, <code>TermsCode</code>, <code>CustomerClass</code> must exist in <code>GSTABL</code>.</li> <li><code>StatementCode</code>, <code>FinanceChargeCode</code>, <code>SeparateFreight</code>, <code>EFTParticipant</code>, <code>EDIParticipant</code>, <code>CreditProblem</code>, <code>WireTransfer</code>, <code>ProductMove</code> must be <code>Y</code>, <code>N</code>, or blank.</li> <li><code>FreightCode</code> must be <code>C</code>, <code>P</code>, <code>A</code>, or blank.</li> <li><code>DuplicateOrderMatchType</code> must be <code>A</code>, <code>B</code>, or blank.</li> <li>EFT Validation: If <code>EFTParticipant = 'Y'</code>, <code>ACHBankRoutingCode</code> and <code>ACHBankAccountNumber</code> must be provided.</li> <li>Date Validation: Dates must be in <code>YYYYMMDD</code> format, with valid months, days, and leap year handling.</li> <li>Deletion Restriction: Customers with outstanding invoices cannot be marked inactive.</li> <li>Group Synchronization: <code>CreditProblem</code> updates are propagated to all grouped accounts in <code>ARCLGR</code>.</li> <li>History Logging: All changes are logged in <code>ARCUSHS</code> and <code>ARCUSPH</code> with system metadata.</li> </ul>"},{"location":"accounts-receivable/01%20Customer/01%20Customer%20Master%20AP900/Summary%20AP900%20Customer/#25-error-handling","title":"2.5 Error Handling","text":"<ul> <li>Returns descriptive error messages for invalid inputs, non-existent records, or validation failures.</li> <li>Logs errors in a system log (assumed external to the function) using <code>UserID</code> and <code>WorkstationID</code>.</li> </ul>"},{"location":"accounts-receivable/01%20Customer/01%20Customer%20Master%20AP900/Summary%20AP900%20Customer/#26-performance-requirements","title":"2.6 Performance Requirements","text":"<ul> <li>Process a single customer record in under 1 second under normal system load.</li> <li>Handle up to 1000 records in a batch process without significant performance degradation.</li> </ul>"},{"location":"accounts-receivable/01%20Customer/01%20Customer%20Master%20AP900/Summary%20AP900%20Customer/#27-security-requirements","title":"2.7 Security Requirements","text":"<ul> <li>Restrict access to authorized users based on <code>UserID</code>.</li> <li>Validate <code>WorkstationID</code> against system configuration.</li> <li>Ensure sensitive data (e.g., <code>ACHBankAccountNumber</code>) is handled securely.</li> </ul>"},{"location":"accounts-receivable/01%20Customer/01%20Customer%20Master%20AP900/Summary%20AP900%20Customer/#3-non-functional-requirements","title":"3. Non-Functional Requirements","text":"<ul> <li>Platform: IBM i (AS/400) with RPGLE support.</li> <li>Files Accessed:</li> <li><code>ARCUST</code>, <code>ARCUSP</code>, <code>ARCUSHS</code>, <code>ARCUSPH</code>, <code>ARCLGR</code>, <code>ARCONT</code>, <code>BICONT</code>, <code>GSTABL</code>.</li> <li>External Program: <code>BI907AC</code> for ship-to product maintenance.</li> <li>Scalability: Must support processing multiple records in a batch.</li> <li>Reliability: Must ensure data consistency across files with rollback on failure.</li> <li>Maintainability: Code must be modular, with clear documentation of validation logic and file operations.</li> </ul>"},{"location":"accounts-receivable/01%20Customer/01%20Customer%20Master%20AP900/Summary%20AP900%20Customer/#4-assumptions","title":"4. Assumptions","text":"<ul> <li>Input data is provided in a structured format (e.g., JSON, XML, or data structure).</li> <li>The system has access to <code>GSTABL</code>, <code>ARCONT</code>, and <code>BICONT</code> for validations.</li> <li><code>BI907AC</code> is available and correctly configured.</li> <li>The calling application handles logging and user authentication.</li> </ul>"},{"location":"accounts-receivable/01%20Customer/01%20Customer%20Master%20AP900/Summary%20AP900%20Customer/#5-dependencies","title":"5. Dependencies","text":"<ul> <li>Files: <code>ARCUST</code>, <code>ARCUSP</code>, <code>ARCUSHS</code>, <code>ARCUSPH</code>, <code>ARCLGR</code>, <code>ARCONT</code>, <code>BICONT</code>, <code>GSTABL</code>.</li> <li>Program: <code>BI907AC</code>.</li> <li>System: IBM i environment with RPGLE runtime and database access.</li> </ul>"},{"location":"accounts-receivable/01%20Customer/01%20Customer%20Master%20AP900/Summary%20AP900%20Customer/#6-constraints","title":"6. Constraints","text":"<ul> <li>The function does not support physical deletion of customers (only marking as inactive, per <code>JB11</code>).</li> <li>Date fields must conform to <code>YYYYMMDD</code> format.</li> <li>Limited to processing one customer record at a time (batch processing requires iterative calls).</li> </ul>"},{"location":"accounts-receivable/01%20Customer/01%20Customer%20Master%20AP900/Summary%20AP900%20Customer/#7-acceptance-criteria","title":"7. Acceptance Criteria","text":"<ul> <li>ADD: Successfully creates new records in <code>ARCUST</code>, <code>ARCUSP</code>, <code>ARCUSHS</code>, <code>ARCUSPH</code>, and calls <code>BI907AC</code> without errors.</li> <li>UPD: Updates existing records in <code>ARCUST</code>, <code>ARCUSP</code>, logs history, and synchronizes <code>ARCLGR</code> correctly.</li> <li>REA: Reactivates inactive customers, setting <code>ARDEL</code> and <code>CSDEL</code> to <code>'A'</code>.</li> <li>INA: Marks customers as inactive if no outstanding invoices, updating <code>ARDEL</code> and <code>CSDEL</code> to <code>'I'</code>.</li> <li>All validations pass (e.g., mandatory fields, codes, dates).</li> <li>Error messages are returned for all failure scenarios.</li> <li>History records include correct system metadata (<code>SYSCYM</code>, <code>SYSTIM</code>, <code>USERID</code>, <code>WSID</code>).</li> </ul>"},{"location":"accounts-receivable/01%20Customer/01%20Customer%20Master%20AP900/Summary%20AP900%20Customer/#8-example-inputoutput","title":"8. Example Input/Output","text":"<p>Example Input (ADD Mode): <pre><code>{\n  \"Mode\": \"ADD\",\n  \"CompanyNumber\": 01,\n  \"CustomerNumber\": 123456,\n  \"CustomerData\": {\n    \"Name\": \"ABC Corp\",\n    \"AddressLine1\": \"123 Main St\",\n    \"AddressLine2\": \"\",\n    \"AddressLine3\": \"City\",\n    \"AddressLine4\": \"\",\n    \"ZipCode5\": \"12345\",\n    \"ZipCode9\": \"6789\",\n    \"AreaCode\": 123,\n    \"Telephone\": 4567,\n    \"SalesmanNumber\": 01,\n    \"TermsCode\": 01,\n    \"CreditLimit\": 10000,\n    \"StatementCode\": \"Y\",\n    \"FinanceChargeCode\": \"N\",\n    \"SalesTaxCode\": \"TX01\",\n    \"SortName\": \"ABCCORP\",\n    \"GroupCode\": \"01\",\n    \"MilesFreight\": 100,\n    \"InterCompanyNumber\": 0,\n    \"StateTaxes\": \"TX\",\n    \"EFTParticipant\": \"N\",\n    \"GroupingCompany\": 01,\n    \"GroupingCustomer\": 123456,\n    \"CustomerClass\": \"A\",\n    \"EDIParticipant\": \"N\",\n    \"CreditProblem\": \"N\",\n    \"WireTransfer\": \"N\",\n    \"FederalEIN\": 123456789,\n    \"PAPermitClass\": \"P01\",\n    \"ProductMove\": \"N\"\n  },\n  \"SupplementalData\": {\n    \"TaxCodes\": [\"TX01\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n    \"TaxExemptNumbers\": [\"EX123\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n    \"StartDate\": 20250101,\n    \"FinancialStatementDate\": 20241231,\n    \"InsuranceCertDate\": 20251231,\n    \"LastAllocationGallons\": 1000,\n    \"CreditComment1\": \"Good credit\",\n    \"CreditComment2\": \"\",\n    \"CreditComment3\": \"\",\n    \"ContactName\": \"John Doe\",\n    \"CreditCardCount\": 1,\n    \"SeparateFreight\": \"Y\",\n    \"OrderMarks1\": \"Order Mark 1\",\n    \"OrderMarks2\": \"\",\n    \"OrderMarks3\": \"\",\n    \"OrderMarks4\": \"\",\n    \"InvoiceMarks1\": \"\",\n    \"InvoiceMarks2\": \"\",\n    \"DispatchInfo1\": \"Dispatch 1\",\n    \"DispatchInfo2\": \"\",\n    \"DispatchInfo3\": \"\",\n    \"DispatchInfo4\": \"\",\n    \"BillOfLadingMarks1\": \"\",\n    \"BillOfLadingMarks2\": \"\",\n    \"BillOfLadingMarks3\": \"\",\n    \"BillOfLadingMarks4\": \"\",\n    \"FreightCode\": \"C\",\n    \"FreightBillName\": \"Freight Co\",\n    \"FreightBillAddress1\": \"456 Freight St\",\n    \"FreightBillAddress2\": \"\",\n    \"FreightBillAddress3\": \"\",\n    \"BlanketPO\": \"PO123\",\n    \"DuplicateOrderMatchType\": \"A\",\n    \"DuplicateOverrideDays\": 30,\n    \"CrossReferenceSet\": \"SET001\",\n    \"ACHClass\": \"\",\n    \"ACHAccountType\": \"\",\n    \"ACHBankRoutingCode\": 0,\n    \"ACHBankAccountNumber\": \"\"\n  },\n  \"SystemMetadata\": {\n    \"UserID\": \"USER123\",\n    \"WorkstationID\": \"WS\",\n    \"TestPeriod\": \"T\"\n  }\n}\n</code></pre></p> <p>Example Output (Success): <pre><code>{\n  \"StatusCode\": \"SUC\",\n  \"ErrorMessage\": \"\",\n  \"UpdatedCustomerNumber\": 123456\n}\n</code></pre></p> <p>Example Output (Failure): <pre><code>{\n  \"StatusCode\": \"ERR\",\n  \"ErrorMessage\": \"SORT NAME MAY NOT BE BLANK\",\n  \"UpdatedCustomerNumber\": 123456\n}\n</code></pre></p> <p>This Function Requirement Document reimagines the <code>AR900</code> program as a programmatic function, maintaining all core functionality (add, update, reactivate, inactivate) while replacing screen interactions with structured input processing. It ensures compatibility with the existing IBM i environment and leverages the same files and external program (<code>BI907AC</code>) as the original implementation.</p>"}]}